
HomeSage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001396  0000140a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001396  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000026b8  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000777  00000000  00000000  00003ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  00004250  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001670  00000000  00000000  000043d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b5  00000000  00000000  00005a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001013  00000000  00000000  000062f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00007308  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  000076b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4b  00000000  00000000  00007abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000870a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e9       	ldi	r30, 0x96	; 150
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 31       	cpi	r26, 0x10	; 16
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a0 e1       	ldi	r26, 0x10	; 16
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 31       	cpi	r26, 0x10	; 16
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
      c6:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initSerialADC>:
#include "lcd.h"

void initSerialADC(void)
	// POST: Initializes SPI serain communication for the ADC
{
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);			// Set MOSI, SCK, SS output
      ce:	80 eb       	ldi	r24, 0xB0	; 176
      d0:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA);	// Enable SPI, Enable Master,
      d2:	80 e5       	ldi	r24, 0x50	; 80
      d4:	8c bd       	out	0x2c, r24	; 44
													//	mode 0,0
}
      d6:	08 95       	ret

000000d8 <readWriteADC>:

char readWriteADC(char data)
	// POST: Writes a character to the ADC, and returns data from the ADC
{
	SPDR = data;
      d8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
      da:	0d b4       	in	r0, 0x2d	; 45
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <readWriteADC+0x2>
	data = SPDR;
      e0:	8e b5       	in	r24, 0x2e	; 46
	return data;
}
      e2:	08 95       	ret

000000e4 <getValueADC>:

signed int getValueADC(int channel)
{
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
      e8:	ec 01       	movw	r28, r24
	int sLow = 0;				// Low byte to send to ADC
	int rHigh=0;				// Holds upper values from ADC
	int rLow=0;					// Holds lower values from ADC
	int value=0;				// Holds combined value to be returned

	PORTB |= (1<<PB4);			// Select line must be brought high before each read
      ea:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= !(1<<PB4);			// Bring select line low to initiate read from ADC
      ec:	85 b1       	in	r24, 0x05	; 5
      ee:	15 b8       	out	0x05, r1	; 5
	
	sHigh=((channel>>1)|(0b00001100));		// Send start bit, select single-sided
      f0:	ce 01       	movw	r24, r28
      f2:	95 95       	asr	r25
      f4:	87 95       	ror	r24
	sLow=(channel<<7);						//	reading, select channel
	
	readWriteADC(sHigh);			// Send high byte of ADC request					
      f6:	8c 60       	ori	r24, 0x0C	; 12
      f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <readWriteADC>
	rHigh = readWriteADC(sLow);		// Send low byte of ADC request, get high byte result
      fc:	8c 2f       	mov	r24, r28
      fe:	87 95       	ror	r24
     100:	88 27       	eor	r24, r24
     102:	87 95       	ror	r24
     104:	0e 94 6c 00 	call	0xd8	; 0xd8 <readWriteADC>
     108:	c8 2f       	mov	r28, r24
     10a:	d0 e0       	ldi	r29, 0x00	; 0
	rLow = readWriteADC(0);			// Get high byte of result
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	0e 94 6c 00 	call	0xd8	; 0xd8 <readWriteADC>
	PORTB |= (1<<PB4);				// Bring select line high (deselect ADC)
     112:	2c 9a       	sbi	0x05, 4	; 5
	
	rHigh &= (0b00111111);			// Add leading zeroes to the high byte to destroy any
     114:	cf 73       	andi	r28, 0x3F	; 63
     116:	d0 70       	andi	r29, 0x00	; 0
									//	random data that is before the actual data
	value = rLow + (rHigh<<8);		// Merge high and low bytes for the complete reading.
     118:	dc 2f       	mov	r29, r28
     11a:	cc 27       	eor	r28, r28
     11c:	9e 01       	movw	r18, r28
     11e:	28 0f       	add	r18, r24
     120:	31 1d       	adc	r19, r1
     122:	c9 01       	movw	r24, r18
	
	return value;
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <getCurrentADC>:

double getCurrentADC(unsigned int ADCValue)
{
	double current = 0;
	current = ((ADCValue*(1/323.57))-0.1142);
     12a:	bc 01       	movw	r22, r24
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__floatunsisf>
     134:	28 e5       	ldi	r18, 0x58	; 88
     136:	3a e8       	ldi	r19, 0x8A	; 138
     138:	4a e4       	ldi	r20, 0x4A	; 74
     13a:	5b e3       	ldi	r21, 0x3B	; 59
     13c:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     140:	21 eb       	ldi	r18, 0xB1	; 177
     142:	31 ee       	ldi	r19, 0xE1	; 225
     144:	49 ee       	ldi	r20, 0xE9	; 233
     146:	5d e3       	ldi	r21, 0x3D	; 61
     148:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__subsf3>
	return current;
}
     14c:	46 2f       	mov	r20, r22
     14e:	57 2f       	mov	r21, r23
     150:	68 2f       	mov	r22, r24
     152:	79 2f       	mov	r23, r25
     154:	cb 01       	movw	r24, r22
     156:	ba 01       	movw	r22, r20
     158:	08 95       	ret

0000015a <getVoltageADC>:

double getVoltageADC(unsigned int ADCValue)
{
	double voltage = 0;
	voltage = (ADCValue*(12.0/4095.0))+113.6;
     15a:	bc 01       	movw	r22, r24
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__floatunsisf>
     164:	21 e0       	ldi	r18, 0x01	; 1
     166:	3c e0       	ldi	r19, 0x0C	; 12
     168:	40 e4       	ldi	r20, 0x40	; 64
     16a:	5b e3       	ldi	r21, 0x3B	; 59
     16c:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
     170:	23 e3       	ldi	r18, 0x33	; 51
     172:	33 e3       	ldi	r19, 0x33	; 51
     174:	43 ee       	ldi	r20, 0xE3	; 227
     176:	52 e4       	ldi	r21, 0x42	; 66
     178:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
	return voltage;
     17c:	46 2f       	mov	r20, r22
     17e:	57 2f       	mov	r21, r23
     180:	68 2f       	mov	r22, r24
     182:	79 2f       	mov	r23, r25
     184:	cb 01       	movw	r24, r22
     186:	ba 01       	movw	r22, r20
     188:	08 95       	ret

0000018a <main>:
#include "pc.h"

#define F_CPU 8000000UL

int main(void)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	6a 97       	sbiw	r28, 0x1a	; 26
     194:	0f b6       	in	r0, 0x3f	; 63
     196:	f8 94       	cli
     198:	de bf       	out	0x3e, r29	; 62
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	cd bf       	out	0x3d, r28	; 61
	char str[5];
	double current,mid,voltage;
	double d1,d2,d3,d4,d5,d6,d7,d8,d9,d0;
	int delay = 100;
	
	initSerialLCD();
     19e:	0e 94 30 03 	call	0x660	; 0x660 <initSerialLCD>
	initSerialPC();
     1a2:	0e 94 84 04 	call	0x908	; 0x908 <initSerialPC>
	initSerialADC();
     1a6:	0e 94 67 00 	call	0xce	; 0xce <initSerialADC>
	initPWM();
     1aa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <initPWM>
	interruptEnablePWM();
     1ae:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <interruptEnablePWM>
	
	initLCD();
     1b2:	0e 94 4d 03 	call	0x69a	; 0x69a <initLCD>
	
	backlightOnLCD();
     1b6:	0e 94 8a 03 	call	0x714	; 0x714 <backlightOnLCD>

	
    while(1)
    {
		d0 = getValueADC(1);
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1c6:	87 ea       	ldi	r24, 0xA7	; 167
     1c8:	91 e6       	ldi	r25, 0x61	; 97
     1ca:	01 97       	sbiw	r24, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0x40>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x46>
     1d0:	00 00       	nop
		_delay_ms(delay);
		d1 = getValueADC(1);
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     1da:	9c 83       	std	Y+4, r25	; 0x04
     1dc:	8b 83       	std	Y+3, r24	; 0x03
     1de:	a7 ea       	ldi	r26, 0xA7	; 167
     1e0:	b1 e6       	ldi	r27, 0x61	; 97
     1e2:	11 97       	sbiw	r26, 0x01	; 1
     1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x58>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x5e>
     1e8:	00 00       	nop
		_delay_ms(delay);
		d2 = getValueADC(1);
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     1f2:	9e 83       	std	Y+6, r25	; 0x06
     1f4:	8d 83       	std	Y+5, r24	; 0x05
     1f6:	e7 ea       	ldi	r30, 0xA7	; 167
     1f8:	f1 e6       	ldi	r31, 0x61	; 97
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x70>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x76>
     200:	00 00       	nop
		_delay_ms(delay);
		d3 = getValueADC(1);
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     20a:	98 87       	std	Y+8, r25	; 0x08
     20c:	8f 83       	std	Y+7, r24	; 0x07
     20e:	87 ea       	ldi	r24, 0xA7	; 167
     210:	91 e6       	ldi	r25, 0x61	; 97
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <main+0x88>
     216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x8e>
     218:	00 00       	nop
		_delay_ms(delay);
		d4 = getValueADC(1);
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     222:	9a 87       	std	Y+10, r25	; 0x0a
     224:	89 87       	std	Y+9, r24	; 0x09
     226:	a7 ea       	ldi	r26, 0xA7	; 167
     228:	b1 e6       	ldi	r27, 0x61	; 97
     22a:	11 97       	sbiw	r26, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <main+0xa0>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0xa6>
     230:	00 00       	nop
		_delay_ms(delay);
		d5 = getValueADC(1);
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     23a:	9c 87       	std	Y+12, r25	; 0x0c
     23c:	8b 87       	std	Y+11, r24	; 0x0b
     23e:	e7 ea       	ldi	r30, 0xA7	; 167
     240:	f1 e6       	ldi	r31, 0x61	; 97
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <main+0xb8>
     246:	00 c0       	rjmp	.+0      	; 0x248 <main+0xbe>
     248:	00 00       	nop
		_delay_ms(delay);
		d6 = getValueADC(1);
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     252:	9e 87       	std	Y+14, r25	; 0x0e
     254:	8d 87       	std	Y+13, r24	; 0x0d
     256:	87 ea       	ldi	r24, 0xA7	; 167
     258:	91 e6       	ldi	r25, 0x61	; 97
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <main+0xd0>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0xd6>
     260:	00 00       	nop
		_delay_ms(delay);
		d7 = getValueADC(1);
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     26a:	98 8b       	std	Y+16, r25	; 0x10
     26c:	8f 87       	std	Y+15, r24	; 0x0f
     26e:	a7 ea       	ldi	r26, 0xA7	; 167
     270:	b1 e6       	ldi	r27, 0x61	; 97
     272:	11 97       	sbiw	r26, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <main+0xe8>
     276:	00 c0       	rjmp	.+0      	; 0x278 <main+0xee>
     278:	00 00       	nop
		_delay_ms(delay);
		d8 = getValueADC(1);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     282:	9a 8b       	std	Y+18, r25	; 0x12
     284:	89 8b       	std	Y+17, r24	; 0x11
     286:	e7 ea       	ldi	r30, 0xA7	; 167
     288:	f1 e6       	ldi	r31, 0x61	; 97
     28a:	31 97       	sbiw	r30, 0x01	; 1
     28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x100>
     28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x106>
     290:	00 00       	nop
		_delay_ms(delay);
		d9 = getValueADC(1);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     29a:	9c 8b       	std	Y+20, r25	; 0x14
     29c:	8b 8b       	std	Y+19, r24	; 0x13
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
		d0 = getValueADC(1);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     2a6:	6c 01       	movw	r12, r24
     2a8:	87 ea       	ldi	r24, 0xA7	; 167
     2aa:	91 e6       	ldi	r25, 0x61	; 97
     2ac:	01 97       	sbiw	r24, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x122>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x128>
     2b2:	00 00       	nop
		_delay_ms(delay);
		d1 = getValueADC(1);
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     2bc:	8c 01       	movw	r16, r24
     2be:	a7 ea       	ldi	r26, 0xA7	; 167
     2c0:	b1 e6       	ldi	r27, 0x61	; 97
     2c2:	11 97       	sbiw	r26, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x138>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x13e>
     2c8:	00 00       	nop
		_delay_ms(delay);
		d2 = getValueADC(1);
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     2d2:	5c 01       	movw	r10, r24
     2d4:	e7 ea       	ldi	r30, 0xA7	; 167
     2d6:	f1 e6       	ldi	r31, 0x61	; 97
     2d8:	31 97       	sbiw	r30, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x14e>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x154>
     2de:	00 00       	nop
		_delay_ms(delay);
		d3 = getValueADC(1);
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     2e8:	4c 01       	movw	r8, r24
     2ea:	87 ea       	ldi	r24, 0xA7	; 167
     2ec:	91 e6       	ldi	r25, 0x61	; 97
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0x164>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <main+0x16a>
     2f4:	00 00       	nop
		_delay_ms(delay);
		d4 = getValueADC(1);
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     2fe:	3c 01       	movw	r6, r24
     300:	a7 ea       	ldi	r26, 0xA7	; 167
     302:	b1 e6       	ldi	r27, 0x61	; 97
     304:	11 97       	sbiw	r26, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <main+0x17a>
     308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x180>
     30a:	00 00       	nop
		_delay_ms(delay);
		d5 = getValueADC(1);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     314:	2c 01       	movw	r4, r24
     316:	e7 ea       	ldi	r30, 0xA7	; 167
     318:	f1 e6       	ldi	r31, 0x61	; 97
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x190>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x196>
     320:	00 00       	nop
		_delay_ms(delay);
		d6 = getValueADC(1);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     32a:	1c 01       	movw	r2, r24
     32c:	87 ea       	ldi	r24, 0xA7	; 167
     32e:	91 e6       	ldi	r25, 0x61	; 97
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <main+0x1a6>
     334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x1ac>
     336:	00 00       	nop
		_delay_ms(delay);
		d7 = getValueADC(1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     340:	9e 8b       	std	Y+22, r25	; 0x16
     342:	8d 8b       	std	Y+21, r24	; 0x15
     344:	a7 ea       	ldi	r26, 0xA7	; 167
     346:	b1 e6       	ldi	r27, 0x61	; 97
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <main+0x1be>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x1c4>
     34e:	00 00       	nop
		_delay_ms(delay);
		d8 = getValueADC(1);
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     358:	98 8f       	std	Y+24, r25	; 0x18
     35a:	8f 8b       	std	Y+23, r24	; 0x17
     35c:	e7 ea       	ldi	r30, 0xA7	; 167
     35e:	f1 e6       	ldi	r31, 0x61	; 97
     360:	31 97       	sbiw	r30, 0x01	; 1
     362:	f1 f7       	brne	.-4      	; 0x360 <main+0x1d6>
     364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x1dc>
     366:	00 00       	nop
		_delay_ms(delay);
		d9 = getValueADC(1);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     370:	9a 8f       	std	Y+26, r25	; 0x1a
     372:	89 8f       	std	Y+25, r24	; 0x19
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
		d0 = getValueADC(1);
     374:	b6 01       	movw	r22, r12
     376:	88 27       	eor	r24, r24
     378:	77 fd       	sbrc	r23, 7
     37a:	80 95       	com	r24
     37c:	98 2f       	mov	r25, r24
     37e:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d1 = getValueADC(1);
     386:	b8 01       	movw	r22, r16
     388:	88 27       	eor	r24, r24
     38a:	77 fd       	sbrc	r23, 7
     38c:	80 95       	com	r24
     38e:	98 2f       	mov	r25, r24
     390:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     394:	9b 01       	movw	r18, r22
     396:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
		d0 = getValueADC(1);
		_delay_ms(delay);
		d1 = getValueADC(1);
		_delay_ms(delay);
		d2 = getValueADC(1);
     3a4:	b5 01       	movw	r22, r10
     3a6:	88 27       	eor	r24, r24
     3a8:	77 fd       	sbrc	r23, 7
     3aa:	80 95       	com	r24
     3ac:	98 2f       	mov	r25, r24
     3ae:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     3b2:	9b 01       	movw	r18, r22
     3b4:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     3b6:	c7 01       	movw	r24, r14
     3b8:	b6 01       	movw	r22, r12
     3ba:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     3be:	6b 01       	movw	r12, r22
     3c0:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d1 = getValueADC(1);
		_delay_ms(delay);
		d2 = getValueADC(1);
		_delay_ms(delay);
		d3 = getValueADC(1);
     3c2:	b4 01       	movw	r22, r8
     3c4:	88 27       	eor	r24, r24
     3c6:	77 fd       	sbrc	r23, 7
     3c8:	80 95       	com	r24
     3ca:	98 2f       	mov	r25, r24
     3cc:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     3d4:	c7 01       	movw	r24, r14
     3d6:	b6 01       	movw	r22, r12
     3d8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     3dc:	6b 01       	movw	r12, r22
     3de:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d2 = getValueADC(1);
		_delay_ms(delay);
		d3 = getValueADC(1);
		_delay_ms(delay);
		d4 = getValueADC(1);
     3e0:	b3 01       	movw	r22, r6
     3e2:	88 27       	eor	r24, r24
     3e4:	77 fd       	sbrc	r23, 7
     3e6:	80 95       	com	r24
     3e8:	98 2f       	mov	r25, r24
     3ea:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     3ee:	9b 01       	movw	r18, r22
     3f0:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     3f2:	c7 01       	movw	r24, r14
     3f4:	b6 01       	movw	r22, r12
     3f6:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     3fa:	6b 01       	movw	r12, r22
     3fc:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d3 = getValueADC(1);
		_delay_ms(delay);
		d4 = getValueADC(1);
		_delay_ms(delay);
		d5 = getValueADC(1);
     3fe:	b2 01       	movw	r22, r4
     400:	88 27       	eor	r24, r24
     402:	77 fd       	sbrc	r23, 7
     404:	80 95       	com	r24
     406:	98 2f       	mov	r25, r24
     408:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     418:	6b 01       	movw	r12, r22
     41a:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d4 = getValueADC(1);
		_delay_ms(delay);
		d5 = getValueADC(1);
		_delay_ms(delay);
		d6 = getValueADC(1);
     41c:	b1 01       	movw	r22, r2
     41e:	88 27       	eor	r24, r24
     420:	77 fd       	sbrc	r23, 7
     422:	80 95       	com	r24
     424:	98 2f       	mov	r25, r24
     426:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     42a:	9b 01       	movw	r18, r22
     42c:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     42e:	c7 01       	movw	r24, r14
     430:	b6 01       	movw	r22, r12
     432:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     436:	6b 01       	movw	r12, r22
     438:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d5 = getValueADC(1);
		_delay_ms(delay);
		d6 = getValueADC(1);
		_delay_ms(delay);
		d7 = getValueADC(1);
     43a:	2d 89       	ldd	r18, Y+21	; 0x15
     43c:	3e 89       	ldd	r19, Y+22	; 0x16
     43e:	b9 01       	movw	r22, r18
     440:	88 27       	eor	r24, r24
     442:	77 fd       	sbrc	r23, 7
     444:	80 95       	com	r24
     446:	98 2f       	mov	r25, r24
     448:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     44c:	9b 01       	movw	r18, r22
     44e:	ac 01       	movw	r20, r24
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     450:	c7 01       	movw	r24, r14
     452:	b6 01       	movw	r22, r12
     454:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     458:	6b 01       	movw	r12, r22
     45a:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d6 = getValueADC(1);
		_delay_ms(delay);
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
     45c:	af 89       	ldd	r26, Y+23	; 0x17
     45e:	b8 8d       	ldd	r27, Y+24	; 0x18
     460:	bd 01       	movw	r22, r26
     462:	88 27       	eor	r24, r24
     464:	77 fd       	sbrc	r23, 7
     466:	80 95       	com	r24
     468:	98 2f       	mov	r25, r24
     46a:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     46e:	9b 01       	movw	r18, r22
     470:	ac 01       	movw	r20, r24
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     472:	c7 01       	movw	r24, r14
     474:	b6 01       	movw	r22, r12
     476:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     47a:	6b 01       	movw	r12, r22
     47c:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
     47e:	e9 8d       	ldd	r30, Y+25	; 0x19
     480:	fa 8d       	ldd	r31, Y+26	; 0x1a
     482:	bf 01       	movw	r22, r30
     484:	88 27       	eor	r24, r24
     486:	77 fd       	sbrc	r23, 7
     488:	80 95       	com	r24
     48a:	98 2f       	mov	r25, r24
     48c:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     490:	9b 01       	movw	r18, r22
     492:	ac 01       	movw	r20, r24
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     494:	c7 01       	movw	r24, r14
     496:	b6 01       	movw	r22, r12
     498:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	40 e2       	ldi	r20, 0x20	; 32
     4a2:	51 e4       	ldi	r21, 0x41	; 65
     4a4:	0e 94 60 05 	call	0xac0	; 0xac0 <__divsf3>
     4a8:	4b 01       	movw	r8, r22
     4aa:	5c 01       	movw	r10, r24
	backlightOnLCD();

	
    while(1)
    {
		d0 = getValueADC(1);
     4ac:	29 81       	ldd	r18, Y+1	; 0x01
     4ae:	3a 81       	ldd	r19, Y+2	; 0x02
     4b0:	b9 01       	movw	r22, r18
     4b2:	88 27       	eor	r24, r24
     4b4:	77 fd       	sbrc	r23, 7
     4b6:	80 95       	com	r24
     4b8:	98 2f       	mov	r25, r24
     4ba:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     4be:	6b 01       	movw	r12, r22
     4c0:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d1 = getValueADC(1);
     4c2:	ab 81       	ldd	r26, Y+3	; 0x03
     4c4:	bc 81       	ldd	r27, Y+4	; 0x04
     4c6:	bd 01       	movw	r22, r26
     4c8:	88 27       	eor	r24, r24
     4ca:	77 fd       	sbrc	r23, 7
     4cc:	80 95       	com	r24
     4ce:	98 2f       	mov	r25, r24
     4d0:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     4d4:	9b 01       	movw	r18, r22
     4d6:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     4d8:	c7 01       	movw	r24, r14
     4da:	b6 01       	movw	r22, r12
     4dc:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     4e0:	6b 01       	movw	r12, r22
     4e2:	7c 01       	movw	r14, r24
    {
		d0 = getValueADC(1);
		_delay_ms(delay);
		d1 = getValueADC(1);
		_delay_ms(delay);
		d2 = getValueADC(1);
     4e4:	ed 81       	ldd	r30, Y+5	; 0x05
     4e6:	fe 81       	ldd	r31, Y+6	; 0x06
     4e8:	bf 01       	movw	r22, r30
     4ea:	88 27       	eor	r24, r24
     4ec:	77 fd       	sbrc	r23, 7
     4ee:	80 95       	com	r24
     4f0:	98 2f       	mov	r25, r24
     4f2:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     4f6:	9b 01       	movw	r18, r22
     4f8:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     4fa:	c7 01       	movw	r24, r14
     4fc:	b6 01       	movw	r22, r12
     4fe:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     502:	6b 01       	movw	r12, r22
     504:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d1 = getValueADC(1);
		_delay_ms(delay);
		d2 = getValueADC(1);
		_delay_ms(delay);
		d3 = getValueADC(1);
     506:	2f 81       	ldd	r18, Y+7	; 0x07
     508:	38 85       	ldd	r19, Y+8	; 0x08
     50a:	b9 01       	movw	r22, r18
     50c:	88 27       	eor	r24, r24
     50e:	77 fd       	sbrc	r23, 7
     510:	80 95       	com	r24
     512:	98 2f       	mov	r25, r24
     514:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     518:	9b 01       	movw	r18, r22
     51a:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     51c:	c7 01       	movw	r24, r14
     51e:	b6 01       	movw	r22, r12
     520:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     524:	6b 01       	movw	r12, r22
     526:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d2 = getValueADC(1);
		_delay_ms(delay);
		d3 = getValueADC(1);
		_delay_ms(delay);
		d4 = getValueADC(1);
     528:	a9 85       	ldd	r26, Y+9	; 0x09
     52a:	ba 85       	ldd	r27, Y+10	; 0x0a
     52c:	bd 01       	movw	r22, r26
     52e:	88 27       	eor	r24, r24
     530:	77 fd       	sbrc	r23, 7
     532:	80 95       	com	r24
     534:	98 2f       	mov	r25, r24
     536:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     53a:	9b 01       	movw	r18, r22
     53c:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     53e:	c7 01       	movw	r24, r14
     540:	b6 01       	movw	r22, r12
     542:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     546:	6b 01       	movw	r12, r22
     548:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d3 = getValueADC(1);
		_delay_ms(delay);
		d4 = getValueADC(1);
		_delay_ms(delay);
		d5 = getValueADC(1);
     54a:	eb 85       	ldd	r30, Y+11	; 0x0b
     54c:	fc 85       	ldd	r31, Y+12	; 0x0c
     54e:	bf 01       	movw	r22, r30
     550:	88 27       	eor	r24, r24
     552:	77 fd       	sbrc	r23, 7
     554:	80 95       	com	r24
     556:	98 2f       	mov	r25, r24
     558:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     55c:	9b 01       	movw	r18, r22
     55e:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     560:	c7 01       	movw	r24, r14
     562:	b6 01       	movw	r22, r12
     564:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     568:	6b 01       	movw	r12, r22
     56a:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d4 = getValueADC(1);
		_delay_ms(delay);
		d5 = getValueADC(1);
		_delay_ms(delay);
		d6 = getValueADC(1);
     56c:	2d 85       	ldd	r18, Y+13	; 0x0d
     56e:	3e 85       	ldd	r19, Y+14	; 0x0e
     570:	b9 01       	movw	r22, r18
     572:	88 27       	eor	r24, r24
     574:	77 fd       	sbrc	r23, 7
     576:	80 95       	com	r24
     578:	98 2f       	mov	r25, r24
     57a:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     57e:	9b 01       	movw	r18, r22
     580:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d5 = getValueADC(1);
		_delay_ms(delay);
		d6 = getValueADC(1);
		_delay_ms(delay);
		d7 = getValueADC(1);
     58e:	af 85       	ldd	r26, Y+15	; 0x0f
     590:	b8 89       	ldd	r27, Y+16	; 0x10
     592:	bd 01       	movw	r22, r26
     594:	88 27       	eor	r24, r24
     596:	77 fd       	sbrc	r23, 7
     598:	80 95       	com	r24
     59a:	98 2f       	mov	r25, r24
     59c:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     5a0:	9b 01       	movw	r18, r22
     5a2:	ac 01       	movw	r20, r24
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     5a4:	c7 01       	movw	r24, r14
     5a6:	b6 01       	movw	r22, r12
     5a8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     5ac:	6b 01       	movw	r12, r22
     5ae:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d6 = getValueADC(1);
		_delay_ms(delay);
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
     5b0:	e9 89       	ldd	r30, Y+17	; 0x11
     5b2:	fa 89       	ldd	r31, Y+18	; 0x12
     5b4:	bf 01       	movw	r22, r30
     5b6:	88 27       	eor	r24, r24
     5b8:	77 fd       	sbrc	r23, 7
     5ba:	80 95       	com	r24
     5bc:	98 2f       	mov	r25, r24
     5be:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
		_delay_ms(delay);
		d9 = getValueADC(1);
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     5c6:	c7 01       	movw	r24, r14
     5c8:	b6 01       	movw	r22, r12
     5ca:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     5ce:	6b 01       	movw	r12, r22
     5d0:	7c 01       	movw	r14, r24
		_delay_ms(delay);
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
     5d2:	2b 89       	ldd	r18, Y+19	; 0x13
     5d4:	3c 89       	ldd	r19, Y+20	; 0x14
     5d6:	b9 01       	movw	r22, r18
     5d8:	88 27       	eor	r24, r24
     5da:	77 fd       	sbrc	r23, 7
     5dc:	80 95       	com	r24
     5de:	98 2f       	mov	r25, r24
     5e0:	0e 94 f6 05 	call	0xbec	; 0xbec <__floatsisf>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
		mid = (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0;
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e2       	ldi	r20, 0x20	; 32
     5f6:	51 e4       	ldi	r21, 0x41	; 65
     5f8:	0e 94 60 05 	call	0xac0	; 0xac0 <__divsf3>
     5fc:	9b 01       	movw	r18, r22
     5fe:	ac 01       	movw	r20, r24
		d7 = getValueADC(1);
		_delay_ms(delay);
		d8 = getValueADC(1);
		_delay_ms(delay);
		d9 = getValueADC(1);
		current = (mid + (d0+d1+d2+d3+d4+d5+d6+d7+d8+d9)/10.0)/2;
     600:	c5 01       	movw	r24, r10
     602:	b4 01       	movw	r22, r8
     604:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__addsf3>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	5f e3       	ldi	r21, 0x3F	; 63
     610:	0e 94 82 06 	call	0xd04	; 0xd04 <__mulsf3>
		current = getCurrentADC(current);
     614:	0e 94 c8 05 	call	0xb90	; 0xb90 <__fixunssfsi>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	0e 94 95 00 	call	0x12a	; 0x12a <getCurrentADC>
     620:	6b 01       	movw	r12, r22
     622:	7c 01       	movw	r14, r24
		voltage = getVoltageADC(getValueADC(0));
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 72 00 	call	0xe4	; 0xe4 <getValueADC>
     62c:	0e 94 ad 00 	call	0x15a	; 0x15a <getVoltageADC>
		
		printLayoutLCD(voltage,current,303403403403400340340);
     630:	a7 01       	movw	r20, r14
     632:	96 01       	movw	r18, r12
     634:	0f 2e       	mov	r0, r31
     636:	f8 ed       	ldi	r31, 0xD8	; 216
     638:	ef 2e       	mov	r14, r31
     63a:	f2 e2       	ldi	r31, 0x22	; 34
     63c:	ff 2e       	mov	r15, r31
     63e:	f5 ee       	ldi	r31, 0xE5	; 229
     640:	0f 2f       	mov	r16, r31
     642:	fe e5       	ldi	r31, 0x5E	; 94
     644:	1f 2f       	mov	r17, r31
     646:	f0 2d       	mov	r31, r0
     648:	0e 94 ab 03 	call	0x756	; 0x756 <printLayoutLCD>
     64c:	8f e7       	ldi	r24, 0x7F	; 127
     64e:	94 e8       	ldi	r25, 0x84	; 132
     650:	ae e1       	ldi	r26, 0x1E	; 30
     652:	81 50       	subi	r24, 0x01	; 1
     654:	90 40       	sbci	r25, 0x00	; 0
     656:	a0 40       	sbci	r26, 0x00	; 0
     658:	e1 f7       	brne	.-8      	; 0x652 <main+0x4c8>
     65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0x4d2>
     65c:	00 00       	nop
     65e:	ad cd       	rjmp	.-1190   	; 0x1ba <main+0x30>

00000660 <initSerialLCD>:
#include "pc.h"

void initSerialLCD(void)
	// POST: Initializes serial for LCD at 9600 baud, 8 bit, no parity, 1 stop bit
{
	UBRR1L = 0b00110011;			// Set UBRR1 to 51, for 9600 baud
     660:	83 e3       	ldi	r24, 0x33	; 51
     662:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0;
     666:	10 92 cd 00 	sts	0x00CD, r1
	
	DDRD |= 0b00001000;				// Set the TX line to output
     66a:	53 9a       	sbi	0x0a, 3	; 10
	
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);		// Enable recieve and transmit lines
     66c:	88 e1       	ldi	r24, 0x18	; 24
     66e:	80 93 c9 00 	sts	0x00C9, r24
	
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);		// Frame: 8-bit, no parity, 1 stop bit
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	80 93 ca 00 	sts	0x00CA, r24
}
     678:	08 95       	ret

0000067a <putByteLCD>:
}

void putByteLCD(unsigned char data)
	// POST: Sends one byte of data to the LCD
{
	while (!(UCSR1A & (1<<UDRE1)));			// Wait for the transmit buffer to be empty
     67a:	e8 ec       	ldi	r30, 0xC8	; 200
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	90 81       	ld	r25, Z
     680:	95 ff       	sbrs	r25, 5
     682:	fd cf       	rjmp	.-6      	; 0x67e <putByteLCD+0x4>
	
	UDR1 = data;							// Put data in buffer and send
     684:	80 93 ce 00 	sts	0x00CE, r24
}
     688:	08 95       	ret

0000068a <getCharLCD>:

unsigned char getCharLCD(void)
// POST: Recieves one byte of data from the LCD
{
	while (!(UCSR1A & (1<<RXC1)));			// Wait for data to be received
     68a:	e8 ec       	ldi	r30, 0xC8	; 200
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	88 23       	and	r24, r24
     692:	ec f7       	brge	.-6      	; 0x68e <getCharLCD+0x4>
	
	return UDR1;							// Get data from buffer
     694:	80 91 ce 00 	lds	r24, 0x00CE
}
     698:	08 95       	ret

0000069a <initLCD>:
	//		Blinking off
	//		Address increments by 1 from left to right
	//		No screen shift
	//		Backlight off 
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Power LCD off
     69a:	8f e9       	ldi	r24, 0x9F	; 159
     69c:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(SLCD_POWER_OFF);
     6a0:	82 e8       	ldi	r24, 0x82	; 130
     6a2:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	
	putByteLCD(SLCD_CONTROL_HEADER);		// Power LCD on, send bytes to initialize serial LCD
     6a6:	8f e9       	ldi	r24, 0x9F	; 159
     6a8:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(SLCD_POWER_ON);
     6ac:	83 e8       	ldi	r24, 0x83	; 131
     6ae:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(SLCD_INIT_ACK);
     6b2:	85 ea       	ldi	r24, 0xA5	; 165
     6b4:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	
	while(getCharLCD() != SLCD_INIT_DONE);	// Check if LCD initialized properly
     6b8:	0e 94 45 03 	call	0x68a	; 0x68a <getCharLCD>
     6bc:	8a 3a       	cpi	r24, 0xAA	; 170
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <initLCD+0x1e>
}
     6c0:	08 95       	ret

000006c2 <writeLCD>:
	return UDR1;							// Get data from buffer
}

void writeLCD(char str[])
	// POST: Writes a string of characters to the LCD
{
     6c2:	ef 92       	push	r14
     6c4:	ff 92       	push	r15
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	f8 2e       	mov	r15, r24
     6d0:	e9 2e       	mov	r14, r25
	putByteLCD(SLCD_CHAR_HEADER);			// Tell LCD to write follwing data to screen
     6d2:	8e ef       	ldi	r24, 0xFE	; 254
     6d4:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
     6d8:	0f 2d       	mov	r16, r15
     6da:	1e 2d       	mov	r17, r14
	
	for(int i=0; i<strlen(str); i++)		// Put each character to the LCD
     6dc:	c0 e0       	ldi	r28, 0x00	; 0
     6de:	d0 e0       	ldi	r29, 0x00	; 0
     6e0:	06 c0       	rjmp	.+12     	; 0x6ee <writeLCD+0x2c>
	{
		putByteLCD(str[i]);
     6e2:	f8 01       	movw	r30, r16
     6e4:	81 91       	ld	r24, Z+
     6e6:	8f 01       	movw	r16, r30
     6e8:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
void writeLCD(char str[])
	// POST: Writes a string of characters to the LCD
{
	putByteLCD(SLCD_CHAR_HEADER);			// Tell LCD to write follwing data to screen
	
	for(int i=0; i<strlen(str); i++)		// Put each character to the LCD
     6ec:	21 96       	adiw	r28, 0x01	; 1
     6ee:	ef 2d       	mov	r30, r15
     6f0:	fe 2d       	mov	r31, r14
     6f2:	df 01       	movw	r26, r30
     6f4:	0d 90       	ld	r0, X+
     6f6:	00 20       	and	r0, r0
     6f8:	e9 f7       	brne	.-6      	; 0x6f4 <writeLCD+0x32>
     6fa:	11 97       	sbiw	r26, 0x01	; 1
     6fc:	ae 1b       	sub	r26, r30
     6fe:	bf 0b       	sbc	r27, r31
     700:	ca 17       	cp	r28, r26
     702:	db 07       	cpc	r29, r27
     704:	70 f3       	brcs	.-36     	; 0x6e2 <writeLCD+0x20>
	{
		putByteLCD(str[i]);
	}	
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	ff 90       	pop	r15
     710:	ef 90       	pop	r14
     712:	08 95       	ret

00000714 <backlightOnLCD>:

void backlightOnLCD(void)
	// POST: Turns on the LCD Backlight
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Turn backlight on
     714:	8f e9       	ldi	r24, 0x9F	; 159
     716:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(SLCD_BACKLIGHT_ON);
     71a:	81 e8       	ldi	r24, 0x81	; 129
     71c:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
}	
     720:	08 95       	ret

00000722 <setCursorLCD>:

void setCursorLCD(int col, int row)
		// PRE:	 0<=col<=15, row = 0 or 1
	// POST: Sets the cursor to the specified column and row
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	d8 2f       	mov	r29, r24
     728:	c6 2f       	mov	r28, r22
	putByteLCD(SLCD_CONTROL_HEADER);	
     72a:	8f e9       	ldi	r24, 0x9F	; 159
     72c:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(SLCD_CURSOR_HEADER);			// Tell LCD next two bytes are coordinate for cursor
     730:	8f ef       	ldi	r24, 0xFF	; 255
     732:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(col); 
     736:	8d 2f       	mov	r24, r29
     738:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(row);
     73c:	8c 2f       	mov	r24, r28
     73e:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <clearScreenLCD>:

void clearScreenLCD(void)
	// POST: Clears the LCD screen
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Clear the screen
     748:	8f e9       	ldi	r24, 0x9F	; 159
     74a:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
	putByteLCD(SLCD_CLEAR_DISPLAY);			
     74e:	85 e6       	ldi	r24, 0x65	; 101
     750:	0e 94 3d 03 	call	0x67a	; 0x67a <putByteLCD>
     754:	08 95       	ret

00000756 <printLayoutLCD>:
	
	while(getCharLCD() != SLCD_INIT_DONE);	// Check if LCD initialized properly
}

void printLayoutLCD(double voltage, double current, double power)
{
     756:	4f 92       	push	r4
     758:	5f 92       	push	r5
     75a:	6f 92       	push	r6
     75c:	7f 92       	push	r7
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	2a 97       	sbiw	r28, 0x0a	; 10
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
     786:	2b 01       	movw	r4, r22
     788:	3c 01       	movw	r6, r24
     78a:	2f 83       	std	Y+7, r18	; 0x07
     78c:	38 87       	std	Y+8, r19	; 0x08
     78e:	49 87       	std	Y+9, r20	; 0x09
     790:	5a 87       	std	Y+10, r21	; 0x0a
     792:	47 01       	movw	r8, r14
     794:	58 01       	movw	r10, r16
	char str[6];
	
	clearScreenLCD();
     796:	0e 94 a4 03 	call	0x748	; 0x748 <clearScreenLCD>
	setCursorLCD(0,0);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	0e 94 91 03 	call	0x722	; 0x722 <setCursorLCD>
	snprintf(str,6,"%f",voltage);
     7a6:	8d b7       	in	r24, 0x3d	; 61
     7a8:	9e b7       	in	r25, 0x3e	; 62
     7aa:	0a 97       	sbiw	r24, 0x0a	; 10
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	9e bf       	out	0x3e, r25	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	8d bf       	out	0x3d, r24	; 61
     7b6:	ed b7       	in	r30, 0x3d	; 61
     7b8:	fe b7       	in	r31, 0x3e	; 62
     7ba:	31 96       	adiw	r30, 0x01	; 1
     7bc:	8e 01       	movw	r16, r28
     7be:	0f 5f       	subi	r16, 0xFF	; 255
     7c0:	1f 4f       	sbci	r17, 0xFF	; 255
     7c2:	ad b7       	in	r26, 0x3d	; 61
     7c4:	be b7       	in	r27, 0x3e	; 62
     7c6:	12 96       	adiw	r26, 0x02	; 2
     7c8:	1c 93       	st	X, r17
     7ca:	0e 93       	st	-X, r16
     7cc:	11 97       	sbiw	r26, 0x01	; 1
     7ce:	0f 2e       	mov	r0, r31
     7d0:	f6 e0       	ldi	r31, 0x06	; 6
     7d2:	ef 2e       	mov	r14, r31
     7d4:	ff 24       	eor	r15, r15
     7d6:	f0 2d       	mov	r31, r0
     7d8:	f3 82       	std	Z+3, r15	; 0x03
     7da:	e2 82       	std	Z+2, r14	; 0x02
     7dc:	0f 2e       	mov	r0, r31
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	cf 2e       	mov	r12, r31
     7e2:	f1 e0       	ldi	r31, 0x01	; 1
     7e4:	df 2e       	mov	r13, r31
     7e6:	f0 2d       	mov	r31, r0
     7e8:	d5 82       	std	Z+5, r13	; 0x05
     7ea:	c4 82       	std	Z+4, r12	; 0x04
     7ec:	46 82       	std	Z+6, r4	; 0x06
     7ee:	57 82       	std	Z+7, r5	; 0x07
     7f0:	60 86       	std	Z+8, r6	; 0x08
     7f2:	71 86       	std	Z+9, r7	; 0x09
     7f4:	0e 94 e5 06 	call	0xdca	; 0xdca <snprintf>
	writeLCD("V:");
     7f8:	8d b7       	in	r24, 0x3d	; 61
     7fa:	9e b7       	in	r25, 0x3e	; 62
     7fc:	0a 96       	adiw	r24, 0x0a	; 10
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	9e bf       	out	0x3e, r25	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	8d bf       	out	0x3d, r24	; 61
     808:	83 e0       	ldi	r24, 0x03	; 3
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <writeLCD>
	writeLCD(str);
     810:	c8 01       	movw	r24, r16
     812:	0e 94 61 03 	call	0x6c2	; 0x6c2 <writeLCD>
	setCursorLCD(9,0);
     816:	89 e0       	ldi	r24, 0x09	; 9
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	0e 94 91 03 	call	0x722	; 0x722 <setCursorLCD>
	snprintf(str,6,"%f",current);
     822:	ad b7       	in	r26, 0x3d	; 61
     824:	be b7       	in	r27, 0x3e	; 62
     826:	1a 97       	sbiw	r26, 0x0a	; 10
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	be bf       	out	0x3e, r27	; 62
     82e:	0f be       	out	0x3f, r0	; 63
     830:	ad bf       	out	0x3d, r26	; 61
     832:	ed b7       	in	r30, 0x3d	; 61
     834:	fe b7       	in	r31, 0x3e	; 62
     836:	31 96       	adiw	r30, 0x01	; 1
     838:	12 96       	adiw	r26, 0x02	; 2
     83a:	1c 93       	st	X, r17
     83c:	0e 93       	st	-X, r16
     83e:	11 97       	sbiw	r26, 0x01	; 1
     840:	f3 82       	std	Z+3, r15	; 0x03
     842:	e2 82       	std	Z+2, r14	; 0x02
     844:	d5 82       	std	Z+5, r13	; 0x05
     846:	c4 82       	std	Z+4, r12	; 0x04
     848:	8f 81       	ldd	r24, Y+7	; 0x07
     84a:	98 85       	ldd	r25, Y+8	; 0x08
     84c:	a9 85       	ldd	r26, Y+9	; 0x09
     84e:	ba 85       	ldd	r27, Y+10	; 0x0a
     850:	86 83       	std	Z+6, r24	; 0x06
     852:	97 83       	std	Z+7, r25	; 0x07
     854:	a0 87       	std	Z+8, r26	; 0x08
     856:	b1 87       	std	Z+9, r27	; 0x09
     858:	0e 94 e5 06 	call	0xdca	; 0xdca <snprintf>
	writeLCD("I:");
     85c:	ad b7       	in	r26, 0x3d	; 61
     85e:	be b7       	in	r27, 0x3e	; 62
     860:	1a 96       	adiw	r26, 0x0a	; 10
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	be bf       	out	0x3e, r27	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	ad bf       	out	0x3d, r26	; 61
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 61 03 	call	0x6c2	; 0x6c2 <writeLCD>
	writeLCD(str);
     874:	c8 01       	movw	r24, r16
     876:	0e 94 61 03 	call	0x6c2	; 0x6c2 <writeLCD>
	setCursorLCD(2,1);
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	0e 94 91 03 	call	0x722	; 0x722 <setCursorLCD>
	snprintf(str,6,"%f",power);
     886:	8d b7       	in	r24, 0x3d	; 61
     888:	9e b7       	in	r25, 0x3e	; 62
     88a:	0a 97       	sbiw	r24, 0x0a	; 10
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	9e bf       	out	0x3e, r25	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	8d bf       	out	0x3d, r24	; 61
     896:	ed b7       	in	r30, 0x3d	; 61
     898:	fe b7       	in	r31, 0x3e	; 62
     89a:	31 96       	adiw	r30, 0x01	; 1
     89c:	ad b7       	in	r26, 0x3d	; 61
     89e:	be b7       	in	r27, 0x3e	; 62
     8a0:	12 96       	adiw	r26, 0x02	; 2
     8a2:	1c 93       	st	X, r17
     8a4:	0e 93       	st	-X, r16
     8a6:	11 97       	sbiw	r26, 0x01	; 1
     8a8:	f3 82       	std	Z+3, r15	; 0x03
     8aa:	e2 82       	std	Z+2, r14	; 0x02
     8ac:	d5 82       	std	Z+5, r13	; 0x05
     8ae:	c4 82       	std	Z+4, r12	; 0x04
     8b0:	86 82       	std	Z+6, r8	; 0x06
     8b2:	97 82       	std	Z+7, r9	; 0x07
     8b4:	a0 86       	std	Z+8, r10	; 0x08
     8b6:	b1 86       	std	Z+9, r11	; 0x09
     8b8:	0e 94 e5 06 	call	0xdca	; 0xdca <snprintf>
	writeLCD("Power:");
     8bc:	8d b7       	in	r24, 0x3d	; 61
     8be:	9e b7       	in	r25, 0x3e	; 62
     8c0:	0a 96       	adiw	r24, 0x0a	; 10
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	9e bf       	out	0x3e, r25	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	8d bf       	out	0x3d, r24	; 61
     8cc:	89 e0       	ldi	r24, 0x09	; 9
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 61 03 	call	0x6c2	; 0x6c2 <writeLCD>
	writeLCD(str);
     8d4:	c8 01       	movw	r24, r16
     8d6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <writeLCD>
}
     8da:	2a 96       	adiw	r28, 0x0a	; 10
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	bf 90       	pop	r11
     8f8:	af 90       	pop	r10
     8fa:	9f 90       	pop	r9
     8fc:	8f 90       	pop	r8
     8fe:	7f 90       	pop	r7
     900:	6f 90       	pop	r6
     902:	5f 90       	pop	r5
     904:	4f 90       	pop	r4
     906:	08 95       	ret

00000908 <initSerialPC>:
#include <string.h>
#include "pc.h"

void initSerialPC(void)			// POST: Initializes serial communtication for the Serial LCD
{
	UBRR0L = 0b00110011;			// Set UBRR1 to 51, for 9600 baud
     908:	83 e3       	ldi	r24, 0x33	; 51
     90a:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
     90e:	10 92 c5 00 	sts	0x00C5, r1
	
	DDRD |= 0b00000010;
     912:	51 9a       	sbi	0x0a, 1	; 10
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);		// Enable recieve and transmit lines
     914:	88 e1       	ldi	r24, 0x18	; 24
     916:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);	// Frame: 8-bit, no parity, 1 stop bit
     91a:	86 e0       	ldi	r24, 0x06	; 6
     91c:	80 93 c2 00 	sts	0x00C2, r24
}
     920:	08 95       	ret

00000922 <putCharPC>:

void putCharPC(unsigned char data)
{
	while (!(UCSR0A & (1<<UDRE0)));			// Wait for the transmit buffer to be empty
     922:	e0 ec       	ldi	r30, 0xC0	; 192
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	90 81       	ld	r25, Z
     928:	95 ff       	sbrs	r25, 5
     92a:	fd cf       	rjmp	.-6      	; 0x926 <putCharPC+0x4>
	
	UDR0 = data;							// Put data in buffer and send
     92c:	80 93 c6 00 	sts	0x00C6, r24
}
     930:	08 95       	ret

00000932 <getCharPC>:

unsigned char getCharPC(void)			// POST: Send character to the LCD
{
	while (!(UCSR0A & (1<<RXC0)));			// Wait for data to be received
     932:	e0 ec       	ldi	r30, 0xC0	; 192
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	88 23       	and	r24, r24
     93a:	ec f7       	brge	.-6      	; 0x936 <getCharPC+0x4>
	
	return UDR0;							// Get data from buffer
     93c:	80 91 c6 00 	lds	r24, 0x00C6
}
     940:	08 95       	ret

00000942 <putStrPC>:

void putStrPC(char str[])
{
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	0f 93       	push	r16
     948:	1f 93       	push	r17
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	f8 2e       	mov	r15, r24
     950:	e9 2e       	mov	r14, r25
	for(int i=0; i<strlen(str); i++)
     952:	08 2f       	mov	r16, r24
     954:	19 2f       	mov	r17, r25
     956:	c0 e0       	ldi	r28, 0x00	; 0
     958:	d0 e0       	ldi	r29, 0x00	; 0
     95a:	06 c0       	rjmp	.+12     	; 0x968 <putStrPC+0x26>
	{
		putCharPC(str[i]);
     95c:	f8 01       	movw	r30, r16
     95e:	81 91       	ld	r24, Z+
     960:	8f 01       	movw	r16, r30
     962:	0e 94 91 04 	call	0x922	; 0x922 <putCharPC>
	return UDR0;							// Get data from buffer
}

void putStrPC(char str[])
{
	for(int i=0; i<strlen(str); i++)
     966:	21 96       	adiw	r28, 0x01	; 1
     968:	ef 2d       	mov	r30, r15
     96a:	fe 2d       	mov	r31, r14
     96c:	df 01       	movw	r26, r30
     96e:	0d 90       	ld	r0, X+
     970:	00 20       	and	r0, r0
     972:	e9 f7       	brne	.-6      	; 0x96e <putStrPC+0x2c>
     974:	11 97       	sbiw	r26, 0x01	; 1
     976:	ae 1b       	sub	r26, r30
     978:	bf 0b       	sbc	r27, r31
     97a:	ca 17       	cp	r28, r26
     97c:	db 07       	cpc	r29, r27
     97e:	70 f3       	brcs	.-36     	; 0x95c <putStrPC+0x1a>
	{
		putCharPC(str[i]);
	}	
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret

0000098e <resetPeakDet>:
	resetPeakDet();				// Initial reset of peak detector			
}

void resetPeakDet(void)			// POST: Resets current sensor peak detector
{
	PORTC = 0b00000001;			// Drain stored voltage from peak detector
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	88 b9       	out	0x08, r24	; 8
     992:	8f e7       	ldi	r24, 0x7F	; 127
     994:	94 e8       	ldi	r25, 0x84	; 132
     996:	ae e1       	ldi	r26, 0x1E	; 30
     998:	81 50       	subi	r24, 0x01	; 1
     99a:	90 40       	sbci	r25, 0x00	; 0
     99c:	a0 40       	sbci	r26, 0x00	; 0
     99e:	e1 f7       	brne	.-8      	; 0x998 <resetPeakDet+0xa>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <resetPeakDet+0x14>
     9a2:	00 00       	nop
	_delay_ms(10000);			// Wait long enough to discharge capacitor
	PORTC = 0b00000000;			// Close NMOS to begin storing voltage
     9a4:	18 b8       	out	0x08, r1	; 8
     9a6:	8f e7       	ldi	r24, 0x7F	; 127
     9a8:	94 e8       	ldi	r25, 0x84	; 132
     9aa:	ae e1       	ldi	r26, 0x1E	; 30
     9ac:	81 50       	subi	r24, 0x01	; 1
     9ae:	90 40       	sbci	r25, 0x00	; 0
     9b0:	a0 40       	sbci	r26, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <resetPeakDet+0x1e>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <resetPeakDet+0x28>
     9b6:	00 00       	nop
	_delay_ms(10000);
     9b8:	08 95       	ret

000009ba <initPeakDet>:
#include "peakdet.h"
#define F_CPU 8000000UL

void initPeakDet(void)			// POST: Sets up the pin(s) for output
{
	DDRC |= 0b00000001;			// Set PORTC pin 0 to output
     9ba:	38 9a       	sbi	0x07, 0	; 7
	resetPeakDet();				// Initial reset of peak detector			
     9bc:	0e 94 c7 04 	call	0x98e	; 0x98e <resetPeakDet>
}
     9c0:	08 95       	ret

000009c2 <initPWM>:
#include "pwm.h"

void initPWM(void)
// POST: Initializes the PWM
{
	TCCR0A |= (1 << WGM01);
     9c2:	84 b5       	in	r24, 0x24	; 36
     9c4:	82 60       	ori	r24, 0x02	; 2
     9c6:	84 bd       	out	0x24, r24	; 36
	TCCR1B |= (1 << CS02)|(1 << CS00);
     9c8:	e1 e8       	ldi	r30, 0x81	; 129
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	85 60       	ori	r24, 0x05	; 5
     9d0:	80 83       	st	Z, r24

	OCR1A = 24999;
     9d2:	87 ea       	ldi	r24, 0xA7	; 167
     9d4:	91 e6       	ldi	r25, 0x61	; 97
     9d6:	90 93 89 00 	sts	0x0089, r25
     9da:	80 93 88 00 	sts	0x0088, r24
}
     9de:	08 95       	ret

000009e0 <interruptEnablePWM>:

void interruptEnablePWM(void)
// POST: External interrupt one is enabled on pin 0 of PORTA
{
	DDRB &= 0b00000001;
     9e0:	84 b1       	in	r24, 0x04	; 4
     9e2:	81 70       	andi	r24, 0x01	; 1
     9e4:	84 b9       	out	0x04, r24	; 4
	EICRA |= (1 << ISC20);
     9e6:	e9 e6       	ldi	r30, 0x69	; 105
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	80 61       	ori	r24, 0x10	; 16
     9ee:	80 83       	st	Z, r24
	EIMSK |= (1 << INT2);
     9f0:	ea 9a       	sbi	0x1d, 2	; 29
	
	sei();
     9f2:	78 94       	sei
     9f4:	08 95       	ret

000009f6 <__subsf3>:
     9f6:	50 58       	subi	r21, 0x80	; 128

000009f8 <__addsf3>:
     9f8:	bb 27       	eor	r27, r27
     9fa:	aa 27       	eor	r26, r26
     9fc:	0e d0       	rcall	.+28     	; 0xa1a <__addsf3x>
     9fe:	48 c1       	rjmp	.+656    	; 0xc90 <__fp_round>
     a00:	39 d1       	rcall	.+626    	; 0xc74 <__fp_pscA>
     a02:	30 f0       	brcs	.+12     	; 0xa10 <__addsf3+0x18>
     a04:	3e d1       	rcall	.+636    	; 0xc82 <__fp_pscB>
     a06:	20 f0       	brcs	.+8      	; 0xa10 <__addsf3+0x18>
     a08:	31 f4       	brne	.+12     	; 0xa16 <__addsf3+0x1e>
     a0a:	9f 3f       	cpi	r25, 0xFF	; 255
     a0c:	11 f4       	brne	.+4      	; 0xa12 <__addsf3+0x1a>
     a0e:	1e f4       	brtc	.+6      	; 0xa16 <__addsf3+0x1e>
     a10:	2e c1       	rjmp	.+604    	; 0xc6e <__fp_nan>
     a12:	0e f4       	brtc	.+2      	; 0xa16 <__addsf3+0x1e>
     a14:	e0 95       	com	r30
     a16:	e7 fb       	bst	r30, 7
     a18:	24 c1       	rjmp	.+584    	; 0xc62 <__fp_inf>

00000a1a <__addsf3x>:
     a1a:	e9 2f       	mov	r30, r25
     a1c:	4a d1       	rcall	.+660    	; 0xcb2 <__fp_split3>
     a1e:	80 f3       	brcs	.-32     	; 0xa00 <__addsf3+0x8>
     a20:	ba 17       	cp	r27, r26
     a22:	62 07       	cpc	r22, r18
     a24:	73 07       	cpc	r23, r19
     a26:	84 07       	cpc	r24, r20
     a28:	95 07       	cpc	r25, r21
     a2a:	18 f0       	brcs	.+6      	; 0xa32 <__addsf3x+0x18>
     a2c:	71 f4       	brne	.+28     	; 0xa4a <__addsf3x+0x30>
     a2e:	9e f5       	brtc	.+102    	; 0xa96 <__addsf3x+0x7c>
     a30:	62 c1       	rjmp	.+708    	; 0xcf6 <__fp_zero>
     a32:	0e f4       	brtc	.+2      	; 0xa36 <__addsf3x+0x1c>
     a34:	e0 95       	com	r30
     a36:	0b 2e       	mov	r0, r27
     a38:	ba 2f       	mov	r27, r26
     a3a:	a0 2d       	mov	r26, r0
     a3c:	0b 01       	movw	r0, r22
     a3e:	b9 01       	movw	r22, r18
     a40:	90 01       	movw	r18, r0
     a42:	0c 01       	movw	r0, r24
     a44:	ca 01       	movw	r24, r20
     a46:	a0 01       	movw	r20, r0
     a48:	11 24       	eor	r1, r1
     a4a:	ff 27       	eor	r31, r31
     a4c:	59 1b       	sub	r21, r25
     a4e:	99 f0       	breq	.+38     	; 0xa76 <__addsf3x+0x5c>
     a50:	59 3f       	cpi	r21, 0xF9	; 249
     a52:	50 f4       	brcc	.+20     	; 0xa68 <__addsf3x+0x4e>
     a54:	50 3e       	cpi	r21, 0xE0	; 224
     a56:	68 f1       	brcs	.+90     	; 0xab2 <__addsf3x+0x98>
     a58:	1a 16       	cp	r1, r26
     a5a:	f0 40       	sbci	r31, 0x00	; 0
     a5c:	a2 2f       	mov	r26, r18
     a5e:	23 2f       	mov	r18, r19
     a60:	34 2f       	mov	r19, r20
     a62:	44 27       	eor	r20, r20
     a64:	58 5f       	subi	r21, 0xF8	; 248
     a66:	f3 cf       	rjmp	.-26     	; 0xa4e <__addsf3x+0x34>
     a68:	46 95       	lsr	r20
     a6a:	37 95       	ror	r19
     a6c:	27 95       	ror	r18
     a6e:	a7 95       	ror	r26
     a70:	f0 40       	sbci	r31, 0x00	; 0
     a72:	53 95       	inc	r21
     a74:	c9 f7       	brne	.-14     	; 0xa68 <__addsf3x+0x4e>
     a76:	7e f4       	brtc	.+30     	; 0xa96 <__addsf3x+0x7c>
     a78:	1f 16       	cp	r1, r31
     a7a:	ba 0b       	sbc	r27, r26
     a7c:	62 0b       	sbc	r22, r18
     a7e:	73 0b       	sbc	r23, r19
     a80:	84 0b       	sbc	r24, r20
     a82:	ba f0       	brmi	.+46     	; 0xab2 <__addsf3x+0x98>
     a84:	91 50       	subi	r25, 0x01	; 1
     a86:	a1 f0       	breq	.+40     	; 0xab0 <__addsf3x+0x96>
     a88:	ff 0f       	add	r31, r31
     a8a:	bb 1f       	adc	r27, r27
     a8c:	66 1f       	adc	r22, r22
     a8e:	77 1f       	adc	r23, r23
     a90:	88 1f       	adc	r24, r24
     a92:	c2 f7       	brpl	.-16     	; 0xa84 <__addsf3x+0x6a>
     a94:	0e c0       	rjmp	.+28     	; 0xab2 <__addsf3x+0x98>
     a96:	ba 0f       	add	r27, r26
     a98:	62 1f       	adc	r22, r18
     a9a:	73 1f       	adc	r23, r19
     a9c:	84 1f       	adc	r24, r20
     a9e:	48 f4       	brcc	.+18     	; 0xab2 <__addsf3x+0x98>
     aa0:	87 95       	ror	r24
     aa2:	77 95       	ror	r23
     aa4:	67 95       	ror	r22
     aa6:	b7 95       	ror	r27
     aa8:	f7 95       	ror	r31
     aaa:	9e 3f       	cpi	r25, 0xFE	; 254
     aac:	08 f0       	brcs	.+2      	; 0xab0 <__addsf3x+0x96>
     aae:	b3 cf       	rjmp	.-154    	; 0xa16 <__addsf3+0x1e>
     ab0:	93 95       	inc	r25
     ab2:	88 0f       	add	r24, r24
     ab4:	08 f0       	brcs	.+2      	; 0xab8 <__addsf3x+0x9e>
     ab6:	99 27       	eor	r25, r25
     ab8:	ee 0f       	add	r30, r30
     aba:	97 95       	ror	r25
     abc:	87 95       	ror	r24
     abe:	08 95       	ret

00000ac0 <__divsf3>:
     ac0:	0c d0       	rcall	.+24     	; 0xada <__divsf3x>
     ac2:	e6 c0       	rjmp	.+460    	; 0xc90 <__fp_round>
     ac4:	de d0       	rcall	.+444    	; 0xc82 <__fp_pscB>
     ac6:	40 f0       	brcs	.+16     	; 0xad8 <__divsf3+0x18>
     ac8:	d5 d0       	rcall	.+426    	; 0xc74 <__fp_pscA>
     aca:	30 f0       	brcs	.+12     	; 0xad8 <__divsf3+0x18>
     acc:	21 f4       	brne	.+8      	; 0xad6 <__divsf3+0x16>
     ace:	5f 3f       	cpi	r21, 0xFF	; 255
     ad0:	19 f0       	breq	.+6      	; 0xad8 <__divsf3+0x18>
     ad2:	c7 c0       	rjmp	.+398    	; 0xc62 <__fp_inf>
     ad4:	51 11       	cpse	r21, r1
     ad6:	10 c1       	rjmp	.+544    	; 0xcf8 <__fp_szero>
     ad8:	ca c0       	rjmp	.+404    	; 0xc6e <__fp_nan>

00000ada <__divsf3x>:
     ada:	eb d0       	rcall	.+470    	; 0xcb2 <__fp_split3>
     adc:	98 f3       	brcs	.-26     	; 0xac4 <__divsf3+0x4>

00000ade <__divsf3_pse>:
     ade:	99 23       	and	r25, r25
     ae0:	c9 f3       	breq	.-14     	; 0xad4 <__divsf3+0x14>
     ae2:	55 23       	and	r21, r21
     ae4:	b1 f3       	breq	.-20     	; 0xad2 <__divsf3+0x12>
     ae6:	95 1b       	sub	r25, r21
     ae8:	55 0b       	sbc	r21, r21
     aea:	bb 27       	eor	r27, r27
     aec:	aa 27       	eor	r26, r26
     aee:	62 17       	cp	r22, r18
     af0:	73 07       	cpc	r23, r19
     af2:	84 07       	cpc	r24, r20
     af4:	38 f0       	brcs	.+14     	; 0xb04 <__divsf3_pse+0x26>
     af6:	9f 5f       	subi	r25, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	22 0f       	add	r18, r18
     afc:	33 1f       	adc	r19, r19
     afe:	44 1f       	adc	r20, r20
     b00:	aa 1f       	adc	r26, r26
     b02:	a9 f3       	breq	.-22     	; 0xaee <__divsf3_pse+0x10>
     b04:	33 d0       	rcall	.+102    	; 0xb6c <__divsf3_pse+0x8e>
     b06:	0e 2e       	mov	r0, r30
     b08:	3a f0       	brmi	.+14     	; 0xb18 <__divsf3_pse+0x3a>
     b0a:	e0 e8       	ldi	r30, 0x80	; 128
     b0c:	30 d0       	rcall	.+96     	; 0xb6e <__divsf3_pse+0x90>
     b0e:	91 50       	subi	r25, 0x01	; 1
     b10:	50 40       	sbci	r21, 0x00	; 0
     b12:	e6 95       	lsr	r30
     b14:	00 1c       	adc	r0, r0
     b16:	ca f7       	brpl	.-14     	; 0xb0a <__divsf3_pse+0x2c>
     b18:	29 d0       	rcall	.+82     	; 0xb6c <__divsf3_pse+0x8e>
     b1a:	fe 2f       	mov	r31, r30
     b1c:	27 d0       	rcall	.+78     	; 0xb6c <__divsf3_pse+0x8e>
     b1e:	66 0f       	add	r22, r22
     b20:	77 1f       	adc	r23, r23
     b22:	88 1f       	adc	r24, r24
     b24:	bb 1f       	adc	r27, r27
     b26:	26 17       	cp	r18, r22
     b28:	37 07       	cpc	r19, r23
     b2a:	48 07       	cpc	r20, r24
     b2c:	ab 07       	cpc	r26, r27
     b2e:	b0 e8       	ldi	r27, 0x80	; 128
     b30:	09 f0       	breq	.+2      	; 0xb34 <__divsf3_pse+0x56>
     b32:	bb 0b       	sbc	r27, r27
     b34:	80 2d       	mov	r24, r0
     b36:	bf 01       	movw	r22, r30
     b38:	ff 27       	eor	r31, r31
     b3a:	93 58       	subi	r25, 0x83	; 131
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	2a f0       	brmi	.+10     	; 0xb4a <__divsf3_pse+0x6c>
     b40:	9e 3f       	cpi	r25, 0xFE	; 254
     b42:	51 05       	cpc	r21, r1
     b44:	68 f0       	brcs	.+26     	; 0xb60 <__divsf3_pse+0x82>
     b46:	8d c0       	rjmp	.+282    	; 0xc62 <__fp_inf>
     b48:	d7 c0       	rjmp	.+430    	; 0xcf8 <__fp_szero>
     b4a:	5f 3f       	cpi	r21, 0xFF	; 255
     b4c:	ec f3       	brlt	.-6      	; 0xb48 <__divsf3_pse+0x6a>
     b4e:	98 3e       	cpi	r25, 0xE8	; 232
     b50:	dc f3       	brlt	.-10     	; 0xb48 <__divsf3_pse+0x6a>
     b52:	86 95       	lsr	r24
     b54:	77 95       	ror	r23
     b56:	67 95       	ror	r22
     b58:	b7 95       	ror	r27
     b5a:	f7 95       	ror	r31
     b5c:	9f 5f       	subi	r25, 0xFF	; 255
     b5e:	c9 f7       	brne	.-14     	; 0xb52 <__divsf3_pse+0x74>
     b60:	88 0f       	add	r24, r24
     b62:	91 1d       	adc	r25, r1
     b64:	96 95       	lsr	r25
     b66:	87 95       	ror	r24
     b68:	97 f9       	bld	r25, 7
     b6a:	08 95       	ret
     b6c:	e1 e0       	ldi	r30, 0x01	; 1
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	88 1f       	adc	r24, r24
     b74:	bb 1f       	adc	r27, r27
     b76:	62 17       	cp	r22, r18
     b78:	73 07       	cpc	r23, r19
     b7a:	84 07       	cpc	r24, r20
     b7c:	ba 07       	cpc	r27, r26
     b7e:	20 f0       	brcs	.+8      	; 0xb88 <__divsf3_pse+0xaa>
     b80:	62 1b       	sub	r22, r18
     b82:	73 0b       	sbc	r23, r19
     b84:	84 0b       	sbc	r24, r20
     b86:	ba 0b       	sbc	r27, r26
     b88:	ee 1f       	adc	r30, r30
     b8a:	88 f7       	brcc	.-30     	; 0xb6e <__divsf3_pse+0x90>
     b8c:	e0 95       	com	r30
     b8e:	08 95       	ret

00000b90 <__fixunssfsi>:
     b90:	98 d0       	rcall	.+304    	; 0xcc2 <__fp_splitA>
     b92:	88 f0       	brcs	.+34     	; 0xbb6 <__fixunssfsi+0x26>
     b94:	9f 57       	subi	r25, 0x7F	; 127
     b96:	90 f0       	brcs	.+36     	; 0xbbc <__fixunssfsi+0x2c>
     b98:	b9 2f       	mov	r27, r25
     b9a:	99 27       	eor	r25, r25
     b9c:	b7 51       	subi	r27, 0x17	; 23
     b9e:	a0 f0       	brcs	.+40     	; 0xbc8 <__fixunssfsi+0x38>
     ba0:	d1 f0       	breq	.+52     	; 0xbd6 <__fixunssfsi+0x46>
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	1a f0       	brmi	.+6      	; 0xbb2 <__fixunssfsi+0x22>
     bac:	ba 95       	dec	r27
     bae:	c9 f7       	brne	.-14     	; 0xba2 <__fixunssfsi+0x12>
     bb0:	12 c0       	rjmp	.+36     	; 0xbd6 <__fixunssfsi+0x46>
     bb2:	b1 30       	cpi	r27, 0x01	; 1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <__fixunssfsi+0x46>
     bb6:	9f d0       	rcall	.+318    	; 0xcf6 <__fp_zero>
     bb8:	b1 e0       	ldi	r27, 0x01	; 1
     bba:	08 95       	ret
     bbc:	9c c0       	rjmp	.+312    	; 0xcf6 <__fp_zero>
     bbe:	67 2f       	mov	r22, r23
     bc0:	78 2f       	mov	r23, r24
     bc2:	88 27       	eor	r24, r24
     bc4:	b8 5f       	subi	r27, 0xF8	; 248
     bc6:	39 f0       	breq	.+14     	; 0xbd6 <__fixunssfsi+0x46>
     bc8:	b9 3f       	cpi	r27, 0xF9	; 249
     bca:	cc f3       	brlt	.-14     	; 0xbbe <__fixunssfsi+0x2e>
     bcc:	86 95       	lsr	r24
     bce:	77 95       	ror	r23
     bd0:	67 95       	ror	r22
     bd2:	b3 95       	inc	r27
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <__fixunssfsi+0x3c>
     bd6:	3e f4       	brtc	.+14     	; 0xbe6 <__fixunssfsi+0x56>
     bd8:	90 95       	com	r25
     bda:	80 95       	com	r24
     bdc:	70 95       	com	r23
     bde:	61 95       	neg	r22
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	8f 4f       	sbci	r24, 0xFF	; 255
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	08 95       	ret

00000be8 <__floatunsisf>:
     be8:	e8 94       	clt
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <__floatsisf+0x12>

00000bec <__floatsisf>:
     bec:	97 fb       	bst	r25, 7
     bee:	3e f4       	brtc	.+14     	; 0xbfe <__floatsisf+0x12>
     bf0:	90 95       	com	r25
     bf2:	80 95       	com	r24
     bf4:	70 95       	com	r23
     bf6:	61 95       	neg	r22
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	8f 4f       	sbci	r24, 0xFF	; 255
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	99 23       	and	r25, r25
     c00:	a9 f0       	breq	.+42     	; 0xc2c <__floatsisf+0x40>
     c02:	f9 2f       	mov	r31, r25
     c04:	96 e9       	ldi	r25, 0x96	; 150
     c06:	bb 27       	eor	r27, r27
     c08:	93 95       	inc	r25
     c0a:	f6 95       	lsr	r31
     c0c:	87 95       	ror	r24
     c0e:	77 95       	ror	r23
     c10:	67 95       	ror	r22
     c12:	b7 95       	ror	r27
     c14:	f1 11       	cpse	r31, r1
     c16:	f8 cf       	rjmp	.-16     	; 0xc08 <__floatsisf+0x1c>
     c18:	fa f4       	brpl	.+62     	; 0xc58 <__floatsisf+0x6c>
     c1a:	bb 0f       	add	r27, r27
     c1c:	11 f4       	brne	.+4      	; 0xc22 <__floatsisf+0x36>
     c1e:	60 ff       	sbrs	r22, 0
     c20:	1b c0       	rjmp	.+54     	; 0xc58 <__floatsisf+0x6c>
     c22:	6f 5f       	subi	r22, 0xFF	; 255
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	8f 4f       	sbci	r24, 0xFF	; 255
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	16 c0       	rjmp	.+44     	; 0xc58 <__floatsisf+0x6c>
     c2c:	88 23       	and	r24, r24
     c2e:	11 f0       	breq	.+4      	; 0xc34 <__floatsisf+0x48>
     c30:	96 e9       	ldi	r25, 0x96	; 150
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <__floatsisf+0x6a>
     c34:	77 23       	and	r23, r23
     c36:	21 f0       	breq	.+8      	; 0xc40 <__floatsisf+0x54>
     c38:	9e e8       	ldi	r25, 0x8E	; 142
     c3a:	87 2f       	mov	r24, r23
     c3c:	76 2f       	mov	r23, r22
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__floatsisf+0x5e>
     c40:	66 23       	and	r22, r22
     c42:	71 f0       	breq	.+28     	; 0xc60 <__floatsisf+0x74>
     c44:	96 e8       	ldi	r25, 0x86	; 134
     c46:	86 2f       	mov	r24, r22
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	2a f0       	brmi	.+10     	; 0xc58 <__floatsisf+0x6c>
     c4e:	9a 95       	dec	r25
     c50:	66 0f       	add	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	88 1f       	adc	r24, r24
     c56:	da f7       	brpl	.-10     	; 0xc4e <__floatsisf+0x62>
     c58:	88 0f       	add	r24, r24
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	97 f9       	bld	r25, 7
     c60:	08 95       	ret

00000c62 <__fp_inf>:
     c62:	97 f9       	bld	r25, 7
     c64:	9f 67       	ori	r25, 0x7F	; 127
     c66:	80 e8       	ldi	r24, 0x80	; 128
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <__fp_nan>:
     c6e:	9f ef       	ldi	r25, 0xFF	; 255
     c70:	80 ec       	ldi	r24, 0xC0	; 192
     c72:	08 95       	ret

00000c74 <__fp_pscA>:
     c74:	00 24       	eor	r0, r0
     c76:	0a 94       	dec	r0
     c78:	16 16       	cp	r1, r22
     c7a:	17 06       	cpc	r1, r23
     c7c:	18 06       	cpc	r1, r24
     c7e:	09 06       	cpc	r0, r25
     c80:	08 95       	ret

00000c82 <__fp_pscB>:
     c82:	00 24       	eor	r0, r0
     c84:	0a 94       	dec	r0
     c86:	12 16       	cp	r1, r18
     c88:	13 06       	cpc	r1, r19
     c8a:	14 06       	cpc	r1, r20
     c8c:	05 06       	cpc	r0, r21
     c8e:	08 95       	ret

00000c90 <__fp_round>:
     c90:	09 2e       	mov	r0, r25
     c92:	03 94       	inc	r0
     c94:	00 0c       	add	r0, r0
     c96:	11 f4       	brne	.+4      	; 0xc9c <__fp_round+0xc>
     c98:	88 23       	and	r24, r24
     c9a:	52 f0       	brmi	.+20     	; 0xcb0 <__fp_round+0x20>
     c9c:	bb 0f       	add	r27, r27
     c9e:	40 f4       	brcc	.+16     	; 0xcb0 <__fp_round+0x20>
     ca0:	bf 2b       	or	r27, r31
     ca2:	11 f4       	brne	.+4      	; 0xca8 <__fp_round+0x18>
     ca4:	60 ff       	sbrs	r22, 0
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <__fp_round+0x20>
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	08 95       	ret

00000cb2 <__fp_split3>:
     cb2:	57 fd       	sbrc	r21, 7
     cb4:	90 58       	subi	r25, 0x80	; 128
     cb6:	44 0f       	add	r20, r20
     cb8:	55 1f       	adc	r21, r21
     cba:	59 f0       	breq	.+22     	; 0xcd2 <__fp_splitA+0x10>
     cbc:	5f 3f       	cpi	r21, 0xFF	; 255
     cbe:	71 f0       	breq	.+28     	; 0xcdc <__fp_splitA+0x1a>
     cc0:	47 95       	ror	r20

00000cc2 <__fp_splitA>:
     cc2:	88 0f       	add	r24, r24
     cc4:	97 fb       	bst	r25, 7
     cc6:	99 1f       	adc	r25, r25
     cc8:	61 f0       	breq	.+24     	; 0xce2 <__fp_splitA+0x20>
     cca:	9f 3f       	cpi	r25, 0xFF	; 255
     ccc:	79 f0       	breq	.+30     	; 0xcec <__fp_splitA+0x2a>
     cce:	87 95       	ror	r24
     cd0:	08 95       	ret
     cd2:	12 16       	cp	r1, r18
     cd4:	13 06       	cpc	r1, r19
     cd6:	14 06       	cpc	r1, r20
     cd8:	55 1f       	adc	r21, r21
     cda:	f2 cf       	rjmp	.-28     	; 0xcc0 <__fp_split3+0xe>
     cdc:	46 95       	lsr	r20
     cde:	f1 df       	rcall	.-30     	; 0xcc2 <__fp_splitA>
     ce0:	08 c0       	rjmp	.+16     	; 0xcf2 <__fp_splitA+0x30>
     ce2:	16 16       	cp	r1, r22
     ce4:	17 06       	cpc	r1, r23
     ce6:	18 06       	cpc	r1, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	f1 cf       	rjmp	.-30     	; 0xcce <__fp_splitA+0xc>
     cec:	86 95       	lsr	r24
     cee:	71 05       	cpc	r23, r1
     cf0:	61 05       	cpc	r22, r1
     cf2:	08 94       	sec
     cf4:	08 95       	ret

00000cf6 <__fp_zero>:
     cf6:	e8 94       	clt

00000cf8 <__fp_szero>:
     cf8:	bb 27       	eor	r27, r27
     cfa:	66 27       	eor	r22, r22
     cfc:	77 27       	eor	r23, r23
     cfe:	cb 01       	movw	r24, r22
     d00:	97 f9       	bld	r25, 7
     d02:	08 95       	ret

00000d04 <__mulsf3>:
     d04:	0b d0       	rcall	.+22     	; 0xd1c <__mulsf3x>
     d06:	c4 cf       	rjmp	.-120    	; 0xc90 <__fp_round>
     d08:	b5 df       	rcall	.-150    	; 0xc74 <__fp_pscA>
     d0a:	28 f0       	brcs	.+10     	; 0xd16 <__mulsf3+0x12>
     d0c:	ba df       	rcall	.-140    	; 0xc82 <__fp_pscB>
     d0e:	18 f0       	brcs	.+6      	; 0xd16 <__mulsf3+0x12>
     d10:	95 23       	and	r25, r21
     d12:	09 f0       	breq	.+2      	; 0xd16 <__mulsf3+0x12>
     d14:	a6 cf       	rjmp	.-180    	; 0xc62 <__fp_inf>
     d16:	ab cf       	rjmp	.-170    	; 0xc6e <__fp_nan>
     d18:	11 24       	eor	r1, r1
     d1a:	ee cf       	rjmp	.-36     	; 0xcf8 <__fp_szero>

00000d1c <__mulsf3x>:
     d1c:	ca df       	rcall	.-108    	; 0xcb2 <__fp_split3>
     d1e:	a0 f3       	brcs	.-24     	; 0xd08 <__mulsf3+0x4>

00000d20 <__mulsf3_pse>:
     d20:	95 9f       	mul	r25, r21
     d22:	d1 f3       	breq	.-12     	; 0xd18 <__mulsf3+0x14>
     d24:	95 0f       	add	r25, r21
     d26:	50 e0       	ldi	r21, 0x00	; 0
     d28:	55 1f       	adc	r21, r21
     d2a:	62 9f       	mul	r22, r18
     d2c:	f0 01       	movw	r30, r0
     d2e:	72 9f       	mul	r23, r18
     d30:	bb 27       	eor	r27, r27
     d32:	f0 0d       	add	r31, r0
     d34:	b1 1d       	adc	r27, r1
     d36:	63 9f       	mul	r22, r19
     d38:	aa 27       	eor	r26, r26
     d3a:	f0 0d       	add	r31, r0
     d3c:	b1 1d       	adc	r27, r1
     d3e:	aa 1f       	adc	r26, r26
     d40:	64 9f       	mul	r22, r20
     d42:	66 27       	eor	r22, r22
     d44:	b0 0d       	add	r27, r0
     d46:	a1 1d       	adc	r26, r1
     d48:	66 1f       	adc	r22, r22
     d4a:	82 9f       	mul	r24, r18
     d4c:	22 27       	eor	r18, r18
     d4e:	b0 0d       	add	r27, r0
     d50:	a1 1d       	adc	r26, r1
     d52:	62 1f       	adc	r22, r18
     d54:	73 9f       	mul	r23, r19
     d56:	b0 0d       	add	r27, r0
     d58:	a1 1d       	adc	r26, r1
     d5a:	62 1f       	adc	r22, r18
     d5c:	83 9f       	mul	r24, r19
     d5e:	a0 0d       	add	r26, r0
     d60:	61 1d       	adc	r22, r1
     d62:	22 1f       	adc	r18, r18
     d64:	74 9f       	mul	r23, r20
     d66:	33 27       	eor	r19, r19
     d68:	a0 0d       	add	r26, r0
     d6a:	61 1d       	adc	r22, r1
     d6c:	23 1f       	adc	r18, r19
     d6e:	84 9f       	mul	r24, r20
     d70:	60 0d       	add	r22, r0
     d72:	21 1d       	adc	r18, r1
     d74:	82 2f       	mov	r24, r18
     d76:	76 2f       	mov	r23, r22
     d78:	6a 2f       	mov	r22, r26
     d7a:	11 24       	eor	r1, r1
     d7c:	9f 57       	subi	r25, 0x7F	; 127
     d7e:	50 40       	sbci	r21, 0x00	; 0
     d80:	8a f0       	brmi	.+34     	; 0xda4 <__mulsf3_pse+0x84>
     d82:	e1 f0       	breq	.+56     	; 0xdbc <__mulsf3_pse+0x9c>
     d84:	88 23       	and	r24, r24
     d86:	4a f0       	brmi	.+18     	; 0xd9a <__mulsf3_pse+0x7a>
     d88:	ee 0f       	add	r30, r30
     d8a:	ff 1f       	adc	r31, r31
     d8c:	bb 1f       	adc	r27, r27
     d8e:	66 1f       	adc	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	50 40       	sbci	r21, 0x00	; 0
     d98:	a9 f7       	brne	.-22     	; 0xd84 <__mulsf3_pse+0x64>
     d9a:	9e 3f       	cpi	r25, 0xFE	; 254
     d9c:	51 05       	cpc	r21, r1
     d9e:	70 f0       	brcs	.+28     	; 0xdbc <__mulsf3_pse+0x9c>
     da0:	60 cf       	rjmp	.-320    	; 0xc62 <__fp_inf>
     da2:	aa cf       	rjmp	.-172    	; 0xcf8 <__fp_szero>
     da4:	5f 3f       	cpi	r21, 0xFF	; 255
     da6:	ec f3       	brlt	.-6      	; 0xda2 <__mulsf3_pse+0x82>
     da8:	98 3e       	cpi	r25, 0xE8	; 232
     daa:	dc f3       	brlt	.-10     	; 0xda2 <__mulsf3_pse+0x82>
     dac:	86 95       	lsr	r24
     dae:	77 95       	ror	r23
     db0:	67 95       	ror	r22
     db2:	b7 95       	ror	r27
     db4:	f7 95       	ror	r31
     db6:	e7 95       	ror	r30
     db8:	9f 5f       	subi	r25, 0xFF	; 255
     dba:	c1 f7       	brne	.-16     	; 0xdac <__mulsf3_pse+0x8c>
     dbc:	fe 2b       	or	r31, r30
     dbe:	88 0f       	add	r24, r24
     dc0:	91 1d       	adc	r25, r1
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	97 f9       	bld	r25, 7
     dc8:	08 95       	ret

00000dca <snprintf>:
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	2e 97       	sbiw	r28, 0x0e	; 14
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	0d 89       	ldd	r16, Y+21	; 0x15
     de4:	1e 89       	ldd	r17, Y+22	; 0x16
     de6:	8f 89       	ldd	r24, Y+23	; 0x17
     de8:	98 8d       	ldd	r25, Y+24	; 0x18
     dea:	26 e0       	ldi	r18, 0x06	; 6
     dec:	2c 83       	std	Y+4, r18	; 0x04
     dee:	1a 83       	std	Y+2, r17	; 0x02
     df0:	09 83       	std	Y+1, r16	; 0x01
     df2:	97 ff       	sbrs	r25, 7
     df4:	02 c0       	rjmp	.+4      	; 0xdfa <snprintf+0x30>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e8       	ldi	r25, 0x80	; 128
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	ae 01       	movw	r20, r28
     e02:	45 5e       	subi	r20, 0xE5	; 229
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	69 8d       	ldd	r22, Y+25	; 0x19
     e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0e:	0e 94 22 07 	call	0xe44	; 0xe44 <vfprintf>
     e12:	4d 81       	ldd	r20, Y+5	; 0x05
     e14:	5e 81       	ldd	r21, Y+6	; 0x06
     e16:	57 fd       	sbrc	r21, 7
     e18:	0a c0       	rjmp	.+20     	; 0xe2e <snprintf+0x64>
     e1a:	2f 81       	ldd	r18, Y+7	; 0x07
     e1c:	38 85       	ldd	r19, Y+8	; 0x08
     e1e:	42 17       	cp	r20, r18
     e20:	53 07       	cpc	r21, r19
     e22:	0c f4       	brge	.+2      	; 0xe26 <snprintf+0x5c>
     e24:	9a 01       	movw	r18, r20
     e26:	02 0f       	add	r16, r18
     e28:	13 1f       	adc	r17, r19
     e2a:	f8 01       	movw	r30, r16
     e2c:	10 82       	st	Z, r1
     e2e:	2e 96       	adiw	r28, 0x0e	; 14
     e30:	0f b6       	in	r0, 0x3f	; 63
     e32:	f8 94       	cli
     e34:	de bf       	out	0x3e, r29	; 62
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	cd bf       	out	0x3d, r28	; 61
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	1f 91       	pop	r17
     e40:	0f 91       	pop	r16
     e42:	08 95       	ret

00000e44 <vfprintf>:
     e44:	2f 92       	push	r2
     e46:	3f 92       	push	r3
     e48:	4f 92       	push	r4
     e4a:	5f 92       	push	r5
     e4c:	6f 92       	push	r6
     e4e:	7f 92       	push	r7
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	2d 97       	sbiw	r28, 0x0d	; 13
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	3c 01       	movw	r6, r24
     e7a:	7d 87       	std	Y+13, r23	; 0x0d
     e7c:	6c 87       	std	Y+12, r22	; 0x0c
     e7e:	5a 01       	movw	r10, r20
     e80:	fc 01       	movw	r30, r24
     e82:	17 82       	std	Z+7, r1	; 0x07
     e84:	16 82       	std	Z+6, r1	; 0x06
     e86:	83 81       	ldd	r24, Z+3	; 0x03
     e88:	81 ff       	sbrs	r24, 1
     e8a:	c8 c1       	rjmp	.+912    	; 0x121c <vfprintf+0x3d8>
     e8c:	2e 01       	movw	r4, r28
     e8e:	08 94       	sec
     e90:	41 1c       	adc	r4, r1
     e92:	51 1c       	adc	r5, r1
     e94:	f3 01       	movw	r30, r6
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	ec 85       	ldd	r30, Y+12	; 0x0c
     e9a:	fd 85       	ldd	r31, Y+13	; 0x0d
     e9c:	93 fd       	sbrc	r25, 3
     e9e:	85 91       	lpm	r24, Z+
     ea0:	93 ff       	sbrs	r25, 3
     ea2:	81 91       	ld	r24, Z+
     ea4:	fd 87       	std	Y+13, r31	; 0x0d
     ea6:	ec 87       	std	Y+12, r30	; 0x0c
     ea8:	88 23       	and	r24, r24
     eaa:	09 f4       	brne	.+2      	; 0xeae <vfprintf+0x6a>
     eac:	b3 c1       	rjmp	.+870    	; 0x1214 <vfprintf+0x3d0>
     eae:	85 32       	cpi	r24, 0x25	; 37
     eb0:	41 f4       	brne	.+16     	; 0xec2 <vfprintf+0x7e>
     eb2:	93 fd       	sbrc	r25, 3
     eb4:	85 91       	lpm	r24, Z+
     eb6:	93 ff       	sbrs	r25, 3
     eb8:	81 91       	ld	r24, Z+
     eba:	fd 87       	std	Y+13, r31	; 0x0d
     ebc:	ec 87       	std	Y+12, r30	; 0x0c
     ebe:	85 32       	cpi	r24, 0x25	; 37
     ec0:	29 f4       	brne	.+10     	; 0xecc <vfprintf+0x88>
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	b3 01       	movw	r22, r6
     ec6:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
     eca:	e4 cf       	rjmp	.-56     	; 0xe94 <vfprintf+0x50>
     ecc:	ff 24       	eor	r15, r15
     ece:	ee 24       	eor	r14, r14
     ed0:	10 e0       	ldi	r17, 0x00	; 0
     ed2:	10 32       	cpi	r17, 0x20	; 32
     ed4:	b0 f4       	brcc	.+44     	; 0xf02 <vfprintf+0xbe>
     ed6:	8b 32       	cpi	r24, 0x2B	; 43
     ed8:	69 f0       	breq	.+26     	; 0xef4 <vfprintf+0xb0>
     eda:	8c 32       	cpi	r24, 0x2C	; 44
     edc:	28 f4       	brcc	.+10     	; 0xee8 <vfprintf+0xa4>
     ede:	80 32       	cpi	r24, 0x20	; 32
     ee0:	51 f0       	breq	.+20     	; 0xef6 <vfprintf+0xb2>
     ee2:	83 32       	cpi	r24, 0x23	; 35
     ee4:	71 f4       	brne	.+28     	; 0xf02 <vfprintf+0xbe>
     ee6:	0b c0       	rjmp	.+22     	; 0xefe <vfprintf+0xba>
     ee8:	8d 32       	cpi	r24, 0x2D	; 45
     eea:	39 f0       	breq	.+14     	; 0xefa <vfprintf+0xb6>
     eec:	80 33       	cpi	r24, 0x30	; 48
     eee:	49 f4       	brne	.+18     	; 0xf02 <vfprintf+0xbe>
     ef0:	11 60       	ori	r17, 0x01	; 1
     ef2:	2c c0       	rjmp	.+88     	; 0xf4c <vfprintf+0x108>
     ef4:	12 60       	ori	r17, 0x02	; 2
     ef6:	14 60       	ori	r17, 0x04	; 4
     ef8:	29 c0       	rjmp	.+82     	; 0xf4c <vfprintf+0x108>
     efa:	18 60       	ori	r17, 0x08	; 8
     efc:	27 c0       	rjmp	.+78     	; 0xf4c <vfprintf+0x108>
     efe:	10 61       	ori	r17, 0x10	; 16
     f00:	25 c0       	rjmp	.+74     	; 0xf4c <vfprintf+0x108>
     f02:	17 fd       	sbrc	r17, 7
     f04:	2e c0       	rjmp	.+92     	; 0xf62 <vfprintf+0x11e>
     f06:	28 2f       	mov	r18, r24
     f08:	20 53       	subi	r18, 0x30	; 48
     f0a:	2a 30       	cpi	r18, 0x0A	; 10
     f0c:	98 f4       	brcc	.+38     	; 0xf34 <vfprintf+0xf0>
     f0e:	16 ff       	sbrs	r17, 6
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <vfprintf+0xde>
     f12:	8f 2d       	mov	r24, r15
     f14:	88 0f       	add	r24, r24
     f16:	f8 2e       	mov	r15, r24
     f18:	ff 0c       	add	r15, r15
     f1a:	ff 0c       	add	r15, r15
     f1c:	f8 0e       	add	r15, r24
     f1e:	f2 0e       	add	r15, r18
     f20:	15 c0       	rjmp	.+42     	; 0xf4c <vfprintf+0x108>
     f22:	8e 2d       	mov	r24, r14
     f24:	88 0f       	add	r24, r24
     f26:	e8 2e       	mov	r14, r24
     f28:	ee 0c       	add	r14, r14
     f2a:	ee 0c       	add	r14, r14
     f2c:	e8 0e       	add	r14, r24
     f2e:	e2 0e       	add	r14, r18
     f30:	10 62       	ori	r17, 0x20	; 32
     f32:	0c c0       	rjmp	.+24     	; 0xf4c <vfprintf+0x108>
     f34:	8e 32       	cpi	r24, 0x2E	; 46
     f36:	21 f4       	brne	.+8      	; 0xf40 <vfprintf+0xfc>
     f38:	16 fd       	sbrc	r17, 6
     f3a:	6c c1       	rjmp	.+728    	; 0x1214 <vfprintf+0x3d0>
     f3c:	10 64       	ori	r17, 0x40	; 64
     f3e:	06 c0       	rjmp	.+12     	; 0xf4c <vfprintf+0x108>
     f40:	8c 36       	cpi	r24, 0x6C	; 108
     f42:	11 f4       	brne	.+4      	; 0xf48 <vfprintf+0x104>
     f44:	10 68       	ori	r17, 0x80	; 128
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <vfprintf+0x108>
     f48:	88 36       	cpi	r24, 0x68	; 104
     f4a:	59 f4       	brne	.+22     	; 0xf62 <vfprintf+0x11e>
     f4c:	ec 85       	ldd	r30, Y+12	; 0x0c
     f4e:	fd 85       	ldd	r31, Y+13	; 0x0d
     f50:	93 fd       	sbrc	r25, 3
     f52:	85 91       	lpm	r24, Z+
     f54:	93 ff       	sbrs	r25, 3
     f56:	81 91       	ld	r24, Z+
     f58:	fd 87       	std	Y+13, r31	; 0x0d
     f5a:	ec 87       	std	Y+12, r30	; 0x0c
     f5c:	88 23       	and	r24, r24
     f5e:	09 f0       	breq	.+2      	; 0xf62 <vfprintf+0x11e>
     f60:	b8 cf       	rjmp	.-144    	; 0xed2 <vfprintf+0x8e>
     f62:	98 2f       	mov	r25, r24
     f64:	95 54       	subi	r25, 0x45	; 69
     f66:	93 30       	cpi	r25, 0x03	; 3
     f68:	18 f0       	brcs	.+6      	; 0xf70 <vfprintf+0x12c>
     f6a:	90 52       	subi	r25, 0x20	; 32
     f6c:	93 30       	cpi	r25, 0x03	; 3
     f6e:	38 f4       	brcc	.+14     	; 0xf7e <vfprintf+0x13a>
     f70:	24 e0       	ldi	r18, 0x04	; 4
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	a2 0e       	add	r10, r18
     f76:	b3 1e       	adc	r11, r19
     f78:	3f e3       	ldi	r19, 0x3F	; 63
     f7a:	39 83       	std	Y+1, r19	; 0x01
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <vfprintf+0x158>
     f7e:	83 36       	cpi	r24, 0x63	; 99
     f80:	31 f0       	breq	.+12     	; 0xf8e <vfprintf+0x14a>
     f82:	83 37       	cpi	r24, 0x73	; 115
     f84:	81 f0       	breq	.+32     	; 0xfa6 <vfprintf+0x162>
     f86:	83 35       	cpi	r24, 0x53	; 83
     f88:	09 f0       	breq	.+2      	; 0xf8c <vfprintf+0x148>
     f8a:	5a c0       	rjmp	.+180    	; 0x1040 <vfprintf+0x1fc>
     f8c:	22 c0       	rjmp	.+68     	; 0xfd2 <vfprintf+0x18e>
     f8e:	f5 01       	movw	r30, r10
     f90:	80 81       	ld	r24, Z
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	22 e0       	ldi	r18, 0x02	; 2
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	a2 0e       	add	r10, r18
     f9a:	b3 1e       	adc	r11, r19
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	c2 2e       	mov	r12, r18
     fa0:	d1 2c       	mov	r13, r1
     fa2:	42 01       	movw	r8, r4
     fa4:	14 c0       	rjmp	.+40     	; 0xfce <vfprintf+0x18a>
     fa6:	92 e0       	ldi	r25, 0x02	; 2
     fa8:	29 2e       	mov	r2, r25
     faa:	31 2c       	mov	r3, r1
     fac:	2a 0c       	add	r2, r10
     fae:	3b 1c       	adc	r3, r11
     fb0:	f5 01       	movw	r30, r10
     fb2:	80 80       	ld	r8, Z
     fb4:	91 80       	ldd	r9, Z+1	; 0x01
     fb6:	16 ff       	sbrs	r17, 6
     fb8:	03 c0       	rjmp	.+6      	; 0xfc0 <vfprintf+0x17c>
     fba:	6f 2d       	mov	r22, r15
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <vfprintf+0x180>
     fc0:	6f ef       	ldi	r22, 0xFF	; 255
     fc2:	7f ef       	ldi	r23, 0xFF	; 255
     fc4:	c4 01       	movw	r24, r8
     fc6:	0e 94 34 09 	call	0x1268	; 0x1268 <strnlen>
     fca:	6c 01       	movw	r12, r24
     fcc:	51 01       	movw	r10, r2
     fce:	1f 77       	andi	r17, 0x7F	; 127
     fd0:	15 c0       	rjmp	.+42     	; 0xffc <vfprintf+0x1b8>
     fd2:	82 e0       	ldi	r24, 0x02	; 2
     fd4:	28 2e       	mov	r2, r24
     fd6:	31 2c       	mov	r3, r1
     fd8:	2a 0c       	add	r2, r10
     fda:	3b 1c       	adc	r3, r11
     fdc:	f5 01       	movw	r30, r10
     fde:	80 80       	ld	r8, Z
     fe0:	91 80       	ldd	r9, Z+1	; 0x01
     fe2:	16 ff       	sbrs	r17, 6
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <vfprintf+0x1a8>
     fe6:	6f 2d       	mov	r22, r15
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x1ac>
     fec:	6f ef       	ldi	r22, 0xFF	; 255
     fee:	7f ef       	ldi	r23, 0xFF	; 255
     ff0:	c4 01       	movw	r24, r8
     ff2:	0e 94 29 09 	call	0x1252	; 0x1252 <strnlen_P>
     ff6:	6c 01       	movw	r12, r24
     ff8:	10 68       	ori	r17, 0x80	; 128
     ffa:	51 01       	movw	r10, r2
     ffc:	13 fd       	sbrc	r17, 3
     ffe:	1c c0       	rjmp	.+56     	; 0x1038 <vfprintf+0x1f4>
    1000:	06 c0       	rjmp	.+12     	; 0x100e <vfprintf+0x1ca>
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	b3 01       	movw	r22, r6
    1008:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    100c:	ea 94       	dec	r14
    100e:	8e 2d       	mov	r24, r14
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	c8 16       	cp	r12, r24
    1014:	d9 06       	cpc	r13, r25
    1016:	a8 f3       	brcs	.-22     	; 0x1002 <vfprintf+0x1be>
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <vfprintf+0x1f4>
    101a:	f4 01       	movw	r30, r8
    101c:	17 fd       	sbrc	r17, 7
    101e:	85 91       	lpm	r24, Z+
    1020:	17 ff       	sbrs	r17, 7
    1022:	81 91       	ld	r24, Z+
    1024:	4f 01       	movw	r8, r30
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	b3 01       	movw	r22, r6
    102a:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    102e:	e1 10       	cpse	r14, r1
    1030:	ea 94       	dec	r14
    1032:	08 94       	sec
    1034:	c1 08       	sbc	r12, r1
    1036:	d1 08       	sbc	r13, r1
    1038:	c1 14       	cp	r12, r1
    103a:	d1 04       	cpc	r13, r1
    103c:	71 f7       	brne	.-36     	; 0x101a <vfprintf+0x1d6>
    103e:	e7 c0       	rjmp	.+462    	; 0x120e <vfprintf+0x3ca>
    1040:	84 36       	cpi	r24, 0x64	; 100
    1042:	11 f0       	breq	.+4      	; 0x1048 <vfprintf+0x204>
    1044:	89 36       	cpi	r24, 0x69	; 105
    1046:	51 f5       	brne	.+84     	; 0x109c <vfprintf+0x258>
    1048:	f5 01       	movw	r30, r10
    104a:	17 ff       	sbrs	r17, 7
    104c:	07 c0       	rjmp	.+14     	; 0x105c <vfprintf+0x218>
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	a2 81       	ldd	r26, Z+2	; 0x02
    1054:	b3 81       	ldd	r27, Z+3	; 0x03
    1056:	24 e0       	ldi	r18, 0x04	; 4
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	08 c0       	rjmp	.+16     	; 0x106c <vfprintf+0x228>
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	aa 27       	eor	r26, r26
    1062:	97 fd       	sbrc	r25, 7
    1064:	a0 95       	com	r26
    1066:	ba 2f       	mov	r27, r26
    1068:	22 e0       	ldi	r18, 0x02	; 2
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	a2 0e       	add	r10, r18
    106e:	b3 1e       	adc	r11, r19
    1070:	01 2f       	mov	r16, r17
    1072:	0f 76       	andi	r16, 0x6F	; 111
    1074:	b7 ff       	sbrs	r27, 7
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <vfprintf+0x244>
    1078:	b0 95       	com	r27
    107a:	a0 95       	com	r26
    107c:	90 95       	com	r25
    107e:	81 95       	neg	r24
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	af 4f       	sbci	r26, 0xFF	; 255
    1084:	bf 4f       	sbci	r27, 0xFF	; 255
    1086:	00 68       	ori	r16, 0x80	; 128
    1088:	bc 01       	movw	r22, r24
    108a:	cd 01       	movw	r24, r26
    108c:	a2 01       	movw	r20, r4
    108e:	2a e0       	ldi	r18, 0x0A	; 10
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__ultoa_invert>
    1096:	d8 2e       	mov	r13, r24
    1098:	d4 18       	sub	r13, r4
    109a:	3f c0       	rjmp	.+126    	; 0x111a <vfprintf+0x2d6>
    109c:	85 37       	cpi	r24, 0x75	; 117
    109e:	21 f4       	brne	.+8      	; 0x10a8 <vfprintf+0x264>
    10a0:	1f 7e       	andi	r17, 0xEF	; 239
    10a2:	2a e0       	ldi	r18, 0x0A	; 10
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	20 c0       	rjmp	.+64     	; 0x10e8 <vfprintf+0x2a4>
    10a8:	19 7f       	andi	r17, 0xF9	; 249
    10aa:	8f 36       	cpi	r24, 0x6F	; 111
    10ac:	a9 f0       	breq	.+42     	; 0x10d8 <vfprintf+0x294>
    10ae:	80 37       	cpi	r24, 0x70	; 112
    10b0:	20 f4       	brcc	.+8      	; 0x10ba <vfprintf+0x276>
    10b2:	88 35       	cpi	r24, 0x58	; 88
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <vfprintf+0x274>
    10b6:	ae c0       	rjmp	.+348    	; 0x1214 <vfprintf+0x3d0>
    10b8:	0b c0       	rjmp	.+22     	; 0x10d0 <vfprintf+0x28c>
    10ba:	80 37       	cpi	r24, 0x70	; 112
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <vfprintf+0x282>
    10be:	88 37       	cpi	r24, 0x78	; 120
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <vfprintf+0x280>
    10c2:	a8 c0       	rjmp	.+336    	; 0x1214 <vfprintf+0x3d0>
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <vfprintf+0x284>
    10c6:	10 61       	ori	r17, 0x10	; 16
    10c8:	14 ff       	sbrs	r17, 4
    10ca:	09 c0       	rjmp	.+18     	; 0x10de <vfprintf+0x29a>
    10cc:	14 60       	ori	r17, 0x04	; 4
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <vfprintf+0x29a>
    10d0:	14 ff       	sbrs	r17, 4
    10d2:	08 c0       	rjmp	.+16     	; 0x10e4 <vfprintf+0x2a0>
    10d4:	16 60       	ori	r17, 0x06	; 6
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <vfprintf+0x2a0>
    10d8:	28 e0       	ldi	r18, 0x08	; 8
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <vfprintf+0x2a4>
    10de:	20 e1       	ldi	r18, 0x10	; 16
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <vfprintf+0x2a4>
    10e4:	20 e1       	ldi	r18, 0x10	; 16
    10e6:	32 e0       	ldi	r19, 0x02	; 2
    10e8:	f5 01       	movw	r30, r10
    10ea:	17 ff       	sbrs	r17, 7
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <vfprintf+0x2b8>
    10ee:	60 81       	ld	r22, Z
    10f0:	71 81       	ldd	r23, Z+1	; 0x01
    10f2:	82 81       	ldd	r24, Z+2	; 0x02
    10f4:	93 81       	ldd	r25, Z+3	; 0x03
    10f6:	44 e0       	ldi	r20, 0x04	; 4
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <vfprintf+0x2c4>
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	42 e0       	ldi	r20, 0x02	; 2
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	a4 0e       	add	r10, r20
    110a:	b5 1e       	adc	r11, r21
    110c:	a2 01       	movw	r20, r4
    110e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__ultoa_invert>
    1112:	d8 2e       	mov	r13, r24
    1114:	d4 18       	sub	r13, r4
    1116:	01 2f       	mov	r16, r17
    1118:	0f 77       	andi	r16, 0x7F	; 127
    111a:	06 ff       	sbrs	r16, 6
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <vfprintf+0x2ec>
    111e:	0e 7f       	andi	r16, 0xFE	; 254
    1120:	df 14       	cp	r13, r15
    1122:	30 f4       	brcc	.+12     	; 0x1130 <vfprintf+0x2ec>
    1124:	04 ff       	sbrs	r16, 4
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <vfprintf+0x2f0>
    1128:	02 fd       	sbrc	r16, 2
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <vfprintf+0x2f0>
    112c:	0f 7e       	andi	r16, 0xEF	; 239
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <vfprintf+0x2f0>
    1130:	1d 2d       	mov	r17, r13
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <vfprintf+0x2f2>
    1134:	1f 2d       	mov	r17, r15
    1136:	80 2f       	mov	r24, r16
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	04 ff       	sbrs	r16, 4
    113c:	0c c0       	rjmp	.+24     	; 0x1156 <vfprintf+0x312>
    113e:	fe 01       	movw	r30, r28
    1140:	ed 0d       	add	r30, r13
    1142:	f1 1d       	adc	r31, r1
    1144:	20 81       	ld	r18, Z
    1146:	20 33       	cpi	r18, 0x30	; 48
    1148:	11 f4       	brne	.+4      	; 0x114e <vfprintf+0x30a>
    114a:	09 7e       	andi	r16, 0xE9	; 233
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <vfprintf+0x31c>
    114e:	02 ff       	sbrs	r16, 2
    1150:	06 c0       	rjmp	.+12     	; 0x115e <vfprintf+0x31a>
    1152:	1e 5f       	subi	r17, 0xFE	; 254
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <vfprintf+0x31c>
    1156:	86 78       	andi	r24, 0x86	; 134
    1158:	90 70       	andi	r25, 0x00	; 0
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	09 f0       	breq	.+2      	; 0x1160 <vfprintf+0x31c>
    115e:	1f 5f       	subi	r17, 0xFF	; 255
    1160:	80 2e       	mov	r8, r16
    1162:	99 24       	eor	r9, r9
    1164:	03 fd       	sbrc	r16, 3
    1166:	12 c0       	rjmp	.+36     	; 0x118c <vfprintf+0x348>
    1168:	00 ff       	sbrs	r16, 0
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <vfprintf+0x342>
    116c:	fd 2c       	mov	r15, r13
    116e:	1e 15       	cp	r17, r14
    1170:	50 f4       	brcc	.+20     	; 0x1186 <vfprintf+0x342>
    1172:	fe 0c       	add	r15, r14
    1174:	f1 1a       	sub	r15, r17
    1176:	1e 2d       	mov	r17, r14
    1178:	06 c0       	rjmp	.+12     	; 0x1186 <vfprintf+0x342>
    117a:	80 e2       	ldi	r24, 0x20	; 32
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	b3 01       	movw	r22, r6
    1180:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    1184:	1f 5f       	subi	r17, 0xFF	; 255
    1186:	1e 15       	cp	r17, r14
    1188:	c0 f3       	brcs	.-16     	; 0x117a <vfprintf+0x336>
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <vfprintf+0x350>
    118c:	1e 15       	cp	r17, r14
    118e:	10 f4       	brcc	.+4      	; 0x1194 <vfprintf+0x350>
    1190:	e1 1a       	sub	r14, r17
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <vfprintf+0x352>
    1194:	ee 24       	eor	r14, r14
    1196:	84 fe       	sbrs	r8, 4
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <vfprintf+0x374>
    119a:	80 e3       	ldi	r24, 0x30	; 48
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	b3 01       	movw	r22, r6
    11a0:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    11a4:	82 fe       	sbrs	r8, 2
    11a6:	1f c0       	rjmp	.+62     	; 0x11e6 <vfprintf+0x3a2>
    11a8:	81 fe       	sbrs	r8, 1
    11aa:	03 c0       	rjmp	.+6      	; 0x11b2 <vfprintf+0x36e>
    11ac:	88 e5       	ldi	r24, 0x58	; 88
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	10 c0       	rjmp	.+32     	; 0x11d2 <vfprintf+0x38e>
    11b2:	88 e7       	ldi	r24, 0x78	; 120
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0d c0       	rjmp	.+26     	; 0x11d2 <vfprintf+0x38e>
    11b8:	c4 01       	movw	r24, r8
    11ba:	86 78       	andi	r24, 0x86	; 134
    11bc:	90 70       	andi	r25, 0x00	; 0
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	91 f0       	breq	.+36     	; 0x11e6 <vfprintf+0x3a2>
    11c2:	81 fc       	sbrc	r8, 1
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <vfprintf+0x386>
    11c6:	80 e2       	ldi	r24, 0x20	; 32
    11c8:	01 c0       	rjmp	.+2      	; 0x11cc <vfprintf+0x388>
    11ca:	8b e2       	ldi	r24, 0x2B	; 43
    11cc:	07 fd       	sbrc	r16, 7
    11ce:	8d e2       	ldi	r24, 0x2D	; 45
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	b3 01       	movw	r22, r6
    11d4:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <vfprintf+0x3a2>
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	b3 01       	movw	r22, r6
    11e0:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    11e4:	fa 94       	dec	r15
    11e6:	df 14       	cp	r13, r15
    11e8:	c0 f3       	brcs	.-16     	; 0x11da <vfprintf+0x396>
    11ea:	da 94       	dec	r13
    11ec:	f2 01       	movw	r30, r4
    11ee:	ed 0d       	add	r30, r13
    11f0:	f1 1d       	adc	r31, r1
    11f2:	80 81       	ld	r24, Z
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	b3 01       	movw	r22, r6
    11f8:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    11fc:	dd 20       	and	r13, r13
    11fe:	a9 f7       	brne	.-22     	; 0x11ea <vfprintf+0x3a6>
    1200:	06 c0       	rjmp	.+12     	; 0x120e <vfprintf+0x3ca>
    1202:	80 e2       	ldi	r24, 0x20	; 32
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	b3 01       	movw	r22, r6
    1208:	0e 94 3f 09 	call	0x127e	; 0x127e <fputc>
    120c:	ea 94       	dec	r14
    120e:	ee 20       	and	r14, r14
    1210:	c1 f7       	brne	.-16     	; 0x1202 <vfprintf+0x3be>
    1212:	40 ce       	rjmp	.-896    	; 0xe94 <vfprintf+0x50>
    1214:	f3 01       	movw	r30, r6
    1216:	86 81       	ldd	r24, Z+6	; 0x06
    1218:	97 81       	ldd	r25, Z+7	; 0x07
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <vfprintf+0x3dc>
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	9f ef       	ldi	r25, 0xFF	; 255
    1220:	2d 96       	adiw	r28, 0x0d	; 13
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	f8 94       	cli
    1226:	de bf       	out	0x3e, r29	; 62
    1228:	0f be       	out	0x3f, r0	; 63
    122a:	cd bf       	out	0x3d, r28	; 61
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	bf 90       	pop	r11
    123e:	af 90       	pop	r10
    1240:	9f 90       	pop	r9
    1242:	8f 90       	pop	r8
    1244:	7f 90       	pop	r7
    1246:	6f 90       	pop	r6
    1248:	5f 90       	pop	r5
    124a:	4f 90       	pop	r4
    124c:	3f 90       	pop	r3
    124e:	2f 90       	pop	r2
    1250:	08 95       	ret

00001252 <strnlen_P>:
    1252:	fc 01       	movw	r30, r24
    1254:	05 90       	lpm	r0, Z+
    1256:	61 50       	subi	r22, 0x01	; 1
    1258:	70 40       	sbci	r23, 0x00	; 0
    125a:	01 10       	cpse	r0, r1
    125c:	d8 f7       	brcc	.-10     	; 0x1254 <strnlen_P+0x2>
    125e:	80 95       	com	r24
    1260:	90 95       	com	r25
    1262:	8e 0f       	add	r24, r30
    1264:	9f 1f       	adc	r25, r31
    1266:	08 95       	ret

00001268 <strnlen>:
    1268:	fc 01       	movw	r30, r24
    126a:	61 50       	subi	r22, 0x01	; 1
    126c:	70 40       	sbci	r23, 0x00	; 0
    126e:	01 90       	ld	r0, Z+
    1270:	01 10       	cpse	r0, r1
    1272:	d8 f7       	brcc	.-10     	; 0x126a <strnlen+0x2>
    1274:	80 95       	com	r24
    1276:	90 95       	com	r25
    1278:	8e 0f       	add	r24, r30
    127a:	9f 1f       	adc	r25, r31
    127c:	08 95       	ret

0000127e <fputc>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	8c 01       	movw	r16, r24
    1288:	eb 01       	movw	r28, r22
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	81 ff       	sbrs	r24, 1
    128e:	1b c0       	rjmp	.+54     	; 0x12c6 <fputc+0x48>
    1290:	82 ff       	sbrs	r24, 2
    1292:	0d c0       	rjmp	.+26     	; 0x12ae <fputc+0x30>
    1294:	2e 81       	ldd	r18, Y+6	; 0x06
    1296:	3f 81       	ldd	r19, Y+7	; 0x07
    1298:	8c 81       	ldd	r24, Y+4	; 0x04
    129a:	9d 81       	ldd	r25, Y+5	; 0x05
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	64 f4       	brge	.+24     	; 0x12ba <fputc+0x3c>
    12a2:	e8 81       	ld	r30, Y
    12a4:	f9 81       	ldd	r31, Y+1	; 0x01
    12a6:	01 93       	st	Z+, r16
    12a8:	f9 83       	std	Y+1, r31	; 0x01
    12aa:	e8 83       	st	Y, r30
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <fputc+0x3c>
    12ae:	e8 85       	ldd	r30, Y+8	; 0x08
    12b0:	f9 85       	ldd	r31, Y+9	; 0x09
    12b2:	80 2f       	mov	r24, r16
    12b4:	09 95       	icall
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	31 f4       	brne	.+12     	; 0x12c6 <fputc+0x48>
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	9f 81       	ldd	r25, Y+7	; 0x07
    12be:	01 96       	adiw	r24, 0x01	; 1
    12c0:	9f 83       	std	Y+7, r25	; 0x07
    12c2:	8e 83       	std	Y+6, r24	; 0x06
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <fputc+0x4c>
    12c6:	0f ef       	ldi	r16, 0xFF	; 255
    12c8:	1f ef       	ldi	r17, 0xFF	; 255
    12ca:	c8 01       	movw	r24, r16
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	08 95       	ret

000012d6 <__ultoa_invert>:
    12d6:	fa 01       	movw	r30, r20
    12d8:	aa 27       	eor	r26, r26
    12da:	28 30       	cpi	r18, 0x08	; 8
    12dc:	51 f1       	breq	.+84     	; 0x1332 <__ultoa_invert+0x5c>
    12de:	20 31       	cpi	r18, 0x10	; 16
    12e0:	81 f1       	breq	.+96     	; 0x1342 <__ultoa_invert+0x6c>
    12e2:	e8 94       	clt
    12e4:	6f 93       	push	r22
    12e6:	6e 7f       	andi	r22, 0xFE	; 254
    12e8:	6e 5f       	subi	r22, 0xFE	; 254
    12ea:	7f 4f       	sbci	r23, 0xFF	; 255
    12ec:	8f 4f       	sbci	r24, 0xFF	; 255
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
    12f0:	af 4f       	sbci	r26, 0xFF	; 255
    12f2:	b1 e0       	ldi	r27, 0x01	; 1
    12f4:	3e d0       	rcall	.+124    	; 0x1372 <__ultoa_invert+0x9c>
    12f6:	b4 e0       	ldi	r27, 0x04	; 4
    12f8:	3c d0       	rcall	.+120    	; 0x1372 <__ultoa_invert+0x9c>
    12fa:	67 0f       	add	r22, r23
    12fc:	78 1f       	adc	r23, r24
    12fe:	89 1f       	adc	r24, r25
    1300:	9a 1f       	adc	r25, r26
    1302:	a1 1d       	adc	r26, r1
    1304:	68 0f       	add	r22, r24
    1306:	79 1f       	adc	r23, r25
    1308:	8a 1f       	adc	r24, r26
    130a:	91 1d       	adc	r25, r1
    130c:	a1 1d       	adc	r26, r1
    130e:	6a 0f       	add	r22, r26
    1310:	71 1d       	adc	r23, r1
    1312:	81 1d       	adc	r24, r1
    1314:	91 1d       	adc	r25, r1
    1316:	a1 1d       	adc	r26, r1
    1318:	20 d0       	rcall	.+64     	; 0x135a <__ultoa_invert+0x84>
    131a:	09 f4       	brne	.+2      	; 0x131e <__ultoa_invert+0x48>
    131c:	68 94       	set
    131e:	3f 91       	pop	r19
    1320:	2a e0       	ldi	r18, 0x0A	; 10
    1322:	26 9f       	mul	r18, r22
    1324:	11 24       	eor	r1, r1
    1326:	30 19       	sub	r19, r0
    1328:	30 5d       	subi	r19, 0xD0	; 208
    132a:	31 93       	st	Z+, r19
    132c:	de f6       	brtc	.-74     	; 0x12e4 <__ultoa_invert+0xe>
    132e:	cf 01       	movw	r24, r30
    1330:	08 95       	ret
    1332:	46 2f       	mov	r20, r22
    1334:	47 70       	andi	r20, 0x07	; 7
    1336:	40 5d       	subi	r20, 0xD0	; 208
    1338:	41 93       	st	Z+, r20
    133a:	b3 e0       	ldi	r27, 0x03	; 3
    133c:	0f d0       	rcall	.+30     	; 0x135c <__ultoa_invert+0x86>
    133e:	c9 f7       	brne	.-14     	; 0x1332 <__ultoa_invert+0x5c>
    1340:	f6 cf       	rjmp	.-20     	; 0x132e <__ultoa_invert+0x58>
    1342:	46 2f       	mov	r20, r22
    1344:	4f 70       	andi	r20, 0x0F	; 15
    1346:	40 5d       	subi	r20, 0xD0	; 208
    1348:	4a 33       	cpi	r20, 0x3A	; 58
    134a:	18 f0       	brcs	.+6      	; 0x1352 <__ultoa_invert+0x7c>
    134c:	49 5d       	subi	r20, 0xD9	; 217
    134e:	31 fd       	sbrc	r19, 1
    1350:	40 52       	subi	r20, 0x20	; 32
    1352:	41 93       	st	Z+, r20
    1354:	02 d0       	rcall	.+4      	; 0x135a <__ultoa_invert+0x84>
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__ultoa_invert+0x6c>
    1358:	ea cf       	rjmp	.-44     	; 0x132e <__ultoa_invert+0x58>
    135a:	b4 e0       	ldi	r27, 0x04	; 4
    135c:	a6 95       	lsr	r26
    135e:	97 95       	ror	r25
    1360:	87 95       	ror	r24
    1362:	77 95       	ror	r23
    1364:	67 95       	ror	r22
    1366:	ba 95       	dec	r27
    1368:	c9 f7       	brne	.-14     	; 0x135c <__ultoa_invert+0x86>
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	61 05       	cpc	r22, r1
    136e:	71 05       	cpc	r23, r1
    1370:	08 95       	ret
    1372:	9b 01       	movw	r18, r22
    1374:	ac 01       	movw	r20, r24
    1376:	0a 2e       	mov	r0, r26
    1378:	06 94       	lsr	r0
    137a:	57 95       	ror	r21
    137c:	47 95       	ror	r20
    137e:	37 95       	ror	r19
    1380:	27 95       	ror	r18
    1382:	ba 95       	dec	r27
    1384:	c9 f7       	brne	.-14     	; 0x1378 <__ultoa_invert+0xa2>
    1386:	62 0f       	add	r22, r18
    1388:	73 1f       	adc	r23, r19
    138a:	84 1f       	adc	r24, r20
    138c:	95 1f       	adc	r25, r21
    138e:	a0 1d       	adc	r26, r0
    1390:	08 95       	ret

00001392 <_exit>:
    1392:	f8 94       	cli

00001394 <__stop_program>:
    1394:	ff cf       	rjmp	.-2      	; 0x1394 <__stop_program>
