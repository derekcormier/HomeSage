
HomeSage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000256  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000256  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000a50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000844  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000412  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d7  00000000  00000000  00001786  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c0  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f6  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 33       	cpi	r26, 0x32	; 50
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a2 e3       	ldi	r26, 0x32	; 50
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 33       	cpi	r26, 0x32	; 50
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  c6:	0c 94 29 01 	jmp	0x252	; 0x252 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <initSerialADC>:
#include "adc.h"
#include "lcd.h"

void initSerialADC(void)
{
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);
  ce:	80 eb       	ldi	r24, 0xB0	; 176
  d0:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR);
  d2:	80 e5       	ldi	r24, 0x50	; 80
  d4:	8c bd       	out	0x2c, r24	; 44
}
  d6:	08 95       	ret

000000d8 <transmitADC>:

void transmitADC(char data)
{
	SPDR = data;
  d8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <transmitADC+0x2>
}
  e0:	08 95       	ret

000000e2 <recieveADC>:

char recieveADC(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)))
  e2:	0d b4       	in	r0, 0x2d	; 45
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <recieveADC>
;
/* Return Data Register */
return SPDR;
  e8:	8e b5       	in	r24, 0x2e	; 46
}	
  ea:	08 95       	ret

000000ec <getValueADC>:

void getValueADC(void)
{
  ec:	cf 93       	push	r28
	PORTB |= (0<<PB4);
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	85 b9       	out	0x05, r24	; 5
	PORTB |= (0<<PB4);
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	85 b9       	out	0x05, r24	; 5
	char high=0b00000000;
	char low=0b00000000;
	high=SPSR;
  f6:	8d b5       	in	r24, 0x2d	; 45
	putCharLCD(high);
  f8:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
	putStrLCD("in loop\n\r");
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <putStrLCD>
	transmitADC(0b00001100);
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	0e 94 6c 00 	call	0xd8	; 0xd8 <transmitADC>
	putStrLCD("transmitted\n\r");
 10a:	8a e0       	ldi	r24, 0x0A	; 10
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <putStrLCD>
	high = recieveADC();
 112:	0e 94 71 00 	call	0xe2	; 0xe2 <recieveADC>
 116:	c8 2f       	mov	r28, r24
	putStrLCD("recieved\n\r");
 118:	88 e1       	ldi	r24, 0x18	; 24
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <putStrLCD>
	//low = recieveADC();
	PORTB |= (0<<PB4);
 120:	85 b1       	in	r24, 0x05	; 5
 122:	85 b9       	out	0x05, r24	; 5
	
	putCharLCD(high);
 124:	8c 2f       	mov	r24, r28
 126:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
	putCharLCD(low);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <init_interrupt>:
	//GICR |= (1 << INT0);
	//GICR |= (1 << INT1); 

	// Initializes the mode of the interrupts
	// Makes the external interrupts trigger on a falling edge
	MCUCR &= ~(1 << ISC00);
 134:	85 b7       	in	r24, 0x35	; 53
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC01);
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
 140:	85 b7       	in	r24, 0x35	; 53
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1 << ISC11);
 146:	85 b7       	in	r24, 0x35	; 53
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	85 bf       	out	0x35, r24	; 53
}
 14c:	08 95       	ret

0000014e <main>:

FILE LCDstream = FDEV_SETUP_STREAM (putCharLCD, getCharLCD, _FDEV_SETUP_RW);

int main(void)
{
	init_interrupt();
 14e:	0e 94 9a 00 	call	0x134	; 0x134 <init_interrupt>
	initSerialLCD();
 152:	0e 94 ba 00 	call	0x174	; 0x174 <initSerialLCD>
	initPeakDet();
 156:	0e 94 25 01 	call	0x24a	; 0x24a <initPeakDet>
	
	sei();
 15a:	78 94       	sei
	
	//stdout = &LCDstream;
    while(1)
    {
		
		getValueADC();
 15c:	0e 94 76 00 	call	0xec	; 0xec <getValueADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9d e0       	ldi	r25, 0x0D	; 13
 164:	a3 e0       	ldi	r26, 0x03	; 3
 166:	81 50       	subi	r24, 0x01	; 1
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x22>
 170:	00 00       	nop
 172:	f4 cf       	rjmp	.-24     	; 0x15c <main+0xe>

00000174 <initSerialLCD>:
#include <string.h>
#include "lcd.h"

void initSerialLCD(void)			// POST: Initializes serial communtication for the Serial LCD
{
	UBRR1L = 0b00110011;			// Set UBRR1 to 51, for 9600 baud
 174:	83 e3       	ldi	r24, 0x33	; 51
 176:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0;
 17a:	10 92 cd 00 	sts	0x00CD, r1
	
	DDRD |= 0b00001000;
 17e:	53 9a       	sbi	0x0a, 3	; 10
	
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);		// Enable recieve and transmit lines
 180:	88 e1       	ldi	r24, 0x18	; 24
 182:	80 93 c9 00 	sts	0x00C9, r24
	
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);	// Frame: 8-bit, no parity, 1 stop bit
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 ca 00 	sts	0x00CA, r24
}
 18c:	08 95       	ret

0000018e <putCharLCD>:
	while(getCharLCD() != SLCD_INIT_DONE);
}

void putCharLCD(unsigned char data)
{
	while (!(UCSR1A & (1<<UDRE1)));			// Wait for the transmit buffer to be empty
 18e:	e8 ec       	ldi	r30, 0xC8	; 200
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	90 81       	ld	r25, Z
 194:	95 ff       	sbrs	r25, 5
 196:	fd cf       	rjmp	.-6      	; 0x192 <putCharLCD+0x4>
	
	UDR1 = data;							// Put data in buffer and send
 198:	80 93 ce 00 	sts	0x00CE, r24
}
 19c:	08 95       	ret

0000019e <getCharLCD>:

unsigned char getCharLCD(void)			// POST: Send character to the LCD
{
	while (!(UCSR1A & (1<<RXC1)));			// Wait for data to be received
 19e:	e8 ec       	ldi	r30, 0xC8	; 200
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	ec f7       	brge	.-6      	; 0x1a2 <getCharLCD+0x4>
	
	return UDR1;							// Get data from buffer
 1a8:	80 91 ce 00 	lds	r24, 0x00CE
}
 1ac:	08 95       	ret

000001ae <initLCD>:
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);	// Frame: 8-bit, no parity, 1 stop bit
}

void initLCD(void)
{
	while(getCharLCD() != UART_READY);
 1ae:	0e 94 cf 00 	call	0x19e	; 0x19e <getCharLCD>
 1b2:	83 3a       	cpi	r24, 0xA3	; 163
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <initLCD>
	
	putCharLCD(SLCD_CONTROL_HEADER);		// Send bytes to initialize serial LCD
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
	putCharLCD(SLCD_POWER_ON);
 1bc:	83 e8       	ldi	r24, 0x83	; 131
 1be:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
	putCharLCD(SLCD_INIT_ACK);
 1c2:	85 ea       	ldi	r24, 0xA5	; 165
 1c4:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
	
	while(getCharLCD() != SLCD_INIT_DONE);
 1c8:	0e 94 cf 00 	call	0x19e	; 0x19e <getCharLCD>
 1cc:	8a 3a       	cpi	r24, 0xAA	; 170
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <initLCD+0x1a>
}
 1d0:	08 95       	ret

000001d2 <putStrLCD>:
	
	return UDR1;							// Get data from buffer
}

void putStrLCD(char str[])
{
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	f8 2e       	mov	r15, r24
 1e0:	e9 2e       	mov	r14, r25
	for(int i=0; i<strlen(str); i++)
 1e2:	08 2f       	mov	r16, r24
 1e4:	19 2f       	mov	r17, r25
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <putStrLCD+0x26>
	{
		putCharLCD(str[i]);
 1ec:	f8 01       	movw	r30, r16
 1ee:	81 91       	ld	r24, Z+
 1f0:	8f 01       	movw	r16, r30
 1f2:	0e 94 c7 00 	call	0x18e	; 0x18e <putCharLCD>
	return UDR1;							// Get data from buffer
}

void putStrLCD(char str[])
{
	for(int i=0; i<strlen(str); i++)
 1f6:	21 96       	adiw	r28, 0x01	; 1
 1f8:	ef 2d       	mov	r30, r15
 1fa:	fe 2d       	mov	r31, r14
 1fc:	df 01       	movw	r26, r30
 1fe:	0d 90       	ld	r0, X+
 200:	00 20       	and	r0, r0
 202:	e9 f7       	brne	.-6      	; 0x1fe <putStrLCD+0x2c>
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	ae 1b       	sub	r26, r30
 208:	bf 0b       	sbc	r27, r31
 20a:	ca 17       	cp	r28, r26
 20c:	db 07       	cpc	r29, r27
 20e:	70 f3       	brcs	.-36     	; 0x1ec <putStrLCD+0x1a>
	{
		putCharLCD(str[i]);
	}	
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	08 95       	ret

0000021e <resetPeakDet>:
	resetPeakDet();				// Initial reset of peak detector			
}

void resetPeakDet(void)			// POST: Resets current sensor peak detector
{
	PORTC = 0b00000001;			// Drain stored voltage from peak detector
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	88 b9       	out	0x08, r24	; 8
 222:	8f ed       	ldi	r24, 0xDF	; 223
 224:	93 e9       	ldi	r25, 0x93	; 147
 226:	a4 e0       	ldi	r26, 0x04	; 4
 228:	81 50       	subi	r24, 0x01	; 1
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	a0 40       	sbci	r26, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <resetPeakDet+0xa>
 230:	00 c0       	rjmp	.+0      	; 0x232 <resetPeakDet+0x14>
 232:	00 00       	nop
	_delay_ms(1500);			// Wait long enough to discharge capacitor
	PORTC = 0b00000000;					// Close NMOS to begin storing voltage
 234:	18 b8       	out	0x08, r1	; 8
 236:	8f ed       	ldi	r24, 0xDF	; 223
 238:	93 e9       	ldi	r25, 0x93	; 147
 23a:	a4 e0       	ldi	r26, 0x04	; 4
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	a0 40       	sbci	r26, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <resetPeakDet+0x1e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <resetPeakDet+0x28>
 246:	00 00       	nop
	_delay_ms(1500);
 248:	08 95       	ret

0000024a <initPeakDet>:
#include <util/delay.h>
#include "peakdet.h"

void initPeakDet(void)			// POST: Sets up the pin(s) for output
{
	DDRC |= 0b00000001;			// Set PORTC pin 0 to output
 24a:	38 9a       	sbi	0x07, 0	; 7
	resetPeakDet();				// Initial reset of peak detector			
 24c:	0e 94 0f 01 	call	0x21e	; 0x21e <resetPeakDet>
}
 250:	08 95       	ret

00000252 <_exit>:
 252:	f8 94       	cli

00000254 <__stop_program>:
 254:	ff cf       	rjmp	.-2      	; 0x254 <__stop_program>
