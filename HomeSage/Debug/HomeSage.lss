
HomeSage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  0000137e  00001412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080012c  0080012c  0000143e  2**0
                  ALLOC
  3 .stab         000029d0  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000899  00000000  00000000  00003e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000046b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001394  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000962  00000000  00000000  00005bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2e  00000000  00000000  00006526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00007354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001059  00000000  00000000  00007c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00008cb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_20>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e7       	ldi	r30, 0x7E	; 126
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 32       	cpi	r26, 0x2C	; 44
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	ac e2       	ldi	r26, 0x2C	; 44
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	af 32       	cpi	r26, 0x2F	; 47
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 83 01 	call	0x306	; 0x306 <main>
      c8:	0c 94 bd 09 	jmp	0x137a	; 0x137a <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <initSerialADC>:
#include "lcd.h"

void initSerialADC(void)
	// POST: Initializes SPI serain communication for the ADC
{
	DDRB = (1<<DDB4)|(1<<DDB5)|(1<<DDB7);			// Set MOSI, SCK, SS output
      d0:	80 eb       	ldi	r24, 0xB0	; 176
      d2:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA);	// Enable SPI, Enable Master,
      d4:	80 e5       	ldi	r24, 0x50	; 80
      d6:	8c bd       	out	0x2c, r24	; 44
													//	mode 0,0
}
      d8:	08 95       	ret

000000da <readWriteADC>:

char readWriteADC(char data)
	// POST: Writes a character to the ADC, and returns data from the ADC
{
	SPDR = data;						// Write data to the register to be sent
      da:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));			// Wait for data to be sent, recieved
      dc:	0d b4       	in	r0, 0x2d	; 45
      de:	07 fe       	sbrs	r0, 7
      e0:	fd cf       	rjmp	.-6      	; 0xdc <readWriteADC+0x2>
	data = SPDR;						
      e2:	8e b5       	in	r24, 0x2e	; 46
	return data;						// Return data from the resgister
}
      e4:	08 95       	ret

000000e6 <getValueADC>:

signed int getValueADC(int channel)
	// PRE:  0<=channel<=7
	// POST: Returns the 13-bit ADC value	
{
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	ec 01       	movw	r28, r24
	int sLow = 0;				// Low byte to send to ADC
	int rHigh=0;				// Holds upper values from ADC
	int rLow=0;					// Holds lower values from ADC
	int value=0;				// Holds combined value to be returned

	PORTB |= (1<<PB4);			// Select line must be brought high before each read
      ec:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= !(1<<PB4);			// Bring select line low to initiate read from ADC
      ee:	85 b1       	in	r24, 0x05	; 5
      f0:	15 b8       	out	0x05, r1	; 5
	
	sHigh=((channel>>1)|(0b00001100));		// Send start bit, select single-sided
      f2:	ce 01       	movw	r24, r28
      f4:	95 95       	asr	r25
      f6:	87 95       	ror	r24
	sLow=(channel<<7);						//	reading, select channel
	
	readWriteADC(sHigh);			// Send high byte of ADC request					
      f8:	8c 60       	ori	r24, 0x0C	; 12
      fa:	0e 94 6d 00 	call	0xda	; 0xda <readWriteADC>
	rHigh = readWriteADC(sLow);		// Send low byte of ADC request, get high byte result
      fe:	8c 2f       	mov	r24, r28
     100:	87 95       	ror	r24
     102:	88 27       	eor	r24, r24
     104:	87 95       	ror	r24
     106:	0e 94 6d 00 	call	0xda	; 0xda <readWriteADC>
     10a:	c8 2f       	mov	r28, r24
     10c:	d0 e0       	ldi	r29, 0x00	; 0
	rLow = readWriteADC(0);			// Get high byte of result
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	0e 94 6d 00 	call	0xda	; 0xda <readWriteADC>
	PORTB |= (1<<PB4);				// Bring select line high (deselect ADC)
     114:	2c 9a       	sbi	0x05, 4	; 5
	
	rHigh &= (0b00111111);			// Add leading zeroes to the high byte to destroy any
     116:	cf 73       	andi	r28, 0x3F	; 63
     118:	d0 70       	andi	r29, 0x00	; 0
									//	random data that is before the actual data
	value = rLow + (rHigh<<8);		// Merge high and low bytes for the complete reading.
     11a:	dc 2f       	mov	r29, r28
     11c:	cc 27       	eor	r28, r28
     11e:	9e 01       	movw	r18, r28
     120:	28 0f       	add	r18, r24
     122:	31 1d       	adc	r19, r1
     124:	c9 01       	movw	r24, r18
	
	return value;
}
     126:	df 91       	pop	r29
     128:	cf 91       	pop	r28
     12a:	08 95       	ret

0000012c <getCurrentADC>:

double getCurrentADC(void)
	// POST: Returns the current RMS corresponding to the ADC value
{
     12c:	af 92       	push	r10
     12e:	bf 92       	push	r11
     130:	cf 92       	push	r12
     132:	df 92       	push	r13
     134:	ef 92       	push	r14
     136:	ff 92       	push	r15
     138:	0f 93       	push	r16
     13a:	1f 93       	push	r17
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	cd b7       	in	r28, 0x3d	; 61
     142:	de b7       	in	r29, 0x3e	; 62
     144:	c0 5e       	subi	r28, 0xE0	; 224
     146:	de 42       	sbci	r29, 0x2E	; 46
     148:	0f b6       	in	r0, 0x3f	; 63
     14a:	f8 94       	cli
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	0f be       	out	0x3f, r0	; 63
     150:	cd bf       	out	0x3d, r28	; 61
	unsigned int samples = 6000;
	signed int value[6000];
	double ADCTotal=0;
	char str[6];
	
	for(int i=0;i<samples;i++)
     152:	7e 01       	movw	r14, r28
     154:	08 94       	sec
     156:	e1 1c       	adc	r14, r1
     158:	f1 1c       	adc	r15, r1
	value = rLow + (rHigh<<8);		// Merge high and low bytes for the complete reading.
	
	return value;
}

double getCurrentADC(void)
     15a:	0f 2e       	mov	r0, r31
     15c:	f1 ee       	ldi	r31, 0xE1	; 225
     15e:	af 2e       	mov	r10, r31
     160:	fe e2       	ldi	r31, 0x2E	; 46
     162:	bf 2e       	mov	r11, r31
     164:	f0 2d       	mov	r31, r0
     166:	ac 0e       	add	r10, r28
     168:	bd 1e       	adc	r11, r29
     16a:	87 01       	movw	r16, r14
	double ADCTotal=0;
	char str[6];
	
	for(int i=0;i<samples;i++)
	{
		value[i]=(getValueADC(1)-2070);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 73 00 	call	0xe6	; 0xe6 <getValueADC>
     174:	86 51       	subi	r24, 0x16	; 22
     176:	98 40       	sbci	r25, 0x08	; 8
     178:	d8 01       	movw	r26, r16
     17a:	8d 93       	st	X+, r24
     17c:	9d 93       	st	X+, r25
     17e:	8d 01       	movw	r16, r26
	unsigned int samples = 6000;
	signed int value[6000];
	double ADCTotal=0;
	char str[6];
	
	for(int i=0;i<samples;i++)
     180:	aa 15       	cp	r26, r10
     182:	bb 05       	cpc	r27, r11
     184:	99 f7       	brne	.-26     	; 0x16c <getCurrentADC+0x40>
     186:	00 e0       	ldi	r16, 0x00	; 0
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	dd 24       	eor	r13, r13
     18c:	cc 24       	eor	r12, r12
	value = rLow + (rHigh<<8);		// Merge high and low bytes for the complete reading.
	
	return value;
}

double getCurrentADC(void)
     18e:	f7 01       	movw	r30, r14
		value[i]=(getValueADC(1)-2070);
	}
	
	for(int j=0;j<samples;j++)
	{
		if(value[j] < 0)
     190:	80 81       	ld	r24, Z
     192:	91 81       	ldd	r25, Z+1	; 0x01
     194:	99 23       	and	r25, r25
     196:	2c f4       	brge	.+10     	; 0x1a2 <getCurrentADC+0x76>
		{
			value[j] = -value[j];
     198:	90 95       	com	r25
     19a:	81 95       	neg	r24
     19c:	9f 4f       	sbci	r25, 0xFF	; 255
     19e:	91 83       	std	Z+1, r25	; 0x01
     1a0:	80 83       	st	Z, r24
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	e8 0e       	add	r14, r24
     1a8:	f9 1e       	adc	r15, r25
		}
	ADCTotal+= pow(value[j],2);
     1aa:	60 81       	ld	r22, Z
     1ac:	71 81       	ldd	r23, Z+1	; 0x01
     1ae:	88 27       	eor	r24, r24
     1b0:	77 fd       	sbrc	r23, 7
     1b2:	80 95       	com	r24
     1b4:	98 2f       	mov	r25, r24
     1b6:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatsisf>
     1ba:	9b 01       	movw	r18, r22
     1bc:	ac 01       	movw	r20, r24
     1be:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3>
     1c2:	f6 2f       	mov	r31, r22
     1c4:	e7 2f       	mov	r30, r23
     1c6:	38 2f       	mov	r19, r24
     1c8:	29 2f       	mov	r18, r25
     1ca:	40 2f       	mov	r20, r16
     1cc:	51 2f       	mov	r21, r17
     1ce:	6d 2d       	mov	r22, r13
     1d0:	7c 2d       	mov	r23, r12
     1d2:	cb 01       	movw	r24, r22
     1d4:	ba 01       	movw	r22, r20
     1d6:	42 2f       	mov	r20, r18
     1d8:	0f 2f       	mov	r16, r31
     1da:	1e 2f       	mov	r17, r30
     1dc:	23 2f       	mov	r18, r19
     1de:	34 2f       	mov	r19, r20
     1e0:	a9 01       	movw	r20, r18
     1e2:	98 01       	movw	r18, r16
     1e4:	0e 94 ba 04 	call	0x974	; 0x974 <__addsf3>
     1e8:	06 2f       	mov	r16, r22
     1ea:	17 2f       	mov	r17, r23
     1ec:	d8 2e       	mov	r13, r24
     1ee:	c9 2e       	mov	r12, r25
	for(int i=0;i<samples;i++)
	{
		value[i]=(getValueADC(1)-2070);
	}
	
	for(int j=0;j<samples;j++)
     1f0:	ae 14       	cp	r10, r14
     1f2:	bf 04       	cpc	r11, r15
     1f4:	61 f6       	brne	.-104    	; 0x18e <getCurrentADC+0x62>
			value[j] = -value[j];
		}
	ADCTotal+= pow(value[j],2);
	}	
	
return (sqrt(ADCTotal/samples)-1.95)/135.81;
     1f6:	86 2f       	mov	r24, r22
     1f8:	91 2f       	mov	r25, r17
     1fa:	ad 2d       	mov	r26, r13
     1fc:	bc 2d       	mov	r27, r12
     1fe:	bc 01       	movw	r22, r24
     200:	cd 01       	movw	r24, r26
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e8       	ldi	r19, 0x80	; 128
     206:	4b eb       	ldi	r20, 0xBB	; 187
     208:	55 e4       	ldi	r21, 0x45	; 69
     20a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divsf3>
     20e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <sqrt>
     212:	2a e9       	ldi	r18, 0x9A	; 154
     214:	39 e9       	ldi	r19, 0x99	; 153
     216:	49 ef       	ldi	r20, 0xF9	; 249
     218:	5f e3       	ldi	r21, 0x3F	; 63
     21a:	0e 94 b9 04 	call	0x972	; 0x972 <__subsf3>
     21e:	2c e5       	ldi	r18, 0x5C	; 92
     220:	3f ec       	ldi	r19, 0xCF	; 207
     222:	47 e0       	ldi	r20, 0x07	; 7
     224:	53 e4       	ldi	r21, 0x43	; 67
     226:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divsf3>
}
     22a:	46 2f       	mov	r20, r22
     22c:	57 2f       	mov	r21, r23
     22e:	68 2f       	mov	r22, r24
     230:	79 2f       	mov	r23, r25
     232:	cb 01       	movw	r24, r22
     234:	ba 01       	movw	r22, r20
     236:	c0 52       	subi	r28, 0x20	; 32
     238:	d1 4d       	sbci	r29, 0xD1	; 209
     23a:	0f b6       	in	r0, 0x3f	; 63
     23c:	f8 94       	cli
     23e:	de bf       	out	0x3e, r29	; 62
     240:	0f be       	out	0x3f, r0	; 63
     242:	cd bf       	out	0x3d, r28	; 61
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	df 90       	pop	r13
     252:	cf 90       	pop	r12
     254:	bf 90       	pop	r11
     256:	af 90       	pop	r10
     258:	08 95       	ret

0000025a <getVoltageADC>:

double getVoltageADC(void)
	// POST: Returns the voltage RMS corresponding the the ADC value
{
     25a:	ef 92       	push	r14
     25c:	ff 92       	push	r15
     25e:	0f 93       	push	r16
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	c8 ee       	ldi	r28, 0xE8	; 232
     268:	d3 e0       	ldi	r29, 0x03	; 3
	double voltage = 0;
	double ADCValue = 0;
     26a:	10 e0       	ldi	r17, 0x00	; 0
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	ff 24       	eor	r15, r15
     270:	ee 24       	eor	r14, r14
	for(int i=0;i<1000;i++)
	{
		ADCValue += getValueADC(0);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 73 00 	call	0xe6	; 0xe6 <getValueADC>
     27a:	9c 01       	movw	r18, r24
     27c:	b9 01       	movw	r22, r18
     27e:	88 27       	eor	r24, r24
     280:	77 fd       	sbrc	r23, 7
     282:	80 95       	com	r24
     284:	98 2f       	mov	r25, r24
     286:	0e 94 88 05 	call	0xb10	; 0xb10 <__floatsisf>
     28a:	9b 01       	movw	r18, r22
     28c:	ac 01       	movw	r20, r24
     28e:	81 2f       	mov	r24, r17
     290:	90 2f       	mov	r25, r16
     292:	af 2d       	mov	r26, r15
     294:	be 2d       	mov	r27, r14
     296:	bc 01       	movw	r22, r24
     298:	cd 01       	movw	r24, r26
     29a:	0e 94 ba 04 	call	0x974	; 0x974 <__addsf3>
     29e:	16 2f       	mov	r17, r22
     2a0:	07 2f       	mov	r16, r23
     2a2:	f8 2e       	mov	r15, r24
     2a4:	e9 2e       	mov	r14, r25
     2a6:	21 97       	sbiw	r28, 0x01	; 1
double getVoltageADC(void)
	// POST: Returns the voltage RMS corresponding the the ADC value
{
	double voltage = 0;
	double ADCValue = 0;
	for(int i=0;i<1000;i++)
     2a8:	21 f7       	brne	.-56     	; 0x272 <getVoltageADC+0x18>
	{
		ADCValue += getValueADC(0);
	}	
	ADCValue = ADCValue / 1000.0;
     2aa:	86 2f       	mov	r24, r22
     2ac:	90 2f       	mov	r25, r16
     2ae:	af 2d       	mov	r26, r15
     2b0:	be 2d       	mov	r27, r14
     2b2:	bc 01       	movw	r22, r24
     2b4:	cd 01       	movw	r24, r26
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	4a e7       	ldi	r20, 0x7A	; 122
     2bc:	54 e4       	ldi	r21, 0x44	; 68
     2be:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divsf3>
	voltage = ((ADCValue+36334)/320.85);			// Equation relating ADCValue to VRMS
     2c2:	20 e0       	ldi	r18, 0x00	; 0
     2c4:	3e ee       	ldi	r19, 0xEE	; 238
     2c6:	4d e0       	ldi	r20, 0x0D	; 13
     2c8:	57 e4       	ldi	r21, 0x47	; 71
     2ca:	0e 94 ba 04 	call	0x974	; 0x974 <__addsf3>
     2ce:	2d ec       	ldi	r18, 0xCD	; 205
     2d0:	3c e6       	ldi	r19, 0x6C	; 108
     2d2:	40 ea       	ldi	r20, 0xA0	; 160
     2d4:	53 e4       	ldi	r21, 0x43	; 67
     2d6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <__divsf3>
	return voltage;
}
     2da:	46 2f       	mov	r20, r22
     2dc:	57 2f       	mov	r21, r23
     2de:	68 2f       	mov	r22, r24
     2e0:	79 2f       	mov	r23, r25
     2e2:	cb 01       	movw	r24, r22
     2e4:	ba 01       	movw	r22, r20
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	08 95       	ret

000002f4 <getPowerADC>:

double getPowerADC(double voltage, double current)
	// POST: Return the average power
{
	return voltage*current;
     2f4:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsf3>
     2f8:	46 2f       	mov	r20, r22
     2fa:	57 2f       	mov	r21, r23
     2fc:	68 2f       	mov	r22, r24
     2fe:	79 2f       	mov	r23, r25
     300:	cb 01       	movw	r24, r22
     302:	ba 01       	movw	r22, r20
     304:	08 95       	ret

00000306 <main>:

int main(void)
{
	double current, voltage, power;
	
	initSerialLCD();			// Initialize Serial
     306:	0e 94 49 02 	call	0x492	; 0x492 <initSerialLCD>
	initSerialADC();
     30a:	0e 94 68 00 	call	0xd0	; 0xd0 <initSerialADC>
	initSerialPC();
     30e:	0e 94 a6 03 	call	0x74c	; 0x74c <initSerialPC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     312:	8f e9       	ldi	r24, 0x9F	; 159
     314:	96 e8       	ldi	r25, 0x86	; 134
     316:	a1 e0       	ldi	r26, 0x01	; 1
     318:	81 50       	subi	r24, 0x01	; 1
     31a:	90 40       	sbci	r25, 0x00	; 0
     31c:	a0 40       	sbci	r26, 0x00	; 0
     31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x12>
     320:	00 c0       	rjmp	.+0      	; 0x322 <main+0x1c>
     322:	00 00       	nop
	_delay_ms(500);				// Wait for LCD to power up before initializing
	initLCD();					// Send initialization for LCD
     324:	0e 94 66 02 	call	0x4cc	; 0x4cc <initLCD>
	
	sei();
     328:	78 94       	sei
		
		if(recflag != 0)
		{
			clearScreenLCD();
			setCursorLCD(0,0);
			writeLCD("Sending values.");
     32a:	c0 e0       	ldi	r28, 0x00	; 0
     32c:	d1 e0       	ldi	r29, 0x01	; 1
	
	sei();
	
	while(1)					// Infinite loop
	{	
		voltage = getVoltageADC();					// Get voltage reading
     32e:	0e 94 2d 01 	call	0x25a	; 0x25a <getVoltageADC>
     332:	4b 01       	movw	r8, r22
     334:	5c 01       	movw	r10, r24
		current = getCurrentADC();					// Get current reading
     336:	0e 94 96 00 	call	0x12c	; 0x12c <getCurrentADC>
     33a:	2b 01       	movw	r4, r22
     33c:	3c 01       	movw	r6, r24
		power = getPowerADC(voltage, current);		// Calculate power
     33e:	c5 01       	movw	r24, r10
     340:	b4 01       	movw	r22, r8
     342:	a3 01       	movw	r20, r6
     344:	92 01       	movw	r18, r4
     346:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <getPowerADC>
     34a:	7b 01       	movw	r14, r22
     34c:	8c 01       	movw	r16, r24
		
		clearScreenLCD();							// Clear the LCD
     34e:	0e 94 c4 02 	call	0x588	; 0x588 <clearScreenLCD>
		printLayoutLCD(voltage, current, power);	// Print the values
     352:	c5 01       	movw	r24, r10
     354:	b4 01       	movw	r22, r8
     356:	a3 01       	movw	r20, r6
     358:	92 01       	movw	r18, r4
     35a:	0e 94 cb 02 	call	0x596	; 0x596 <printLayoutLCD>
     35e:	8f e3       	ldi	r24, 0x3F	; 63
     360:	9d e0       	ldi	r25, 0x0D	; 13
     362:	a3 e0       	ldi	r26, 0x03	; 3
     364:	81 50       	subi	r24, 0x01	; 1
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	a0 40       	sbci	r26, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <main+0x5e>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <main+0x68>
     36e:	00 00       	nop
		_delay_ms(1000);							// Wait 1 one second before next update
		
		if(recflag != 0)
     370:	80 91 2e 01 	lds	r24, 0x012E
     374:	88 23       	and	r24, r24
     376:	f1 f0       	breq	.+60     	; 0x3b4 <main+0xae>
		{
			clearScreenLCD();
     378:	0e 94 c4 02 	call	0x588	; 0x588 <clearScreenLCD>
			setCursorLCD(0,0);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	0e 94 b1 02 	call	0x562	; 0x562 <setCursorLCD>
			writeLCD("Sending values.");
     388:	ce 01       	movw	r24, r28
     38a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
			sendValuesPC(1, voltage, current);
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	b5 01       	movw	r22, r10
     394:	a4 01       	movw	r20, r8
     396:	93 01       	movw	r18, r6
     398:	82 01       	movw	r16, r4
     39a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <sendValuesPC>
     39e:	8f e3       	ldi	r24, 0x3F	; 63
     3a0:	92 e4       	ldi	r25, 0x42	; 66
     3a2:	af e0       	ldi	r26, 0x0F	; 15
     3a4:	81 50       	subi	r24, 0x01	; 1
     3a6:	90 40       	sbci	r25, 0x00	; 0
     3a8:	a0 40       	sbci	r26, 0x00	; 0
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x9e>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0xa8>
     3ae:	00 00       	nop
			_delay_ms(5000);
			recflag = 0;
     3b0:	10 92 2e 01 	sts	0x012E, r1
		}
		
		if(statflag != 0)
     3b4:	80 91 2d 01 	lds	r24, 0x012D
		{
			
		}
		
		if(togflag != 0)
     3b8:	80 91 2c 01 	lds	r24, 0x012C
     3bc:	b8 cf       	rjmp	.-144    	; 0x32e <main+0x28>

000003be <__vector_20>:
		}
	}
}

ISR(USART0_RX_vect)
{
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	8f 93       	push	r24
	char RecievedByte;
	RecievedByte = UDR0;
     3ca:	80 91 c6 00 	lds	r24, 0x00C6
	
	switch(RecievedByte)
     3ce:	80 3b       	cpi	r24, 0xB0	; 176
     3d0:	b9 f1       	breq	.+110    	; 0x440 <__vector_20+0x82>
     3d2:	81 3b       	cpi	r24, 0xB1	; 177
     3d4:	70 f4       	brcc	.+28     	; 0x3f2 <__vector_20+0x34>
     3d6:	80 3a       	cpi	r24, 0xA0	; 160
     3d8:	09 f1       	breq	.+66     	; 0x41c <__vector_20+0x5e>
     3da:	81 3a       	cpi	r24, 0xA1	; 161
     3dc:	20 f4       	brcc	.+8      	; 0x3e6 <__vector_20+0x28>
     3de:	82 34       	cpi	r24, 0x42	; 66
     3e0:	09 f0       	breq	.+2      	; 0x3e4 <__vector_20+0x26>
     3e2:	51 c0       	rjmp	.+162    	; 0x486 <__vector_20+0xc8>
     3e4:	15 c0       	rjmp	.+42     	; 0x410 <__vector_20+0x52>
     3e6:	81 3a       	cpi	r24, 0xA1	; 161
     3e8:	f9 f0       	breq	.+62     	; 0x428 <__vector_20+0x6a>
     3ea:	82 3a       	cpi	r24, 0xA2	; 162
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <__vector_20+0x32>
     3ee:	4b c0       	rjmp	.+150    	; 0x486 <__vector_20+0xc8>
     3f0:	21 c0       	rjmp	.+66     	; 0x434 <__vector_20+0x76>
     3f2:	80 3c       	cpi	r24, 0xC0	; 192
     3f4:	b9 f1       	breq	.+110    	; 0x464 <__vector_20+0xa6>
     3f6:	81 3c       	cpi	r24, 0xC1	; 193
     3f8:	30 f4       	brcc	.+12     	; 0x406 <__vector_20+0x48>
     3fa:	81 3b       	cpi	r24, 0xB1	; 177
     3fc:	39 f1       	breq	.+78     	; 0x44c <__vector_20+0x8e>
     3fe:	82 3b       	cpi	r24, 0xB2	; 178
     400:	09 f0       	breq	.+2      	; 0x404 <__vector_20+0x46>
     402:	41 c0       	rjmp	.+130    	; 0x486 <__vector_20+0xc8>
     404:	29 c0       	rjmp	.+82     	; 0x458 <__vector_20+0x9a>
     406:	81 3c       	cpi	r24, 0xC1	; 193
     408:	99 f1       	breq	.+102    	; 0x470 <__vector_20+0xb2>
     40a:	82 3c       	cpi	r24, 0xC2	; 194
     40c:	e1 f5       	brne	.+120    	; 0x486 <__vector_20+0xc8>
     40e:	36 c0       	rjmp	.+108    	; 0x47c <__vector_20+0xbe>
	{
	case 'B':
		recflag |= 0b00000001;
     410:	80 91 2e 01 	lds	r24, 0x012E
     414:	81 60       	ori	r24, 0x01	; 1
     416:	80 93 2e 01 	sts	0x012E, r24
		break;
     41a:	35 c0       	rjmp	.+106    	; 0x486 <__vector_20+0xc8>
	case HS_GETMEAS0:
		recflag |= 0b00000001;
     41c:	80 91 2e 01 	lds	r24, 0x012E
     420:	81 60       	ori	r24, 0x01	; 1
     422:	80 93 2e 01 	sts	0x012E, r24
		break;
     426:	2f c0       	rjmp	.+94     	; 0x486 <__vector_20+0xc8>
	case HS_GETMEAS1:
		recflag |= 0b00000010;
     428:	80 91 2e 01 	lds	r24, 0x012E
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	80 93 2e 01 	sts	0x012E, r24
		break;
     432:	29 c0       	rjmp	.+82     	; 0x486 <__vector_20+0xc8>
	case HS_GETMEAS2:
		recflag |= 0b00000100;
     434:	80 91 2e 01 	lds	r24, 0x012E
     438:	84 60       	ori	r24, 0x04	; 4
     43a:	80 93 2e 01 	sts	0x012E, r24
		break;
     43e:	23 c0       	rjmp	.+70     	; 0x486 <__vector_20+0xc8>
	case HS_GETCSTATE0:
		statflag |= 0b00000001;
     440:	80 91 2d 01 	lds	r24, 0x012D
     444:	81 60       	ori	r24, 0x01	; 1
     446:	80 93 2d 01 	sts	0x012D, r24
		break;
     44a:	1d c0       	rjmp	.+58     	; 0x486 <__vector_20+0xc8>
	case HS_GETCSTATE1:
		statflag |= 0b00000010;
     44c:	80 91 2d 01 	lds	r24, 0x012D
     450:	82 60       	ori	r24, 0x02	; 2
     452:	80 93 2d 01 	sts	0x012D, r24
		break;
     456:	17 c0       	rjmp	.+46     	; 0x486 <__vector_20+0xc8>
	case HS_GETCSTATE2:
		statflag |= 0b00000100;
     458:	80 91 2d 01 	lds	r24, 0x012D
     45c:	84 60       	ori	r24, 0x04	; 4
     45e:	80 93 2d 01 	sts	0x012D, r24
		break;
     462:	11 c0       	rjmp	.+34     	; 0x486 <__vector_20+0xc8>
	case HS_TOGCSTATE0:
		togflag |= 0b00000001;
     464:	80 91 2c 01 	lds	r24, 0x012C
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	80 93 2c 01 	sts	0x012C, r24
		break;
     46e:	0b c0       	rjmp	.+22     	; 0x486 <__vector_20+0xc8>
	case HS_TOGCSTATE1:
		togflag |= 0b00000010;
     470:	80 91 2c 01 	lds	r24, 0x012C
     474:	82 60       	ori	r24, 0x02	; 2
     476:	80 93 2c 01 	sts	0x012C, r24
		break;
     47a:	05 c0       	rjmp	.+10     	; 0x486 <__vector_20+0xc8>
	case HS_TOGCSTATE2:
		togflag |= 0b00000100;
     47c:	80 91 2c 01 	lds	r24, 0x012C
     480:	84 60       	ori	r24, 0x04	; 4
     482:	80 93 2c 01 	sts	0x012C, r24
		break;
	default:
		break;	
	}
     486:	8f 91       	pop	r24
     488:	0f 90       	pop	r0
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	0f 90       	pop	r0
     48e:	1f 90       	pop	r1
     490:	18 95       	reti

00000492 <initSerialLCD>:
#include "pc.h"

void initSerialLCD(void)
	// POST: Initializes serial for LCD at 9600 baud, 8 bit, no parity, 1 stop bit
{
	UBRR1L = 0b00110011;						// Set UBRR1 to 51, for 9600 baud
     492:	83 e3       	ldi	r24, 0x33	; 51
     494:	80 93 cc 00 	sts	0x00CC, r24
	UBRR1H = 0;
     498:	10 92 cd 00 	sts	0x00CD, r1
	
	DDRD |= 0b00001000;							// Set the TX line to output
     49c:	53 9a       	sbi	0x0a, 3	; 10
	
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);		// Enable recieve and transmit lines
     49e:	88 e1       	ldi	r24, 0x18	; 24
     4a0:	80 93 c9 00 	sts	0x00C9, r24
	
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);		// Frame: 8-bit, no parity, 1 stop bit
     4a4:	86 e0       	ldi	r24, 0x06	; 6
     4a6:	80 93 ca 00 	sts	0x00CA, r24
}
     4aa:	08 95       	ret

000004ac <putByteLCD>:
}

void putByteLCD(unsigned char data)
	// POST: Sends one byte of data to the LCD
{
	while (!(UCSR1A & (1<<UDRE1)));			// Wait for the transmit buffer to be empty
     4ac:	e8 ec       	ldi	r30, 0xC8	; 200
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	90 81       	ld	r25, Z
     4b2:	95 ff       	sbrs	r25, 5
     4b4:	fd cf       	rjmp	.-6      	; 0x4b0 <putByteLCD+0x4>
	
	UDR1 = data;							// Put data in buffer and send
     4b6:	80 93 ce 00 	sts	0x00CE, r24
}
     4ba:	08 95       	ret

000004bc <getCharLCD>:

unsigned char getCharLCD(void)
// POST: Recieves one byte of data from the LCD
{
	while (!(UCSR1A & (1<<RXC1)));			// Wait for data to be received
     4bc:	e8 ec       	ldi	r30, 0xC8	; 200
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	88 23       	and	r24, r24
     4c4:	ec f7       	brge	.-6      	; 0x4c0 <getCharLCD+0x4>
	
	return UDR1;							// Get data from buffer
     4c6:	80 91 ce 00 	lds	r24, 0x00CE
}
     4ca:	08 95       	ret

000004cc <initLCD>:
	//		Blinking off
	//		Address increments by 1 from left to right
	//		No screen shift
	//		Backlight off 
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Power LCD off
     4cc:	8f e9       	ldi	r24, 0x9F	; 159
     4ce:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_POWER_OFF);
     4d2:	82 e8       	ldi	r24, 0x82	; 130
     4d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	
	putByteLCD(SLCD_CONTROL_HEADER);		// Power LCD on, send bytes to initialize serial LCD
     4d8:	8f e9       	ldi	r24, 0x9F	; 159
     4da:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_POWER_ON);
     4de:	83 e8       	ldi	r24, 0x83	; 131
     4e0:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_INIT_ACK);
     4e4:	85 ea       	ldi	r24, 0xA5	; 165
     4e6:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	
	while(getCharLCD() != SLCD_INIT_DONE);	// Check if LCD initialized properly
     4ea:	0e 94 5e 02 	call	0x4bc	; 0x4bc <getCharLCD>
     4ee:	8a 3a       	cpi	r24, 0xAA	; 170
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <initLCD+0x1e>
}
     4f2:	08 95       	ret

000004f4 <writeLCD>:
	return UDR1;							// Get data from buffer
}

void writeLCD(char str[])
	// POST: Writes a string of characters to the LCD
{
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	f8 2e       	mov	r15, r24
     502:	e9 2e       	mov	r14, r25
	putByteLCD(SLCD_CHAR_HEADER);			// Tell LCD to write follwing data to screen
     504:	8e ef       	ldi	r24, 0xFE	; 254
     506:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
     50a:	0f 2d       	mov	r16, r15
     50c:	1e 2d       	mov	r17, r14
	
	for(int i=0; i<strlen(str); i++)		// Put each character to the LCD
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	06 c0       	rjmp	.+12     	; 0x520 <writeLCD+0x2c>
	{
		putByteLCD(str[i]);
     514:	f8 01       	movw	r30, r16
     516:	81 91       	ld	r24, Z+
     518:	8f 01       	movw	r16, r30
     51a:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
void writeLCD(char str[])
	// POST: Writes a string of characters to the LCD
{
	putByteLCD(SLCD_CHAR_HEADER);			// Tell LCD to write follwing data to screen
	
	for(int i=0; i<strlen(str); i++)		// Put each character to the LCD
     51e:	21 96       	adiw	r28, 0x01	; 1
     520:	ef 2d       	mov	r30, r15
     522:	fe 2d       	mov	r31, r14
     524:	df 01       	movw	r26, r30
     526:	0d 90       	ld	r0, X+
     528:	00 20       	and	r0, r0
     52a:	e9 f7       	brne	.-6      	; 0x526 <writeLCD+0x32>
     52c:	11 97       	sbiw	r26, 0x01	; 1
     52e:	ae 1b       	sub	r26, r30
     530:	bf 0b       	sbc	r27, r31
     532:	ca 17       	cp	r28, r26
     534:	db 07       	cpc	r29, r27
     536:	70 f3       	brcs	.-36     	; 0x514 <writeLCD+0x20>
	{
		putByteLCD(str[i]);
	}	
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	08 95       	ret

00000546 <backlightOnLCD>:

void backlightOnLCD(void)
	// POST: Turns on the LCD Backlight
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Turn backlight on
     546:	8f e9       	ldi	r24, 0x9F	; 159
     548:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_BACKLIGHT_ON);
     54c:	81 e8       	ldi	r24, 0x81	; 129
     54e:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
}	
     552:	08 95       	ret

00000554 <backlightOffLCD>:

void backlightOffLCD(void)
	// POST: Turns off the LCD Backlight
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Turn backlight off
     554:	8f e9       	ldi	r24, 0x9F	; 159
     556:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_BACKLIGHT_OFF);
     55a:	80 e8       	ldi	r24, 0x80	; 128
     55c:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
}	
     560:	08 95       	ret

00000562 <setCursorLCD>:

void setCursorLCD(int col, int row)
	// PRE:	 0<=col<=15, row = 0 or 1
	// POST: Sets the cursor to the specified column and row
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	d8 2f       	mov	r29, r24
     568:	c6 2f       	mov	r28, r22
	putByteLCD(SLCD_CONTROL_HEADER);	
     56a:	8f e9       	ldi	r24, 0x9F	; 159
     56c:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_CURSOR_HEADER);			// Tell LCD next two bytes are coordinate for cursor
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(col); 
     576:	8d 2f       	mov	r24, r29
     578:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(row);
     57c:	8c 2f       	mov	r24, r28
     57e:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <clearScreenLCD>:

void clearScreenLCD(void)
	// POST: Clears the LCD screen
{
	putByteLCD(SLCD_CONTROL_HEADER);		// Clear the screen
     588:	8f e9       	ldi	r24, 0x9F	; 159
     58a:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
	putByteLCD(SLCD_CLEAR_DISPLAY);			
     58e:	85 e6       	ldi	r24, 0x65	; 101
     590:	0e 94 56 02 	call	0x4ac	; 0x4ac <putByteLCD>
     594:	08 95       	ret

00000596 <printLayoutLCD>:
	while(getCharLCD() != SLCD_INIT_DONE);	// Check if LCD initialized properly
}

void printLayoutLCD(double voltage, double current, double power)
	// POST: Prints values in a tidy format to the LCD
{
     596:	4f 92       	push	r4
     598:	5f 92       	push	r5
     59a:	6f 92       	push	r6
     59c:	7f 92       	push	r7
     59e:	8f 92       	push	r8
     5a0:	9f 92       	push	r9
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	2b 97       	sbiw	r28, 0x0b	; 11
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	4b 01       	movw	r8, r22
     5c8:	5c 01       	movw	r10, r24
     5ca:	28 87       	std	Y+8, r18	; 0x08
     5cc:	39 87       	std	Y+9, r19	; 0x09
     5ce:	4a 87       	std	Y+10, r20	; 0x0a
     5d0:	5b 87       	std	Y+11, r21	; 0x0b
     5d2:	27 01       	movw	r4, r14
     5d4:	38 01       	movw	r6, r16
	char str[7];
	
	clearScreenLCD();					// Clear the LCD
     5d6:	0e 94 c4 02 	call	0x588	; 0x588 <clearScreenLCD>
	setCursorLCD(0,0);					// Set Cursor to the origin
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	0e 94 b1 02 	call	0x562	; 0x562 <setCursorLCD>
	snprintf(str,6,"%f",voltage);		// Convert voltage to a sting of 5 characters
     5e6:	8d b7       	in	r24, 0x3d	; 61
     5e8:	9e b7       	in	r25, 0x3e	; 62
     5ea:	0a 97       	sbiw	r24, 0x0a	; 10
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	9e bf       	out	0x3e, r25	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	8d bf       	out	0x3d, r24	; 61
     5f6:	ed b7       	in	r30, 0x3d	; 61
     5f8:	fe b7       	in	r31, 0x3e	; 62
     5fa:	31 96       	adiw	r30, 0x01	; 1
     5fc:	8e 01       	movw	r16, r28
     5fe:	0f 5f       	subi	r16, 0xFF	; 255
     600:	1f 4f       	sbci	r17, 0xFF	; 255
     602:	ad b7       	in	r26, 0x3d	; 61
     604:	be b7       	in	r27, 0x3e	; 62
     606:	12 96       	adiw	r26, 0x02	; 2
     608:	1c 93       	st	X, r17
     60a:	0e 93       	st	-X, r16
     60c:	11 97       	sbiw	r26, 0x01	; 1
     60e:	0f 2e       	mov	r0, r31
     610:	f6 e0       	ldi	r31, 0x06	; 6
     612:	cf 2e       	mov	r12, r31
     614:	dd 24       	eor	r13, r13
     616:	f0 2d       	mov	r31, r0
     618:	d3 82       	std	Z+3, r13	; 0x03
     61a:	c2 82       	std	Z+2, r12	; 0x02
     61c:	0f 2e       	mov	r0, r31
     61e:	f0 e1       	ldi	r31, 0x10	; 16
     620:	ef 2e       	mov	r14, r31
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	ff 2e       	mov	r15, r31
     626:	f0 2d       	mov	r31, r0
     628:	f5 82       	std	Z+5, r15	; 0x05
     62a:	e4 82       	std	Z+4, r14	; 0x04
     62c:	86 82       	std	Z+6, r8	; 0x06
     62e:	97 82       	std	Z+7, r9	; 0x07
     630:	a0 86       	std	Z+8, r10	; 0x08
     632:	b1 86       	std	Z+9, r11	; 0x09
     634:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <snprintf>
	writeLCD("V:");						// Print "V:####.#"
     638:	8d b7       	in	r24, 0x3d	; 61
     63a:	9e b7       	in	r25, 0x3e	; 62
     63c:	0a 96       	adiw	r24, 0x0a	; 10
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	9e bf       	out	0x3e, r25	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	8d bf       	out	0x3d, r24	; 61
     648:	83 e1       	ldi	r24, 0x13	; 19
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
	writeLCD(str);
     650:	c8 01       	movw	r24, r16
     652:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
	setCursorLCD(8,0);					// Move cursor past halfway to "right justify"
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	0e 94 b1 02 	call	0x562	; 0x562 <setCursorLCD>
	snprintf(str,7,"%f",current);		// Convert current to a string of  5 characters
     662:	ad b7       	in	r26, 0x3d	; 61
     664:	be b7       	in	r27, 0x3e	; 62
     666:	1a 97       	sbiw	r26, 0x0a	; 10
     668:	0f b6       	in	r0, 0x3f	; 63
     66a:	f8 94       	cli
     66c:	be bf       	out	0x3e, r27	; 62
     66e:	0f be       	out	0x3f, r0	; 63
     670:	ad bf       	out	0x3d, r26	; 61
     672:	ed b7       	in	r30, 0x3d	; 61
     674:	fe b7       	in	r31, 0x3e	; 62
     676:	31 96       	adiw	r30, 0x01	; 1
     678:	12 96       	adiw	r26, 0x02	; 2
     67a:	1c 93       	st	X, r17
     67c:	0e 93       	st	-X, r16
     67e:	11 97       	sbiw	r26, 0x01	; 1
     680:	87 e0       	ldi	r24, 0x07	; 7
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	93 83       	std	Z+3, r25	; 0x03
     686:	82 83       	std	Z+2, r24	; 0x02
     688:	f5 82       	std	Z+5, r15	; 0x05
     68a:	e4 82       	std	Z+4, r14	; 0x04
     68c:	88 85       	ldd	r24, Y+8	; 0x08
     68e:	99 85       	ldd	r25, Y+9	; 0x09
     690:	aa 85       	ldd	r26, Y+10	; 0x0a
     692:	bb 85       	ldd	r27, Y+11	; 0x0b
     694:	86 83       	std	Z+6, r24	; 0x06
     696:	97 83       	std	Z+7, r25	; 0x07
     698:	a0 87       	std	Z+8, r26	; 0x08
     69a:	b1 87       	std	Z+9, r27	; 0x09
     69c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <snprintf>
	writeLCD("I:");						// Print "I:#.###"
     6a0:	ad b7       	in	r26, 0x3d	; 61
     6a2:	be b7       	in	r27, 0x3e	; 62
     6a4:	1a 96       	adiw	r26, 0x0a	; 10
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	be bf       	out	0x3e, r27	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	ad bf       	out	0x3d, r26	; 61
     6b0:	86 e1       	ldi	r24, 0x16	; 22
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
	writeLCD(str);
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
	setCursorLCD(2,1);					// Set cursor so next part appears "center justified"
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	61 e0       	ldi	r22, 0x01	; 1
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	0e 94 b1 02 	call	0x562	; 0x562 <setCursorLCD>
	snprintf(str,6,"%f",power);			// Convert power to a string of 5 characters
     6ca:	8d b7       	in	r24, 0x3d	; 61
     6cc:	9e b7       	in	r25, 0x3e	; 62
     6ce:	0a 97       	sbiw	r24, 0x0a	; 10
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	9e bf       	out	0x3e, r25	; 62
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	8d bf       	out	0x3d, r24	; 61
     6da:	ed b7       	in	r30, 0x3d	; 61
     6dc:	fe b7       	in	r31, 0x3e	; 62
     6de:	31 96       	adiw	r30, 0x01	; 1
     6e0:	ad b7       	in	r26, 0x3d	; 61
     6e2:	be b7       	in	r27, 0x3e	; 62
     6e4:	12 96       	adiw	r26, 0x02	; 2
     6e6:	1c 93       	st	X, r17
     6e8:	0e 93       	st	-X, r16
     6ea:	11 97       	sbiw	r26, 0x01	; 1
     6ec:	d3 82       	std	Z+3, r13	; 0x03
     6ee:	c2 82       	std	Z+2, r12	; 0x02
     6f0:	f5 82       	std	Z+5, r15	; 0x05
     6f2:	e4 82       	std	Z+4, r14	; 0x04
     6f4:	46 82       	std	Z+6, r4	; 0x06
     6f6:	57 82       	std	Z+7, r5	; 0x07
     6f8:	60 86       	std	Z+8, r6	; 0x08
     6fa:	71 86       	std	Z+9, r7	; 0x09
     6fc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <snprintf>
	writeLCD("Power:");					// Print "Power:###.#"
     700:	8d b7       	in	r24, 0x3d	; 61
     702:	9e b7       	in	r25, 0x3e	; 62
     704:	0a 96       	adiw	r24, 0x0a	; 10
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	9e bf       	out	0x3e, r25	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	8d bf       	out	0x3d, r24	; 61
     710:	89 e1       	ldi	r24, 0x19	; 25
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
	writeLCD(str);
     718:	c8 01       	movw	r24, r16
     71a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
}
     71e:	2b 96       	adiw	r28, 0x0b	; 11
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	af 90       	pop	r10
     73e:	9f 90       	pop	r9
     740:	8f 90       	pop	r8
     742:	7f 90       	pop	r7
     744:	6f 90       	pop	r6
     746:	5f 90       	pop	r5
     748:	4f 90       	pop	r4
     74a:	08 95       	ret

0000074c <initSerialPC>:
#include "lcd.h"

void initSerialPC(void)			
	// POST: Initializes serial communication for the PC
{
	UBRR0L = 0b00110011;						// Set UBRR1 to 51, for 9600 baud
     74c:	83 e3       	ldi	r24, 0x33	; 51
     74e:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;									// (for 8MHz clock)
     752:	10 92 c5 00 	sts	0x00C5, r1
	
	DDRD |= 0b00000010;
     756:	51 9a       	sbi	0x0a, 1	; 10
	
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);		// Enable receive and transmit lines
     758:	88 e9       	ldi	r24, 0x98	; 152
     75a:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);		// Frame: 8-bit, no parity, 1 stop bit
     75e:	86 e0       	ldi	r24, 0x06	; 6
     760:	80 93 c2 00 	sts	0x00C2, r24
}
     764:	08 95       	ret

00000766 <putCharPC>:

void putCharPC(unsigned char data)
	// POST: Sends one character to the PC
{
	while (!(UCSR0A & (1<<UDRE0)));			// Wait for the transmit buffer to be empty
     766:	e0 ec       	ldi	r30, 0xC0	; 192
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	90 81       	ld	r25, Z
     76c:	95 ff       	sbrs	r25, 5
     76e:	fd cf       	rjmp	.-6      	; 0x76a <putCharPC+0x4>
	
	UDR0 = data;							// Put data in buffer and send
     770:	80 93 c6 00 	sts	0x00C6, r24
}
     774:	08 95       	ret

00000776 <getCharPC>:

unsigned char getCharPC(void)
	// POST: Get a character from the PC
{
	while (!(UCSR0A & (1<<RXC0)));			// Wait for data to be received
     776:	e0 ec       	ldi	r30, 0xC0	; 192
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	88 23       	and	r24, r24
     77e:	ec f7       	brge	.-6      	; 0x77a <getCharPC+0x4>
	
	return UDR0;							// Get data from buffer
     780:	80 91 c6 00 	lds	r24, 0x00C6
}
     784:	08 95       	ret

00000786 <putStrPC>:

void putStrPC(char str[])
	// POST: Sends a string to the PC
{
     786:	ef 92       	push	r14
     788:	ff 92       	push	r15
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	f8 2e       	mov	r15, r24
     794:	e9 2e       	mov	r14, r25
	for(int i=0; i<strlen(str); i++)		// Put each character to the PC
     796:	08 2f       	mov	r16, r24
     798:	19 2f       	mov	r17, r25
     79a:	c0 e0       	ldi	r28, 0x00	; 0
     79c:	d0 e0       	ldi	r29, 0x00	; 0
     79e:	06 c0       	rjmp	.+12     	; 0x7ac <putStrPC+0x26>
	{
		putCharPC(str[i]);
     7a0:	f8 01       	movw	r30, r16
     7a2:	81 91       	ld	r24, Z+
     7a4:	8f 01       	movw	r16, r30
     7a6:	0e 94 b3 03 	call	0x766	; 0x766 <putCharPC>
}

void putStrPC(char str[])
	// POST: Sends a string to the PC
{
	for(int i=0; i<strlen(str); i++)		// Put each character to the PC
     7aa:	21 96       	adiw	r28, 0x01	; 1
     7ac:	ef 2d       	mov	r30, r15
     7ae:	fe 2d       	mov	r31, r14
     7b0:	df 01       	movw	r26, r30
     7b2:	0d 90       	ld	r0, X+
     7b4:	00 20       	and	r0, r0
     7b6:	e9 f7       	brne	.-6      	; 0x7b2 <putStrPC+0x2c>
     7b8:	11 97       	sbiw	r26, 0x01	; 1
     7ba:	ae 1b       	sub	r26, r30
     7bc:	bf 0b       	sbc	r27, r31
     7be:	ca 17       	cp	r28, r26
     7c0:	db 07       	cpc	r29, r27
     7c2:	70 f3       	brcs	.-36     	; 0x7a0 <putStrPC+0x1a>
	{
		putCharPC(str[i]);
	}	
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	08 95       	ret

000007d2 <sendValuesPC>:

void sendValuesPC(int device, double voltage, double current)
{
     7d2:	8f 92       	push	r8
     7d4:	9f 92       	push	r9
     7d6:	af 92       	push	r10
     7d8:	bf 92       	push	r11
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	a1 97       	sbiw	r28, 0x21	; 33
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	48 01       	movw	r8, r16
     7f8:	59 01       	movw	r10, r18
	char sendstr[19] = "";
     7fa:	19 82       	std	Y+1, r1	; 0x01
     7fc:	1a 82       	std	Y+2, r1	; 0x02
     7fe:	1b 82       	std	Y+3, r1	; 0x03
     800:	1c 82       	std	Y+4, r1	; 0x04
     802:	fe 01       	movw	r30, r28
     804:	35 96       	adiw	r30, 0x05	; 5
     806:	9f e0       	ldi	r25, 0x0F	; 15
     808:	df 01       	movw	r26, r30
     80a:	1d 92       	st	X+, r1
     80c:	9a 95       	dec	r25
     80e:	e9 f7       	brne	.-6      	; 0x80a <sendValuesPC+0x38>
	char volt[6];
	char curr[8];
	
	sendstr[0] = device + 0x30;
     810:	80 5d       	subi	r24, 0xD0	; 208
     812:	89 83       	std	Y+1, r24	; 0x01
	sendstr[1] = 0;
     814:	1a 82       	std	Y+2, r1	; 0x02
	snprintf(volt, 6 , "%3.1f", voltage);
     816:	8d b7       	in	r24, 0x3d	; 61
     818:	9e b7       	in	r25, 0x3e	; 62
     81a:	0a 97       	sbiw	r24, 0x0a	; 10
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	9e bf       	out	0x3e, r25	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	8d bf       	out	0x3d, r24	; 61
     826:	ed b7       	in	r30, 0x3d	; 61
     828:	fe b7       	in	r31, 0x3e	; 62
     82a:	31 96       	adiw	r30, 0x01	; 1
     82c:	0f 2e       	mov	r0, r31
     82e:	f4 e1       	ldi	r31, 0x14	; 20
     830:	ef 2e       	mov	r14, r31
     832:	ff 24       	eor	r15, r15
     834:	f0 2d       	mov	r31, r0
     836:	ec 0e       	add	r14, r28
     838:	fd 1e       	adc	r15, r29
     83a:	ad b7       	in	r26, 0x3d	; 61
     83c:	be b7       	in	r27, 0x3e	; 62
     83e:	12 96       	adiw	r26, 0x02	; 2
     840:	fc 92       	st	X, r15
     842:	ee 92       	st	-X, r14
     844:	11 97       	sbiw	r26, 0x01	; 1
     846:	86 e0       	ldi	r24, 0x06	; 6
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	93 83       	std	Z+3, r25	; 0x03
     84c:	82 83       	std	Z+2, r24	; 0x02
     84e:	80 e2       	ldi	r24, 0x20	; 32
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	95 83       	std	Z+5, r25	; 0x05
     854:	84 83       	std	Z+4, r24	; 0x04
     856:	46 83       	std	Z+6, r20	; 0x06
     858:	57 83       	std	Z+7, r21	; 0x07
     85a:	60 87       	std	Z+8, r22	; 0x08
     85c:	71 87       	std	Z+9, r23	; 0x09
     85e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <snprintf>
	
	strcat(sendstr, volt);
     862:	8d b7       	in	r24, 0x3d	; 61
     864:	9e b7       	in	r25, 0x3e	; 62
     866:	0a 96       	adiw	r24, 0x0a	; 10
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	f8 94       	cli
     86c:	9e bf       	out	0x3e, r25	; 62
     86e:	0f be       	out	0x3f, r0	; 63
     870:	8d bf       	out	0x3d, r24	; 61
     872:	8e 01       	movw	r16, r28
     874:	0f 5f       	subi	r16, 0xFF	; 255
     876:	1f 4f       	sbci	r17, 0xFF	; 255
     878:	c8 01       	movw	r24, r16
     87a:	b7 01       	movw	r22, r14
     87c:	0e 94 ce 06 	call	0xd9c	; 0xd9c <strcat>
	snprintf(curr, 8, "%2.7f", current);
     880:	ad b7       	in	r26, 0x3d	; 61
     882:	be b7       	in	r27, 0x3e	; 62
     884:	1a 97       	sbiw	r26, 0x0a	; 10
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	be bf       	out	0x3e, r27	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	ad bf       	out	0x3d, r26	; 61
     890:	ed b7       	in	r30, 0x3d	; 61
     892:	fe b7       	in	r31, 0x3e	; 62
     894:	31 96       	adiw	r30, 0x01	; 1
     896:	0f 2e       	mov	r0, r31
     898:	fa e1       	ldi	r31, 0x1A	; 26
     89a:	ef 2e       	mov	r14, r31
     89c:	ff 24       	eor	r15, r15
     89e:	f0 2d       	mov	r31, r0
     8a0:	ec 0e       	add	r14, r28
     8a2:	fd 1e       	adc	r15, r29
     8a4:	12 96       	adiw	r26, 0x02	; 2
     8a6:	fc 92       	st	X, r15
     8a8:	ee 92       	st	-X, r14
     8aa:	11 97       	sbiw	r26, 0x01	; 1
     8ac:	88 e0       	ldi	r24, 0x08	; 8
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	93 83       	std	Z+3, r25	; 0x03
     8b2:	82 83       	std	Z+2, r24	; 0x02
     8b4:	86 e2       	ldi	r24, 0x26	; 38
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	95 83       	std	Z+5, r25	; 0x05
     8ba:	84 83       	std	Z+4, r24	; 0x04
     8bc:	86 82       	std	Z+6, r8	; 0x06
     8be:	97 82       	std	Z+7, r9	; 0x07
     8c0:	a0 86       	std	Z+8, r10	; 0x08
     8c2:	b1 86       	std	Z+9, r11	; 0x09
     8c4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <snprintf>
	strcat(sendstr, curr);
     8c8:	8d b7       	in	r24, 0x3d	; 61
     8ca:	9e b7       	in	r25, 0x3e	; 62
     8cc:	0a 96       	adiw	r24, 0x0a	; 10
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	9e bf       	out	0x3e, r25	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	8d bf       	out	0x3d, r24	; 61
     8d8:	c8 01       	movw	r24, r16
     8da:	b7 01       	movw	r22, r14
     8dc:	0e 94 ce 06 	call	0xd9c	; 0xd9c <strcat>
	strcat(sendstr, "\r");
     8e0:	f8 01       	movw	r30, r16
     8e2:	01 90       	ld	r0, Z+
     8e4:	00 20       	and	r0, r0
     8e6:	e9 f7       	brne	.-6      	; 0x8e2 <sendValuesPC+0x110>
     8e8:	31 97       	sbiw	r30, 0x01	; 1
     8ea:	8d e0       	ldi	r24, 0x0D	; 13
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
	
	putStrPC(&sendstr);
     8f2:	c8 01       	movw	r24, r16
     8f4:	0e 94 c3 03 	call	0x786	; 0x786 <putStrPC>
	
	setCursorLCD(0,1);
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	0e 94 b1 02 	call	0x562	; 0x562 <setCursorLCD>
	writeLCD(sendstr);
     904:	c8 01       	movw	r24, r16
     906:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <writeLCD>
     90a:	a1 96       	adiw	r28, 0x21	; 33
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	08 95       	ret

0000092c <resetPeakDet>:
}

void resetPeakDet(void)			
	// POST: Resets current sensor peak detector
{
	PORTD |= 0b10000000;		// Drain stored voltage from peak detector
     92c:	5f 9a       	sbi	0x0b, 7	; 11
     92e:	8f e7       	ldi	r24, 0x7F	; 127
     930:	98 e3       	ldi	r25, 0x38	; 56
     932:	a1 e0       	ldi	r26, 0x01	; 1
     934:	81 50       	subi	r24, 0x01	; 1
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	a0 40       	sbci	r26, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <resetPeakDet+0x8>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <resetPeakDet+0x12>
     93e:	00 00       	nop
	_delay_ms(400);				// Wait long enough to discharge capacitor a
								//	significant amount
	PORTD &= ~0b10000000;		// Close NMOS to begin storing voltage
     940:	5f 98       	cbi	0x0b, 7	; 11
     942:	08 95       	ret

00000944 <initPeakDet>:
#include "peakdet.h"

void initPeakDet(void)			
	// POST: Sets up the pin(s) for output
{
	DDRD |= 0b10000000;			// Set PORTC pin 0 to output
     944:	57 9a       	sbi	0x0a, 7	; 10
	resetPeakDet();				// Initial reset of peak detector			
     946:	0e 94 96 04 	call	0x92c	; 0x92c <resetPeakDet>
}
     94a:	08 95       	ret

0000094c <interruptEnablePWM>:
#include "pwm.h"

void interruptEnablePWM(void)
	// POST: Enables PCINT2 at pin PORTC7, triggered at any edge
{
	DDRC &= ~(1 << DDC7);		// Set pin PORTC7 to output
     94c:	3f 98       	cbi	0x07, 7	; 7
	
	PORTC |= (1 << PORTC7);		// Enable internal pull-up resistor
     94e:	47 9a       	sbi	0x08, 7	; 8
	
	EICRA |= (1 << ISC00);		// Trigger interrupt on any edge
     950:	e9 e6       	ldi	r30, 0x69	; 105
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	81 60       	ori	r24, 0x01	; 1
     958:	80 83       	st	Z, r24
	
	PCICR |= (1 << PCIE2);		// Enable PCINT2
     95a:	e8 e6       	ldi	r30, 0x68	; 104
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	84 60       	ori	r24, 0x04	; 4
     962:	80 83       	st	Z, r24
	
	PCMSK2 |= (1 << PCINT23);	// Use PORTC7 for interrupt pin
     964:	ed e6       	ldi	r30, 0x6D	; 109
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	80 68       	ori	r24, 0x80	; 128
     96c:	80 83       	st	Z, r24
	
	sei();						// Enable interrupts globally
     96e:	78 94       	sei
     970:	08 95       	ret

00000972 <__subsf3>:
     972:	50 58       	subi	r21, 0x80	; 128

00000974 <__addsf3>:
     974:	bb 27       	eor	r27, r27
     976:	aa 27       	eor	r26, r26
     978:	0e d0       	rcall	.+28     	; 0x996 <__addsf3x>
     97a:	1c c1       	rjmp	.+568    	; 0xbb4 <__fp_round>
     97c:	0d d1       	rcall	.+538    	; 0xb98 <__fp_pscA>
     97e:	30 f0       	brcs	.+12     	; 0x98c <__addsf3+0x18>
     980:	12 d1       	rcall	.+548    	; 0xba6 <__fp_pscB>
     982:	20 f0       	brcs	.+8      	; 0x98c <__addsf3+0x18>
     984:	31 f4       	brne	.+12     	; 0x992 <__addsf3+0x1e>
     986:	9f 3f       	cpi	r25, 0xFF	; 255
     988:	11 f4       	brne	.+4      	; 0x98e <__addsf3+0x1a>
     98a:	1e f4       	brtc	.+6      	; 0x992 <__addsf3+0x1e>
     98c:	02 c1       	rjmp	.+516    	; 0xb92 <__fp_nan>
     98e:	0e f4       	brtc	.+2      	; 0x992 <__addsf3+0x1e>
     990:	e0 95       	com	r30
     992:	e7 fb       	bst	r30, 7
     994:	f8 c0       	rjmp	.+496    	; 0xb86 <__fp_inf>

00000996 <__addsf3x>:
     996:	e9 2f       	mov	r30, r25
     998:	1e d1       	rcall	.+572    	; 0xbd6 <__fp_split3>
     99a:	80 f3       	brcs	.-32     	; 0x97c <__addsf3+0x8>
     99c:	ba 17       	cp	r27, r26
     99e:	62 07       	cpc	r22, r18
     9a0:	73 07       	cpc	r23, r19
     9a2:	84 07       	cpc	r24, r20
     9a4:	95 07       	cpc	r25, r21
     9a6:	18 f0       	brcs	.+6      	; 0x9ae <__addsf3x+0x18>
     9a8:	71 f4       	brne	.+28     	; 0x9c6 <__addsf3x+0x30>
     9aa:	9e f5       	brtc	.+102    	; 0xa12 <__addsf3x+0x7c>
     9ac:	36 c1       	rjmp	.+620    	; 0xc1a <__fp_zero>
     9ae:	0e f4       	brtc	.+2      	; 0x9b2 <__addsf3x+0x1c>
     9b0:	e0 95       	com	r30
     9b2:	0b 2e       	mov	r0, r27
     9b4:	ba 2f       	mov	r27, r26
     9b6:	a0 2d       	mov	r26, r0
     9b8:	0b 01       	movw	r0, r22
     9ba:	b9 01       	movw	r22, r18
     9bc:	90 01       	movw	r18, r0
     9be:	0c 01       	movw	r0, r24
     9c0:	ca 01       	movw	r24, r20
     9c2:	a0 01       	movw	r20, r0
     9c4:	11 24       	eor	r1, r1
     9c6:	ff 27       	eor	r31, r31
     9c8:	59 1b       	sub	r21, r25
     9ca:	99 f0       	breq	.+38     	; 0x9f2 <__addsf3x+0x5c>
     9cc:	59 3f       	cpi	r21, 0xF9	; 249
     9ce:	50 f4       	brcc	.+20     	; 0x9e4 <__addsf3x+0x4e>
     9d0:	50 3e       	cpi	r21, 0xE0	; 224
     9d2:	68 f1       	brcs	.+90     	; 0xa2e <__addsf3x+0x98>
     9d4:	1a 16       	cp	r1, r26
     9d6:	f0 40       	sbci	r31, 0x00	; 0
     9d8:	a2 2f       	mov	r26, r18
     9da:	23 2f       	mov	r18, r19
     9dc:	34 2f       	mov	r19, r20
     9de:	44 27       	eor	r20, r20
     9e0:	58 5f       	subi	r21, 0xF8	; 248
     9e2:	f3 cf       	rjmp	.-26     	; 0x9ca <__addsf3x+0x34>
     9e4:	46 95       	lsr	r20
     9e6:	37 95       	ror	r19
     9e8:	27 95       	ror	r18
     9ea:	a7 95       	ror	r26
     9ec:	f0 40       	sbci	r31, 0x00	; 0
     9ee:	53 95       	inc	r21
     9f0:	c9 f7       	brne	.-14     	; 0x9e4 <__addsf3x+0x4e>
     9f2:	7e f4       	brtc	.+30     	; 0xa12 <__addsf3x+0x7c>
     9f4:	1f 16       	cp	r1, r31
     9f6:	ba 0b       	sbc	r27, r26
     9f8:	62 0b       	sbc	r22, r18
     9fa:	73 0b       	sbc	r23, r19
     9fc:	84 0b       	sbc	r24, r20
     9fe:	ba f0       	brmi	.+46     	; 0xa2e <__addsf3x+0x98>
     a00:	91 50       	subi	r25, 0x01	; 1
     a02:	a1 f0       	breq	.+40     	; 0xa2c <__addsf3x+0x96>
     a04:	ff 0f       	add	r31, r31
     a06:	bb 1f       	adc	r27, r27
     a08:	66 1f       	adc	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	88 1f       	adc	r24, r24
     a0e:	c2 f7       	brpl	.-16     	; 0xa00 <__addsf3x+0x6a>
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <__addsf3x+0x98>
     a12:	ba 0f       	add	r27, r26
     a14:	62 1f       	adc	r22, r18
     a16:	73 1f       	adc	r23, r19
     a18:	84 1f       	adc	r24, r20
     a1a:	48 f4       	brcc	.+18     	; 0xa2e <__addsf3x+0x98>
     a1c:	87 95       	ror	r24
     a1e:	77 95       	ror	r23
     a20:	67 95       	ror	r22
     a22:	b7 95       	ror	r27
     a24:	f7 95       	ror	r31
     a26:	9e 3f       	cpi	r25, 0xFE	; 254
     a28:	08 f0       	brcs	.+2      	; 0xa2c <__addsf3x+0x96>
     a2a:	b3 cf       	rjmp	.-154    	; 0x992 <__addsf3+0x1e>
     a2c:	93 95       	inc	r25
     a2e:	88 0f       	add	r24, r24
     a30:	08 f0       	brcs	.+2      	; 0xa34 <__addsf3x+0x9e>
     a32:	99 27       	eor	r25, r25
     a34:	ee 0f       	add	r30, r30
     a36:	97 95       	ror	r25
     a38:	87 95       	ror	r24
     a3a:	08 95       	ret

00000a3c <__divsf3>:
     a3c:	0c d0       	rcall	.+24     	; 0xa56 <__divsf3x>
     a3e:	ba c0       	rjmp	.+372    	; 0xbb4 <__fp_round>
     a40:	b2 d0       	rcall	.+356    	; 0xba6 <__fp_pscB>
     a42:	40 f0       	brcs	.+16     	; 0xa54 <__divsf3+0x18>
     a44:	a9 d0       	rcall	.+338    	; 0xb98 <__fp_pscA>
     a46:	30 f0       	brcs	.+12     	; 0xa54 <__divsf3+0x18>
     a48:	21 f4       	brne	.+8      	; 0xa52 <__divsf3+0x16>
     a4a:	5f 3f       	cpi	r21, 0xFF	; 255
     a4c:	19 f0       	breq	.+6      	; 0xa54 <__divsf3+0x18>
     a4e:	9b c0       	rjmp	.+310    	; 0xb86 <__fp_inf>
     a50:	51 11       	cpse	r21, r1
     a52:	e4 c0       	rjmp	.+456    	; 0xc1c <__fp_szero>
     a54:	9e c0       	rjmp	.+316    	; 0xb92 <__fp_nan>

00000a56 <__divsf3x>:
     a56:	bf d0       	rcall	.+382    	; 0xbd6 <__fp_split3>
     a58:	98 f3       	brcs	.-26     	; 0xa40 <__divsf3+0x4>

00000a5a <__divsf3_pse>:
     a5a:	99 23       	and	r25, r25
     a5c:	c9 f3       	breq	.-14     	; 0xa50 <__divsf3+0x14>
     a5e:	55 23       	and	r21, r21
     a60:	b1 f3       	breq	.-20     	; 0xa4e <__divsf3+0x12>
     a62:	95 1b       	sub	r25, r21
     a64:	55 0b       	sbc	r21, r21
     a66:	bb 27       	eor	r27, r27
     a68:	aa 27       	eor	r26, r26
     a6a:	62 17       	cp	r22, r18
     a6c:	73 07       	cpc	r23, r19
     a6e:	84 07       	cpc	r24, r20
     a70:	38 f0       	brcs	.+14     	; 0xa80 <__divsf3_pse+0x26>
     a72:	9f 5f       	subi	r25, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	22 0f       	add	r18, r18
     a78:	33 1f       	adc	r19, r19
     a7a:	44 1f       	adc	r20, r20
     a7c:	aa 1f       	adc	r26, r26
     a7e:	a9 f3       	breq	.-22     	; 0xa6a <__divsf3_pse+0x10>
     a80:	33 d0       	rcall	.+102    	; 0xae8 <__divsf3_pse+0x8e>
     a82:	0e 2e       	mov	r0, r30
     a84:	3a f0       	brmi	.+14     	; 0xa94 <__divsf3_pse+0x3a>
     a86:	e0 e8       	ldi	r30, 0x80	; 128
     a88:	30 d0       	rcall	.+96     	; 0xaea <__divsf3_pse+0x90>
     a8a:	91 50       	subi	r25, 0x01	; 1
     a8c:	50 40       	sbci	r21, 0x00	; 0
     a8e:	e6 95       	lsr	r30
     a90:	00 1c       	adc	r0, r0
     a92:	ca f7       	brpl	.-14     	; 0xa86 <__divsf3_pse+0x2c>
     a94:	29 d0       	rcall	.+82     	; 0xae8 <__divsf3_pse+0x8e>
     a96:	fe 2f       	mov	r31, r30
     a98:	27 d0       	rcall	.+78     	; 0xae8 <__divsf3_pse+0x8e>
     a9a:	66 0f       	add	r22, r22
     a9c:	77 1f       	adc	r23, r23
     a9e:	88 1f       	adc	r24, r24
     aa0:	bb 1f       	adc	r27, r27
     aa2:	26 17       	cp	r18, r22
     aa4:	37 07       	cpc	r19, r23
     aa6:	48 07       	cpc	r20, r24
     aa8:	ab 07       	cpc	r26, r27
     aaa:	b0 e8       	ldi	r27, 0x80	; 128
     aac:	09 f0       	breq	.+2      	; 0xab0 <__divsf3_pse+0x56>
     aae:	bb 0b       	sbc	r27, r27
     ab0:	80 2d       	mov	r24, r0
     ab2:	bf 01       	movw	r22, r30
     ab4:	ff 27       	eor	r31, r31
     ab6:	93 58       	subi	r25, 0x83	; 131
     ab8:	5f 4f       	sbci	r21, 0xFF	; 255
     aba:	2a f0       	brmi	.+10     	; 0xac6 <__divsf3_pse+0x6c>
     abc:	9e 3f       	cpi	r25, 0xFE	; 254
     abe:	51 05       	cpc	r21, r1
     ac0:	68 f0       	brcs	.+26     	; 0xadc <__divsf3_pse+0x82>
     ac2:	61 c0       	rjmp	.+194    	; 0xb86 <__fp_inf>
     ac4:	ab c0       	rjmp	.+342    	; 0xc1c <__fp_szero>
     ac6:	5f 3f       	cpi	r21, 0xFF	; 255
     ac8:	ec f3       	brlt	.-6      	; 0xac4 <__divsf3_pse+0x6a>
     aca:	98 3e       	cpi	r25, 0xE8	; 232
     acc:	dc f3       	brlt	.-10     	; 0xac4 <__divsf3_pse+0x6a>
     ace:	86 95       	lsr	r24
     ad0:	77 95       	ror	r23
     ad2:	67 95       	ror	r22
     ad4:	b7 95       	ror	r27
     ad6:	f7 95       	ror	r31
     ad8:	9f 5f       	subi	r25, 0xFF	; 255
     ada:	c9 f7       	brne	.-14     	; 0xace <__divsf3_pse+0x74>
     adc:	88 0f       	add	r24, r24
     ade:	91 1d       	adc	r25, r1
     ae0:	96 95       	lsr	r25
     ae2:	87 95       	ror	r24
     ae4:	97 f9       	bld	r25, 7
     ae6:	08 95       	ret
     ae8:	e1 e0       	ldi	r30, 0x01	; 1
     aea:	66 0f       	add	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	88 1f       	adc	r24, r24
     af0:	bb 1f       	adc	r27, r27
     af2:	62 17       	cp	r22, r18
     af4:	73 07       	cpc	r23, r19
     af6:	84 07       	cpc	r24, r20
     af8:	ba 07       	cpc	r27, r26
     afa:	20 f0       	brcs	.+8      	; 0xb04 <__divsf3_pse+0xaa>
     afc:	62 1b       	sub	r22, r18
     afe:	73 0b       	sbc	r23, r19
     b00:	84 0b       	sbc	r24, r20
     b02:	ba 0b       	sbc	r27, r26
     b04:	ee 1f       	adc	r30, r30
     b06:	88 f7       	brcc	.-30     	; 0xaea <__divsf3_pse+0x90>
     b08:	e0 95       	com	r30
     b0a:	08 95       	ret

00000b0c <__floatunsisf>:
     b0c:	e8 94       	clt
     b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__floatsisf+0x12>

00000b10 <__floatsisf>:
     b10:	97 fb       	bst	r25, 7
     b12:	3e f4       	brtc	.+14     	; 0xb22 <__floatsisf+0x12>
     b14:	90 95       	com	r25
     b16:	80 95       	com	r24
     b18:	70 95       	com	r23
     b1a:	61 95       	neg	r22
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	8f 4f       	sbci	r24, 0xFF	; 255
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	99 23       	and	r25, r25
     b24:	a9 f0       	breq	.+42     	; 0xb50 <__floatsisf+0x40>
     b26:	f9 2f       	mov	r31, r25
     b28:	96 e9       	ldi	r25, 0x96	; 150
     b2a:	bb 27       	eor	r27, r27
     b2c:	93 95       	inc	r25
     b2e:	f6 95       	lsr	r31
     b30:	87 95       	ror	r24
     b32:	77 95       	ror	r23
     b34:	67 95       	ror	r22
     b36:	b7 95       	ror	r27
     b38:	f1 11       	cpse	r31, r1
     b3a:	f8 cf       	rjmp	.-16     	; 0xb2c <__floatsisf+0x1c>
     b3c:	fa f4       	brpl	.+62     	; 0xb7c <__floatsisf+0x6c>
     b3e:	bb 0f       	add	r27, r27
     b40:	11 f4       	brne	.+4      	; 0xb46 <__floatsisf+0x36>
     b42:	60 ff       	sbrs	r22, 0
     b44:	1b c0       	rjmp	.+54     	; 0xb7c <__floatsisf+0x6c>
     b46:	6f 5f       	subi	r22, 0xFF	; 255
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	8f 4f       	sbci	r24, 0xFF	; 255
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	16 c0       	rjmp	.+44     	; 0xb7c <__floatsisf+0x6c>
     b50:	88 23       	and	r24, r24
     b52:	11 f0       	breq	.+4      	; 0xb58 <__floatsisf+0x48>
     b54:	96 e9       	ldi	r25, 0x96	; 150
     b56:	11 c0       	rjmp	.+34     	; 0xb7a <__floatsisf+0x6a>
     b58:	77 23       	and	r23, r23
     b5a:	21 f0       	breq	.+8      	; 0xb64 <__floatsisf+0x54>
     b5c:	9e e8       	ldi	r25, 0x8E	; 142
     b5e:	87 2f       	mov	r24, r23
     b60:	76 2f       	mov	r23, r22
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <__floatsisf+0x5e>
     b64:	66 23       	and	r22, r22
     b66:	71 f0       	breq	.+28     	; 0xb84 <__floatsisf+0x74>
     b68:	96 e8       	ldi	r25, 0x86	; 134
     b6a:	86 2f       	mov	r24, r22
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	2a f0       	brmi	.+10     	; 0xb7c <__floatsisf+0x6c>
     b72:	9a 95       	dec	r25
     b74:	66 0f       	add	r22, r22
     b76:	77 1f       	adc	r23, r23
     b78:	88 1f       	adc	r24, r24
     b7a:	da f7       	brpl	.-10     	; 0xb72 <__floatsisf+0x62>
     b7c:	88 0f       	add	r24, r24
     b7e:	96 95       	lsr	r25
     b80:	87 95       	ror	r24
     b82:	97 f9       	bld	r25, 7
     b84:	08 95       	ret

00000b86 <__fp_inf>:
     b86:	97 f9       	bld	r25, 7
     b88:	9f 67       	ori	r25, 0x7F	; 127
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	08 95       	ret

00000b92 <__fp_nan>:
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	80 ec       	ldi	r24, 0xC0	; 192
     b96:	08 95       	ret

00000b98 <__fp_pscA>:
     b98:	00 24       	eor	r0, r0
     b9a:	0a 94       	dec	r0
     b9c:	16 16       	cp	r1, r22
     b9e:	17 06       	cpc	r1, r23
     ba0:	18 06       	cpc	r1, r24
     ba2:	09 06       	cpc	r0, r25
     ba4:	08 95       	ret

00000ba6 <__fp_pscB>:
     ba6:	00 24       	eor	r0, r0
     ba8:	0a 94       	dec	r0
     baa:	12 16       	cp	r1, r18
     bac:	13 06       	cpc	r1, r19
     bae:	14 06       	cpc	r1, r20
     bb0:	05 06       	cpc	r0, r21
     bb2:	08 95       	ret

00000bb4 <__fp_round>:
     bb4:	09 2e       	mov	r0, r25
     bb6:	03 94       	inc	r0
     bb8:	00 0c       	add	r0, r0
     bba:	11 f4       	brne	.+4      	; 0xbc0 <__fp_round+0xc>
     bbc:	88 23       	and	r24, r24
     bbe:	52 f0       	brmi	.+20     	; 0xbd4 <__fp_round+0x20>
     bc0:	bb 0f       	add	r27, r27
     bc2:	40 f4       	brcc	.+16     	; 0xbd4 <__fp_round+0x20>
     bc4:	bf 2b       	or	r27, r31
     bc6:	11 f4       	brne	.+4      	; 0xbcc <__fp_round+0x18>
     bc8:	60 ff       	sbrs	r22, 0
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__fp_round+0x20>
     bcc:	6f 5f       	subi	r22, 0xFF	; 255
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 4f       	sbci	r24, 0xFF	; 255
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	08 95       	ret

00000bd6 <__fp_split3>:
     bd6:	57 fd       	sbrc	r21, 7
     bd8:	90 58       	subi	r25, 0x80	; 128
     bda:	44 0f       	add	r20, r20
     bdc:	55 1f       	adc	r21, r21
     bde:	59 f0       	breq	.+22     	; 0xbf6 <__fp_splitA+0x10>
     be0:	5f 3f       	cpi	r21, 0xFF	; 255
     be2:	71 f0       	breq	.+28     	; 0xc00 <__fp_splitA+0x1a>
     be4:	47 95       	ror	r20

00000be6 <__fp_splitA>:
     be6:	88 0f       	add	r24, r24
     be8:	97 fb       	bst	r25, 7
     bea:	99 1f       	adc	r25, r25
     bec:	61 f0       	breq	.+24     	; 0xc06 <__fp_splitA+0x20>
     bee:	9f 3f       	cpi	r25, 0xFF	; 255
     bf0:	79 f0       	breq	.+30     	; 0xc10 <__fp_splitA+0x2a>
     bf2:	87 95       	ror	r24
     bf4:	08 95       	ret
     bf6:	12 16       	cp	r1, r18
     bf8:	13 06       	cpc	r1, r19
     bfa:	14 06       	cpc	r1, r20
     bfc:	55 1f       	adc	r21, r21
     bfe:	f2 cf       	rjmp	.-28     	; 0xbe4 <__fp_split3+0xe>
     c00:	46 95       	lsr	r20
     c02:	f1 df       	rcall	.-30     	; 0xbe6 <__fp_splitA>
     c04:	08 c0       	rjmp	.+16     	; 0xc16 <__fp_splitA+0x30>
     c06:	16 16       	cp	r1, r22
     c08:	17 06       	cpc	r1, r23
     c0a:	18 06       	cpc	r1, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	f1 cf       	rjmp	.-30     	; 0xbf2 <__fp_splitA+0xc>
     c10:	86 95       	lsr	r24
     c12:	71 05       	cpc	r23, r1
     c14:	61 05       	cpc	r22, r1
     c16:	08 94       	sec
     c18:	08 95       	ret

00000c1a <__fp_zero>:
     c1a:	e8 94       	clt

00000c1c <__fp_szero>:
     c1c:	bb 27       	eor	r27, r27
     c1e:	66 27       	eor	r22, r22
     c20:	77 27       	eor	r23, r23
     c22:	cb 01       	movw	r24, r22
     c24:	97 f9       	bld	r25, 7
     c26:	08 95       	ret

00000c28 <__mulsf3>:
     c28:	0b d0       	rcall	.+22     	; 0xc40 <__mulsf3x>
     c2a:	c4 cf       	rjmp	.-120    	; 0xbb4 <__fp_round>
     c2c:	b5 df       	rcall	.-150    	; 0xb98 <__fp_pscA>
     c2e:	28 f0       	brcs	.+10     	; 0xc3a <__mulsf3+0x12>
     c30:	ba df       	rcall	.-140    	; 0xba6 <__fp_pscB>
     c32:	18 f0       	brcs	.+6      	; 0xc3a <__mulsf3+0x12>
     c34:	95 23       	and	r25, r21
     c36:	09 f0       	breq	.+2      	; 0xc3a <__mulsf3+0x12>
     c38:	a6 cf       	rjmp	.-180    	; 0xb86 <__fp_inf>
     c3a:	ab cf       	rjmp	.-170    	; 0xb92 <__fp_nan>
     c3c:	11 24       	eor	r1, r1
     c3e:	ee cf       	rjmp	.-36     	; 0xc1c <__fp_szero>

00000c40 <__mulsf3x>:
     c40:	ca df       	rcall	.-108    	; 0xbd6 <__fp_split3>
     c42:	a0 f3       	brcs	.-24     	; 0xc2c <__mulsf3+0x4>

00000c44 <__mulsf3_pse>:
     c44:	95 9f       	mul	r25, r21
     c46:	d1 f3       	breq	.-12     	; 0xc3c <__mulsf3+0x14>
     c48:	95 0f       	add	r25, r21
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	55 1f       	adc	r21, r21
     c4e:	62 9f       	mul	r22, r18
     c50:	f0 01       	movw	r30, r0
     c52:	72 9f       	mul	r23, r18
     c54:	bb 27       	eor	r27, r27
     c56:	f0 0d       	add	r31, r0
     c58:	b1 1d       	adc	r27, r1
     c5a:	63 9f       	mul	r22, r19
     c5c:	aa 27       	eor	r26, r26
     c5e:	f0 0d       	add	r31, r0
     c60:	b1 1d       	adc	r27, r1
     c62:	aa 1f       	adc	r26, r26
     c64:	64 9f       	mul	r22, r20
     c66:	66 27       	eor	r22, r22
     c68:	b0 0d       	add	r27, r0
     c6a:	a1 1d       	adc	r26, r1
     c6c:	66 1f       	adc	r22, r22
     c6e:	82 9f       	mul	r24, r18
     c70:	22 27       	eor	r18, r18
     c72:	b0 0d       	add	r27, r0
     c74:	a1 1d       	adc	r26, r1
     c76:	62 1f       	adc	r22, r18
     c78:	73 9f       	mul	r23, r19
     c7a:	b0 0d       	add	r27, r0
     c7c:	a1 1d       	adc	r26, r1
     c7e:	62 1f       	adc	r22, r18
     c80:	83 9f       	mul	r24, r19
     c82:	a0 0d       	add	r26, r0
     c84:	61 1d       	adc	r22, r1
     c86:	22 1f       	adc	r18, r18
     c88:	74 9f       	mul	r23, r20
     c8a:	33 27       	eor	r19, r19
     c8c:	a0 0d       	add	r26, r0
     c8e:	61 1d       	adc	r22, r1
     c90:	23 1f       	adc	r18, r19
     c92:	84 9f       	mul	r24, r20
     c94:	60 0d       	add	r22, r0
     c96:	21 1d       	adc	r18, r1
     c98:	82 2f       	mov	r24, r18
     c9a:	76 2f       	mov	r23, r22
     c9c:	6a 2f       	mov	r22, r26
     c9e:	11 24       	eor	r1, r1
     ca0:	9f 57       	subi	r25, 0x7F	; 127
     ca2:	50 40       	sbci	r21, 0x00	; 0
     ca4:	8a f0       	brmi	.+34     	; 0xcc8 <__mulsf3_pse+0x84>
     ca6:	e1 f0       	breq	.+56     	; 0xce0 <__mulsf3_pse+0x9c>
     ca8:	88 23       	and	r24, r24
     caa:	4a f0       	brmi	.+18     	; 0xcbe <__mulsf3_pse+0x7a>
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	bb 1f       	adc	r27, r27
     cb2:	66 1f       	adc	r22, r22
     cb4:	77 1f       	adc	r23, r23
     cb6:	88 1f       	adc	r24, r24
     cb8:	91 50       	subi	r25, 0x01	; 1
     cba:	50 40       	sbci	r21, 0x00	; 0
     cbc:	a9 f7       	brne	.-22     	; 0xca8 <__mulsf3_pse+0x64>
     cbe:	9e 3f       	cpi	r25, 0xFE	; 254
     cc0:	51 05       	cpc	r21, r1
     cc2:	70 f0       	brcs	.+28     	; 0xce0 <__mulsf3_pse+0x9c>
     cc4:	60 cf       	rjmp	.-320    	; 0xb86 <__fp_inf>
     cc6:	aa cf       	rjmp	.-172    	; 0xc1c <__fp_szero>
     cc8:	5f 3f       	cpi	r21, 0xFF	; 255
     cca:	ec f3       	brlt	.-6      	; 0xcc6 <__mulsf3_pse+0x82>
     ccc:	98 3e       	cpi	r25, 0xE8	; 232
     cce:	dc f3       	brlt	.-10     	; 0xcc6 <__mulsf3_pse+0x82>
     cd0:	86 95       	lsr	r24
     cd2:	77 95       	ror	r23
     cd4:	67 95       	ror	r22
     cd6:	b7 95       	ror	r27
     cd8:	f7 95       	ror	r31
     cda:	e7 95       	ror	r30
     cdc:	9f 5f       	subi	r25, 0xFF	; 255
     cde:	c1 f7       	brne	.-16     	; 0xcd0 <__mulsf3_pse+0x8c>
     ce0:	fe 2b       	or	r31, r30
     ce2:	88 0f       	add	r24, r24
     ce4:	91 1d       	adc	r25, r1
     ce6:	96 95       	lsr	r25
     ce8:	87 95       	ror	r24
     cea:	97 f9       	bld	r25, 7
     cec:	08 95       	ret
     cee:	11 f4       	brne	.+4      	; 0xcf4 <__mulsf3_pse+0xb0>
     cf0:	0e f4       	brtc	.+2      	; 0xcf4 <__mulsf3_pse+0xb0>
     cf2:	4f cf       	rjmp	.-354    	; 0xb92 <__fp_nan>
     cf4:	3e c0       	rjmp	.+124    	; 0xd72 <__fp_mpack>

00000cf6 <sqrt>:
     cf6:	77 df       	rcall	.-274    	; 0xbe6 <__fp_splitA>
     cf8:	d0 f3       	brcs	.-12     	; 0xcee <__mulsf3_pse+0xaa>
     cfa:	99 23       	and	r25, r25
     cfc:	d9 f3       	breq	.-10     	; 0xcf4 <__mulsf3_pse+0xb0>
     cfe:	ce f3       	brts	.-14     	; 0xcf2 <__mulsf3_pse+0xae>
     d00:	9f 57       	subi	r25, 0x7F	; 127
     d02:	55 0b       	sbc	r21, r21
     d04:	87 ff       	sbrs	r24, 7
     d06:	43 d0       	rcall	.+134    	; 0xd8e <__fp_norm2>
     d08:	00 24       	eor	r0, r0
     d0a:	a0 e6       	ldi	r26, 0x60	; 96
     d0c:	40 ea       	ldi	r20, 0xA0	; 160
     d0e:	90 01       	movw	r18, r0
     d10:	80 58       	subi	r24, 0x80	; 128
     d12:	56 95       	lsr	r21
     d14:	97 95       	ror	r25
     d16:	28 f4       	brcc	.+10     	; 0xd22 <sqrt+0x2c>
     d18:	80 5c       	subi	r24, 0xC0	; 192
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	20 f0       	brcs	.+8      	; 0xd2a <sqrt+0x34>
     d22:	26 17       	cp	r18, r22
     d24:	37 07       	cpc	r19, r23
     d26:	48 07       	cpc	r20, r24
     d28:	30 f4       	brcc	.+12     	; 0xd36 <sqrt+0x40>
     d2a:	62 1b       	sub	r22, r18
     d2c:	73 0b       	sbc	r23, r19
     d2e:	84 0b       	sbc	r24, r20
     d30:	20 29       	or	r18, r0
     d32:	31 29       	or	r19, r1
     d34:	4a 2b       	or	r20, r26
     d36:	a6 95       	lsr	r26
     d38:	17 94       	ror	r1
     d3a:	07 94       	ror	r0
     d3c:	20 25       	eor	r18, r0
     d3e:	31 25       	eor	r19, r1
     d40:	4a 27       	eor	r20, r26
     d42:	58 f7       	brcc	.-42     	; 0xd1a <sqrt+0x24>
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	88 1f       	adc	r24, r24
     d4a:	20 f0       	brcs	.+8      	; 0xd54 <sqrt+0x5e>
     d4c:	26 17       	cp	r18, r22
     d4e:	37 07       	cpc	r19, r23
     d50:	48 07       	cpc	r20, r24
     d52:	30 f4       	brcc	.+12     	; 0xd60 <sqrt+0x6a>
     d54:	62 0b       	sbc	r22, r18
     d56:	73 0b       	sbc	r23, r19
     d58:	84 0b       	sbc	r24, r20
     d5a:	20 0d       	add	r18, r0
     d5c:	31 1d       	adc	r19, r1
     d5e:	41 1d       	adc	r20, r1
     d60:	a0 95       	com	r26
     d62:	81 f7       	brne	.-32     	; 0xd44 <sqrt+0x4e>
     d64:	b9 01       	movw	r22, r18
     d66:	84 2f       	mov	r24, r20
     d68:	91 58       	subi	r25, 0x81	; 129
     d6a:	88 0f       	add	r24, r24
     d6c:	96 95       	lsr	r25
     d6e:	87 95       	ror	r24
     d70:	08 95       	ret

00000d72 <__fp_mpack>:
     d72:	9f 3f       	cpi	r25, 0xFF	; 255
     d74:	31 f0       	breq	.+12     	; 0xd82 <__fp_mpack_finite+0xc>

00000d76 <__fp_mpack_finite>:
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	20 f4       	brcc	.+8      	; 0xd82 <__fp_mpack_finite+0xc>
     d7a:	87 95       	ror	r24
     d7c:	77 95       	ror	r23
     d7e:	67 95       	ror	r22
     d80:	b7 95       	ror	r27
     d82:	88 0f       	add	r24, r24
     d84:	91 1d       	adc	r25, r1
     d86:	96 95       	lsr	r25
     d88:	87 95       	ror	r24
     d8a:	97 f9       	bld	r25, 7
     d8c:	08 95       	ret

00000d8e <__fp_norm2>:
     d8e:	91 50       	subi	r25, 0x01	; 1
     d90:	50 40       	sbci	r21, 0x00	; 0
     d92:	66 0f       	add	r22, r22
     d94:	77 1f       	adc	r23, r23
     d96:	88 1f       	adc	r24, r24
     d98:	d2 f7       	brpl	.-12     	; 0xd8e <__fp_norm2>
     d9a:	08 95       	ret

00000d9c <strcat>:
     d9c:	fb 01       	movw	r30, r22
     d9e:	dc 01       	movw	r26, r24
     da0:	0d 90       	ld	r0, X+
     da2:	00 20       	and	r0, r0
     da4:	e9 f7       	brne	.-6      	; 0xda0 <strcat+0x4>
     da6:	11 97       	sbiw	r26, 0x01	; 1
     da8:	01 90       	ld	r0, Z+
     daa:	0d 92       	st	X+, r0
     dac:	00 20       	and	r0, r0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <strcat+0xc>
     db0:	08 95       	ret

00000db2 <snprintf>:
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	2e 97       	sbiw	r28, 0x0e	; 14
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	0d 89       	ldd	r16, Y+21	; 0x15
     dcc:	1e 89       	ldd	r17, Y+22	; 0x16
     dce:	8f 89       	ldd	r24, Y+23	; 0x17
     dd0:	98 8d       	ldd	r25, Y+24	; 0x18
     dd2:	26 e0       	ldi	r18, 0x06	; 6
     dd4:	2c 83       	std	Y+4, r18	; 0x04
     dd6:	1a 83       	std	Y+2, r17	; 0x02
     dd8:	09 83       	std	Y+1, r16	; 0x01
     dda:	97 ff       	sbrs	r25, 7
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <snprintf+0x30>
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e8       	ldi	r25, 0x80	; 128
     de2:	01 97       	sbiw	r24, 0x01	; 1
     de4:	9e 83       	std	Y+6, r25	; 0x06
     de6:	8d 83       	std	Y+5, r24	; 0x05
     de8:	ae 01       	movw	r20, r28
     dea:	45 5e       	subi	r20, 0xE5	; 229
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	69 8d       	ldd	r22, Y+25	; 0x19
     df4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df6:	0e 94 16 07 	call	0xe2c	; 0xe2c <vfprintf>
     dfa:	4d 81       	ldd	r20, Y+5	; 0x05
     dfc:	5e 81       	ldd	r21, Y+6	; 0x06
     dfe:	57 fd       	sbrc	r21, 7
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <snprintf+0x64>
     e02:	2f 81       	ldd	r18, Y+7	; 0x07
     e04:	38 85       	ldd	r19, Y+8	; 0x08
     e06:	42 17       	cp	r20, r18
     e08:	53 07       	cpc	r21, r19
     e0a:	0c f4       	brge	.+2      	; 0xe0e <snprintf+0x5c>
     e0c:	9a 01       	movw	r18, r20
     e0e:	02 0f       	add	r16, r18
     e10:	13 1f       	adc	r17, r19
     e12:	f8 01       	movw	r30, r16
     e14:	10 82       	st	Z, r1
     e16:	2e 96       	adiw	r28, 0x0e	; 14
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <vfprintf>:
     e2c:	2f 92       	push	r2
     e2e:	3f 92       	push	r3
     e30:	4f 92       	push	r4
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2d 97       	sbiw	r28, 0x0d	; 13
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	3c 01       	movw	r6, r24
     e62:	7d 87       	std	Y+13, r23	; 0x0d
     e64:	6c 87       	std	Y+12, r22	; 0x0c
     e66:	5a 01       	movw	r10, r20
     e68:	fc 01       	movw	r30, r24
     e6a:	17 82       	std	Z+7, r1	; 0x07
     e6c:	16 82       	std	Z+6, r1	; 0x06
     e6e:	83 81       	ldd	r24, Z+3	; 0x03
     e70:	81 ff       	sbrs	r24, 1
     e72:	c8 c1       	rjmp	.+912    	; 0x1204 <vfprintf+0x3d8>
     e74:	2e 01       	movw	r4, r28
     e76:	08 94       	sec
     e78:	41 1c       	adc	r4, r1
     e7a:	51 1c       	adc	r5, r1
     e7c:	f3 01       	movw	r30, r6
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	ec 85       	ldd	r30, Y+12	; 0x0c
     e82:	fd 85       	ldd	r31, Y+13	; 0x0d
     e84:	93 fd       	sbrc	r25, 3
     e86:	85 91       	lpm	r24, Z+
     e88:	93 ff       	sbrs	r25, 3
     e8a:	81 91       	ld	r24, Z+
     e8c:	fd 87       	std	Y+13, r31	; 0x0d
     e8e:	ec 87       	std	Y+12, r30	; 0x0c
     e90:	88 23       	and	r24, r24
     e92:	09 f4       	brne	.+2      	; 0xe96 <vfprintf+0x6a>
     e94:	b3 c1       	rjmp	.+870    	; 0x11fc <vfprintf+0x3d0>
     e96:	85 32       	cpi	r24, 0x25	; 37
     e98:	41 f4       	brne	.+16     	; 0xeaa <vfprintf+0x7e>
     e9a:	93 fd       	sbrc	r25, 3
     e9c:	85 91       	lpm	r24, Z+
     e9e:	93 ff       	sbrs	r25, 3
     ea0:	81 91       	ld	r24, Z+
     ea2:	fd 87       	std	Y+13, r31	; 0x0d
     ea4:	ec 87       	std	Y+12, r30	; 0x0c
     ea6:	85 32       	cpi	r24, 0x25	; 37
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <vfprintf+0x88>
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	b3 01       	movw	r22, r6
     eae:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     eb2:	e4 cf       	rjmp	.-56     	; 0xe7c <vfprintf+0x50>
     eb4:	ff 24       	eor	r15, r15
     eb6:	ee 24       	eor	r14, r14
     eb8:	10 e0       	ldi	r17, 0x00	; 0
     eba:	10 32       	cpi	r17, 0x20	; 32
     ebc:	b0 f4       	brcc	.+44     	; 0xeea <vfprintf+0xbe>
     ebe:	8b 32       	cpi	r24, 0x2B	; 43
     ec0:	69 f0       	breq	.+26     	; 0xedc <vfprintf+0xb0>
     ec2:	8c 32       	cpi	r24, 0x2C	; 44
     ec4:	28 f4       	brcc	.+10     	; 0xed0 <vfprintf+0xa4>
     ec6:	80 32       	cpi	r24, 0x20	; 32
     ec8:	51 f0       	breq	.+20     	; 0xede <vfprintf+0xb2>
     eca:	83 32       	cpi	r24, 0x23	; 35
     ecc:	71 f4       	brne	.+28     	; 0xeea <vfprintf+0xbe>
     ece:	0b c0       	rjmp	.+22     	; 0xee6 <vfprintf+0xba>
     ed0:	8d 32       	cpi	r24, 0x2D	; 45
     ed2:	39 f0       	breq	.+14     	; 0xee2 <vfprintf+0xb6>
     ed4:	80 33       	cpi	r24, 0x30	; 48
     ed6:	49 f4       	brne	.+18     	; 0xeea <vfprintf+0xbe>
     ed8:	11 60       	ori	r17, 0x01	; 1
     eda:	2c c0       	rjmp	.+88     	; 0xf34 <vfprintf+0x108>
     edc:	12 60       	ori	r17, 0x02	; 2
     ede:	14 60       	ori	r17, 0x04	; 4
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <vfprintf+0x108>
     ee2:	18 60       	ori	r17, 0x08	; 8
     ee4:	27 c0       	rjmp	.+78     	; 0xf34 <vfprintf+0x108>
     ee6:	10 61       	ori	r17, 0x10	; 16
     ee8:	25 c0       	rjmp	.+74     	; 0xf34 <vfprintf+0x108>
     eea:	17 fd       	sbrc	r17, 7
     eec:	2e c0       	rjmp	.+92     	; 0xf4a <vfprintf+0x11e>
     eee:	28 2f       	mov	r18, r24
     ef0:	20 53       	subi	r18, 0x30	; 48
     ef2:	2a 30       	cpi	r18, 0x0A	; 10
     ef4:	98 f4       	brcc	.+38     	; 0xf1c <vfprintf+0xf0>
     ef6:	16 ff       	sbrs	r17, 6
     ef8:	08 c0       	rjmp	.+16     	; 0xf0a <vfprintf+0xde>
     efa:	8f 2d       	mov	r24, r15
     efc:	88 0f       	add	r24, r24
     efe:	f8 2e       	mov	r15, r24
     f00:	ff 0c       	add	r15, r15
     f02:	ff 0c       	add	r15, r15
     f04:	f8 0e       	add	r15, r24
     f06:	f2 0e       	add	r15, r18
     f08:	15 c0       	rjmp	.+42     	; 0xf34 <vfprintf+0x108>
     f0a:	8e 2d       	mov	r24, r14
     f0c:	88 0f       	add	r24, r24
     f0e:	e8 2e       	mov	r14, r24
     f10:	ee 0c       	add	r14, r14
     f12:	ee 0c       	add	r14, r14
     f14:	e8 0e       	add	r14, r24
     f16:	e2 0e       	add	r14, r18
     f18:	10 62       	ori	r17, 0x20	; 32
     f1a:	0c c0       	rjmp	.+24     	; 0xf34 <vfprintf+0x108>
     f1c:	8e 32       	cpi	r24, 0x2E	; 46
     f1e:	21 f4       	brne	.+8      	; 0xf28 <vfprintf+0xfc>
     f20:	16 fd       	sbrc	r17, 6
     f22:	6c c1       	rjmp	.+728    	; 0x11fc <vfprintf+0x3d0>
     f24:	10 64       	ori	r17, 0x40	; 64
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <vfprintf+0x108>
     f28:	8c 36       	cpi	r24, 0x6C	; 108
     f2a:	11 f4       	brne	.+4      	; 0xf30 <vfprintf+0x104>
     f2c:	10 68       	ori	r17, 0x80	; 128
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x108>
     f30:	88 36       	cpi	r24, 0x68	; 104
     f32:	59 f4       	brne	.+22     	; 0xf4a <vfprintf+0x11e>
     f34:	ec 85       	ldd	r30, Y+12	; 0x0c
     f36:	fd 85       	ldd	r31, Y+13	; 0x0d
     f38:	93 fd       	sbrc	r25, 3
     f3a:	85 91       	lpm	r24, Z+
     f3c:	93 ff       	sbrs	r25, 3
     f3e:	81 91       	ld	r24, Z+
     f40:	fd 87       	std	Y+13, r31	; 0x0d
     f42:	ec 87       	std	Y+12, r30	; 0x0c
     f44:	88 23       	and	r24, r24
     f46:	09 f0       	breq	.+2      	; 0xf4a <vfprintf+0x11e>
     f48:	b8 cf       	rjmp	.-144    	; 0xeba <vfprintf+0x8e>
     f4a:	98 2f       	mov	r25, r24
     f4c:	95 54       	subi	r25, 0x45	; 69
     f4e:	93 30       	cpi	r25, 0x03	; 3
     f50:	18 f0       	brcs	.+6      	; 0xf58 <vfprintf+0x12c>
     f52:	90 52       	subi	r25, 0x20	; 32
     f54:	93 30       	cpi	r25, 0x03	; 3
     f56:	38 f4       	brcc	.+14     	; 0xf66 <vfprintf+0x13a>
     f58:	24 e0       	ldi	r18, 0x04	; 4
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	a2 0e       	add	r10, r18
     f5e:	b3 1e       	adc	r11, r19
     f60:	3f e3       	ldi	r19, 0x3F	; 63
     f62:	39 83       	std	Y+1, r19	; 0x01
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <vfprintf+0x158>
     f66:	83 36       	cpi	r24, 0x63	; 99
     f68:	31 f0       	breq	.+12     	; 0xf76 <vfprintf+0x14a>
     f6a:	83 37       	cpi	r24, 0x73	; 115
     f6c:	81 f0       	breq	.+32     	; 0xf8e <vfprintf+0x162>
     f6e:	83 35       	cpi	r24, 0x53	; 83
     f70:	09 f0       	breq	.+2      	; 0xf74 <vfprintf+0x148>
     f72:	5a c0       	rjmp	.+180    	; 0x1028 <vfprintf+0x1fc>
     f74:	22 c0       	rjmp	.+68     	; 0xfba <vfprintf+0x18e>
     f76:	f5 01       	movw	r30, r10
     f78:	80 81       	ld	r24, Z
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	22 e0       	ldi	r18, 0x02	; 2
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	a2 0e       	add	r10, r18
     f82:	b3 1e       	adc	r11, r19
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	c2 2e       	mov	r12, r18
     f88:	d1 2c       	mov	r13, r1
     f8a:	42 01       	movw	r8, r4
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <vfprintf+0x18a>
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	29 2e       	mov	r2, r25
     f92:	31 2c       	mov	r3, r1
     f94:	2a 0c       	add	r2, r10
     f96:	3b 1c       	adc	r3, r11
     f98:	f5 01       	movw	r30, r10
     f9a:	80 80       	ld	r8, Z
     f9c:	91 80       	ldd	r9, Z+1	; 0x01
     f9e:	16 ff       	sbrs	r17, 6
     fa0:	03 c0       	rjmp	.+6      	; 0xfa8 <vfprintf+0x17c>
     fa2:	6f 2d       	mov	r22, r15
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <vfprintf+0x180>
     fa8:	6f ef       	ldi	r22, 0xFF	; 255
     faa:	7f ef       	ldi	r23, 0xFF	; 255
     fac:	c4 01       	movw	r24, r8
     fae:	0e 94 28 09 	call	0x1250	; 0x1250 <strnlen>
     fb2:	6c 01       	movw	r12, r24
     fb4:	51 01       	movw	r10, r2
     fb6:	1f 77       	andi	r17, 0x7F	; 127
     fb8:	15 c0       	rjmp	.+42     	; 0xfe4 <vfprintf+0x1b8>
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	28 2e       	mov	r2, r24
     fbe:	31 2c       	mov	r3, r1
     fc0:	2a 0c       	add	r2, r10
     fc2:	3b 1c       	adc	r3, r11
     fc4:	f5 01       	movw	r30, r10
     fc6:	80 80       	ld	r8, Z
     fc8:	91 80       	ldd	r9, Z+1	; 0x01
     fca:	16 ff       	sbrs	r17, 6
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <vfprintf+0x1a8>
     fce:	6f 2d       	mov	r22, r15
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <vfprintf+0x1ac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	c4 01       	movw	r24, r8
     fda:	0e 94 1d 09 	call	0x123a	; 0x123a <strnlen_P>
     fde:	6c 01       	movw	r12, r24
     fe0:	10 68       	ori	r17, 0x80	; 128
     fe2:	51 01       	movw	r10, r2
     fe4:	13 fd       	sbrc	r17, 3
     fe6:	1c c0       	rjmp	.+56     	; 0x1020 <vfprintf+0x1f4>
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x1ca>
     fea:	80 e2       	ldi	r24, 0x20	; 32
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	b3 01       	movw	r22, r6
     ff0:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
     ff4:	ea 94       	dec	r14
     ff6:	8e 2d       	mov	r24, r14
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	c8 16       	cp	r12, r24
     ffc:	d9 06       	cpc	r13, r25
     ffe:	a8 f3       	brcs	.-22     	; 0xfea <vfprintf+0x1be>
    1000:	0f c0       	rjmp	.+30     	; 0x1020 <vfprintf+0x1f4>
    1002:	f4 01       	movw	r30, r8
    1004:	17 fd       	sbrc	r17, 7
    1006:	85 91       	lpm	r24, Z+
    1008:	17 ff       	sbrs	r17, 7
    100a:	81 91       	ld	r24, Z+
    100c:	4f 01       	movw	r8, r30
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	b3 01       	movw	r22, r6
    1012:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    1016:	e1 10       	cpse	r14, r1
    1018:	ea 94       	dec	r14
    101a:	08 94       	sec
    101c:	c1 08       	sbc	r12, r1
    101e:	d1 08       	sbc	r13, r1
    1020:	c1 14       	cp	r12, r1
    1022:	d1 04       	cpc	r13, r1
    1024:	71 f7       	brne	.-36     	; 0x1002 <vfprintf+0x1d6>
    1026:	e7 c0       	rjmp	.+462    	; 0x11f6 <vfprintf+0x3ca>
    1028:	84 36       	cpi	r24, 0x64	; 100
    102a:	11 f0       	breq	.+4      	; 0x1030 <vfprintf+0x204>
    102c:	89 36       	cpi	r24, 0x69	; 105
    102e:	51 f5       	brne	.+84     	; 0x1084 <vfprintf+0x258>
    1030:	f5 01       	movw	r30, r10
    1032:	17 ff       	sbrs	r17, 7
    1034:	07 c0       	rjmp	.+14     	; 0x1044 <vfprintf+0x218>
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	a2 81       	ldd	r26, Z+2	; 0x02
    103c:	b3 81       	ldd	r27, Z+3	; 0x03
    103e:	24 e0       	ldi	r18, 0x04	; 4
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <vfprintf+0x228>
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	aa 27       	eor	r26, r26
    104a:	97 fd       	sbrc	r25, 7
    104c:	a0 95       	com	r26
    104e:	ba 2f       	mov	r27, r26
    1050:	22 e0       	ldi	r18, 0x02	; 2
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	a2 0e       	add	r10, r18
    1056:	b3 1e       	adc	r11, r19
    1058:	01 2f       	mov	r16, r17
    105a:	0f 76       	andi	r16, 0x6F	; 111
    105c:	b7 ff       	sbrs	r27, 7
    105e:	08 c0       	rjmp	.+16     	; 0x1070 <vfprintf+0x244>
    1060:	b0 95       	com	r27
    1062:	a0 95       	com	r26
    1064:	90 95       	com	r25
    1066:	81 95       	neg	r24
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	af 4f       	sbci	r26, 0xFF	; 255
    106c:	bf 4f       	sbci	r27, 0xFF	; 255
    106e:	00 68       	ori	r16, 0x80	; 128
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	a2 01       	movw	r20, r4
    1076:	2a e0       	ldi	r18, 0x0A	; 10
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	0e 94 5f 09 	call	0x12be	; 0x12be <__ultoa_invert>
    107e:	d8 2e       	mov	r13, r24
    1080:	d4 18       	sub	r13, r4
    1082:	3f c0       	rjmp	.+126    	; 0x1102 <vfprintf+0x2d6>
    1084:	85 37       	cpi	r24, 0x75	; 117
    1086:	21 f4       	brne	.+8      	; 0x1090 <vfprintf+0x264>
    1088:	1f 7e       	andi	r17, 0xEF	; 239
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	20 c0       	rjmp	.+64     	; 0x10d0 <vfprintf+0x2a4>
    1090:	19 7f       	andi	r17, 0xF9	; 249
    1092:	8f 36       	cpi	r24, 0x6F	; 111
    1094:	a9 f0       	breq	.+42     	; 0x10c0 <vfprintf+0x294>
    1096:	80 37       	cpi	r24, 0x70	; 112
    1098:	20 f4       	brcc	.+8      	; 0x10a2 <vfprintf+0x276>
    109a:	88 35       	cpi	r24, 0x58	; 88
    109c:	09 f0       	breq	.+2      	; 0x10a0 <vfprintf+0x274>
    109e:	ae c0       	rjmp	.+348    	; 0x11fc <vfprintf+0x3d0>
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <vfprintf+0x28c>
    10a2:	80 37       	cpi	r24, 0x70	; 112
    10a4:	21 f0       	breq	.+8      	; 0x10ae <vfprintf+0x282>
    10a6:	88 37       	cpi	r24, 0x78	; 120
    10a8:	09 f0       	breq	.+2      	; 0x10ac <vfprintf+0x280>
    10aa:	a8 c0       	rjmp	.+336    	; 0x11fc <vfprintf+0x3d0>
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <vfprintf+0x284>
    10ae:	10 61       	ori	r17, 0x10	; 16
    10b0:	14 ff       	sbrs	r17, 4
    10b2:	09 c0       	rjmp	.+18     	; 0x10c6 <vfprintf+0x29a>
    10b4:	14 60       	ori	r17, 0x04	; 4
    10b6:	07 c0       	rjmp	.+14     	; 0x10c6 <vfprintf+0x29a>
    10b8:	14 ff       	sbrs	r17, 4
    10ba:	08 c0       	rjmp	.+16     	; 0x10cc <vfprintf+0x2a0>
    10bc:	16 60       	ori	r17, 0x06	; 6
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <vfprintf+0x2a0>
    10c0:	28 e0       	ldi	r18, 0x08	; 8
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <vfprintf+0x2a4>
    10c6:	20 e1       	ldi	r18, 0x10	; 16
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x2a4>
    10cc:	20 e1       	ldi	r18, 0x10	; 16
    10ce:	32 e0       	ldi	r19, 0x02	; 2
    10d0:	f5 01       	movw	r30, r10
    10d2:	17 ff       	sbrs	r17, 7
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <vfprintf+0x2b8>
    10d6:	60 81       	ld	r22, Z
    10d8:	71 81       	ldd	r23, Z+1	; 0x01
    10da:	82 81       	ldd	r24, Z+2	; 0x02
    10dc:	93 81       	ldd	r25, Z+3	; 0x03
    10de:	44 e0       	ldi	r20, 0x04	; 4
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	06 c0       	rjmp	.+12     	; 0x10f0 <vfprintf+0x2c4>
    10e4:	60 81       	ld	r22, Z
    10e6:	71 81       	ldd	r23, Z+1	; 0x01
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	42 e0       	ldi	r20, 0x02	; 2
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	a4 0e       	add	r10, r20
    10f2:	b5 1e       	adc	r11, r21
    10f4:	a2 01       	movw	r20, r4
    10f6:	0e 94 5f 09 	call	0x12be	; 0x12be <__ultoa_invert>
    10fa:	d8 2e       	mov	r13, r24
    10fc:	d4 18       	sub	r13, r4
    10fe:	01 2f       	mov	r16, r17
    1100:	0f 77       	andi	r16, 0x7F	; 127
    1102:	06 ff       	sbrs	r16, 6
    1104:	09 c0       	rjmp	.+18     	; 0x1118 <vfprintf+0x2ec>
    1106:	0e 7f       	andi	r16, 0xFE	; 254
    1108:	df 14       	cp	r13, r15
    110a:	30 f4       	brcc	.+12     	; 0x1118 <vfprintf+0x2ec>
    110c:	04 ff       	sbrs	r16, 4
    110e:	06 c0       	rjmp	.+12     	; 0x111c <vfprintf+0x2f0>
    1110:	02 fd       	sbrc	r16, 2
    1112:	04 c0       	rjmp	.+8      	; 0x111c <vfprintf+0x2f0>
    1114:	0f 7e       	andi	r16, 0xEF	; 239
    1116:	02 c0       	rjmp	.+4      	; 0x111c <vfprintf+0x2f0>
    1118:	1d 2d       	mov	r17, r13
    111a:	01 c0       	rjmp	.+2      	; 0x111e <vfprintf+0x2f2>
    111c:	1f 2d       	mov	r17, r15
    111e:	80 2f       	mov	r24, r16
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	04 ff       	sbrs	r16, 4
    1124:	0c c0       	rjmp	.+24     	; 0x113e <vfprintf+0x312>
    1126:	fe 01       	movw	r30, r28
    1128:	ed 0d       	add	r30, r13
    112a:	f1 1d       	adc	r31, r1
    112c:	20 81       	ld	r18, Z
    112e:	20 33       	cpi	r18, 0x30	; 48
    1130:	11 f4       	brne	.+4      	; 0x1136 <vfprintf+0x30a>
    1132:	09 7e       	andi	r16, 0xE9	; 233
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <vfprintf+0x31c>
    1136:	02 ff       	sbrs	r16, 2
    1138:	06 c0       	rjmp	.+12     	; 0x1146 <vfprintf+0x31a>
    113a:	1e 5f       	subi	r17, 0xFE	; 254
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <vfprintf+0x31c>
    113e:	86 78       	andi	r24, 0x86	; 134
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	09 f0       	breq	.+2      	; 0x1148 <vfprintf+0x31c>
    1146:	1f 5f       	subi	r17, 0xFF	; 255
    1148:	80 2e       	mov	r8, r16
    114a:	99 24       	eor	r9, r9
    114c:	03 fd       	sbrc	r16, 3
    114e:	12 c0       	rjmp	.+36     	; 0x1174 <vfprintf+0x348>
    1150:	00 ff       	sbrs	r16, 0
    1152:	0d c0       	rjmp	.+26     	; 0x116e <vfprintf+0x342>
    1154:	fd 2c       	mov	r15, r13
    1156:	1e 15       	cp	r17, r14
    1158:	50 f4       	brcc	.+20     	; 0x116e <vfprintf+0x342>
    115a:	fe 0c       	add	r15, r14
    115c:	f1 1a       	sub	r15, r17
    115e:	1e 2d       	mov	r17, r14
    1160:	06 c0       	rjmp	.+12     	; 0x116e <vfprintf+0x342>
    1162:	80 e2       	ldi	r24, 0x20	; 32
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b3 01       	movw	r22, r6
    1168:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    116c:	1f 5f       	subi	r17, 0xFF	; 255
    116e:	1e 15       	cp	r17, r14
    1170:	c0 f3       	brcs	.-16     	; 0x1162 <vfprintf+0x336>
    1172:	04 c0       	rjmp	.+8      	; 0x117c <vfprintf+0x350>
    1174:	1e 15       	cp	r17, r14
    1176:	10 f4       	brcc	.+4      	; 0x117c <vfprintf+0x350>
    1178:	e1 1a       	sub	r14, r17
    117a:	01 c0       	rjmp	.+2      	; 0x117e <vfprintf+0x352>
    117c:	ee 24       	eor	r14, r14
    117e:	84 fe       	sbrs	r8, 4
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <vfprintf+0x374>
    1182:	80 e3       	ldi	r24, 0x30	; 48
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	b3 01       	movw	r22, r6
    1188:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    118c:	82 fe       	sbrs	r8, 2
    118e:	1f c0       	rjmp	.+62     	; 0x11ce <vfprintf+0x3a2>
    1190:	81 fe       	sbrs	r8, 1
    1192:	03 c0       	rjmp	.+6      	; 0x119a <vfprintf+0x36e>
    1194:	88 e5       	ldi	r24, 0x58	; 88
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	10 c0       	rjmp	.+32     	; 0x11ba <vfprintf+0x38e>
    119a:	88 e7       	ldi	r24, 0x78	; 120
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0d c0       	rjmp	.+26     	; 0x11ba <vfprintf+0x38e>
    11a0:	c4 01       	movw	r24, r8
    11a2:	86 78       	andi	r24, 0x86	; 134
    11a4:	90 70       	andi	r25, 0x00	; 0
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	91 f0       	breq	.+36     	; 0x11ce <vfprintf+0x3a2>
    11aa:	81 fc       	sbrc	r8, 1
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <vfprintf+0x386>
    11ae:	80 e2       	ldi	r24, 0x20	; 32
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <vfprintf+0x388>
    11b2:	8b e2       	ldi	r24, 0x2B	; 43
    11b4:	07 fd       	sbrc	r16, 7
    11b6:	8d e2       	ldi	r24, 0x2D	; 45
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	b3 01       	movw	r22, r6
    11bc:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <vfprintf+0x3a2>
    11c2:	80 e3       	ldi	r24, 0x30	; 48
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	b3 01       	movw	r22, r6
    11c8:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11cc:	fa 94       	dec	r15
    11ce:	df 14       	cp	r13, r15
    11d0:	c0 f3       	brcs	.-16     	; 0x11c2 <vfprintf+0x396>
    11d2:	da 94       	dec	r13
    11d4:	f2 01       	movw	r30, r4
    11d6:	ed 0d       	add	r30, r13
    11d8:	f1 1d       	adc	r31, r1
    11da:	80 81       	ld	r24, Z
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	b3 01       	movw	r22, r6
    11e0:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11e4:	dd 20       	and	r13, r13
    11e6:	a9 f7       	brne	.-22     	; 0x11d2 <vfprintf+0x3a6>
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <vfprintf+0x3ca>
    11ea:	80 e2       	ldi	r24, 0x20	; 32
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	b3 01       	movw	r22, r6
    11f0:	0e 94 33 09 	call	0x1266	; 0x1266 <fputc>
    11f4:	ea 94       	dec	r14
    11f6:	ee 20       	and	r14, r14
    11f8:	c1 f7       	brne	.-16     	; 0x11ea <vfprintf+0x3be>
    11fa:	40 ce       	rjmp	.-896    	; 0xe7c <vfprintf+0x50>
    11fc:	f3 01       	movw	r30, r6
    11fe:	86 81       	ldd	r24, Z+6	; 0x06
    1200:	97 81       	ldd	r25, Z+7	; 0x07
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <vfprintf+0x3dc>
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	9f ef       	ldi	r25, 0xFF	; 255
    1208:	2d 96       	adiw	r28, 0x0d	; 13
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	cf 90       	pop	r12
    1224:	bf 90       	pop	r11
    1226:	af 90       	pop	r10
    1228:	9f 90       	pop	r9
    122a:	8f 90       	pop	r8
    122c:	7f 90       	pop	r7
    122e:	6f 90       	pop	r6
    1230:	5f 90       	pop	r5
    1232:	4f 90       	pop	r4
    1234:	3f 90       	pop	r3
    1236:	2f 90       	pop	r2
    1238:	08 95       	ret

0000123a <strnlen_P>:
    123a:	fc 01       	movw	r30, r24
    123c:	05 90       	lpm	r0, Z+
    123e:	61 50       	subi	r22, 0x01	; 1
    1240:	70 40       	sbci	r23, 0x00	; 0
    1242:	01 10       	cpse	r0, r1
    1244:	d8 f7       	brcc	.-10     	; 0x123c <strnlen_P+0x2>
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	8e 0f       	add	r24, r30
    124c:	9f 1f       	adc	r25, r31
    124e:	08 95       	ret

00001250 <strnlen>:
    1250:	fc 01       	movw	r30, r24
    1252:	61 50       	subi	r22, 0x01	; 1
    1254:	70 40       	sbci	r23, 0x00	; 0
    1256:	01 90       	ld	r0, Z+
    1258:	01 10       	cpse	r0, r1
    125a:	d8 f7       	brcc	.-10     	; 0x1252 <strnlen+0x2>
    125c:	80 95       	com	r24
    125e:	90 95       	com	r25
    1260:	8e 0f       	add	r24, r30
    1262:	9f 1f       	adc	r25, r31
    1264:	08 95       	ret

00001266 <fputc>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	8c 01       	movw	r16, r24
    1270:	eb 01       	movw	r28, r22
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 ff       	sbrs	r24, 1
    1276:	1b c0       	rjmp	.+54     	; 0x12ae <fputc+0x48>
    1278:	82 ff       	sbrs	r24, 2
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <fputc+0x30>
    127c:	2e 81       	ldd	r18, Y+6	; 0x06
    127e:	3f 81       	ldd	r19, Y+7	; 0x07
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	64 f4       	brge	.+24     	; 0x12a2 <fputc+0x3c>
    128a:	e8 81       	ld	r30, Y
    128c:	f9 81       	ldd	r31, Y+1	; 0x01
    128e:	01 93       	st	Z+, r16
    1290:	f9 83       	std	Y+1, r31	; 0x01
    1292:	e8 83       	st	Y, r30
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <fputc+0x3c>
    1296:	e8 85       	ldd	r30, Y+8	; 0x08
    1298:	f9 85       	ldd	r31, Y+9	; 0x09
    129a:	80 2f       	mov	r24, r16
    129c:	09 95       	icall
    129e:	00 97       	sbiw	r24, 0x00	; 0
    12a0:	31 f4       	brne	.+12     	; 0x12ae <fputc+0x48>
    12a2:	8e 81       	ldd	r24, Y+6	; 0x06
    12a4:	9f 81       	ldd	r25, Y+7	; 0x07
    12a6:	01 96       	adiw	r24, 0x01	; 1
    12a8:	9f 83       	std	Y+7, r25	; 0x07
    12aa:	8e 83       	std	Y+6, r24	; 0x06
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <fputc+0x4c>
    12ae:	0f ef       	ldi	r16, 0xFF	; 255
    12b0:	1f ef       	ldi	r17, 0xFF	; 255
    12b2:	c8 01       	movw	r24, r16
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <__ultoa_invert>:
    12be:	fa 01       	movw	r30, r20
    12c0:	aa 27       	eor	r26, r26
    12c2:	28 30       	cpi	r18, 0x08	; 8
    12c4:	51 f1       	breq	.+84     	; 0x131a <__ultoa_invert+0x5c>
    12c6:	20 31       	cpi	r18, 0x10	; 16
    12c8:	81 f1       	breq	.+96     	; 0x132a <__ultoa_invert+0x6c>
    12ca:	e8 94       	clt
    12cc:	6f 93       	push	r22
    12ce:	6e 7f       	andi	r22, 0xFE	; 254
    12d0:	6e 5f       	subi	r22, 0xFE	; 254
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
    12d4:	8f 4f       	sbci	r24, 0xFF	; 255
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	af 4f       	sbci	r26, 0xFF	; 255
    12da:	b1 e0       	ldi	r27, 0x01	; 1
    12dc:	3e d0       	rcall	.+124    	; 0x135a <__ultoa_invert+0x9c>
    12de:	b4 e0       	ldi	r27, 0x04	; 4
    12e0:	3c d0       	rcall	.+120    	; 0x135a <__ultoa_invert+0x9c>
    12e2:	67 0f       	add	r22, r23
    12e4:	78 1f       	adc	r23, r24
    12e6:	89 1f       	adc	r24, r25
    12e8:	9a 1f       	adc	r25, r26
    12ea:	a1 1d       	adc	r26, r1
    12ec:	68 0f       	add	r22, r24
    12ee:	79 1f       	adc	r23, r25
    12f0:	8a 1f       	adc	r24, r26
    12f2:	91 1d       	adc	r25, r1
    12f4:	a1 1d       	adc	r26, r1
    12f6:	6a 0f       	add	r22, r26
    12f8:	71 1d       	adc	r23, r1
    12fa:	81 1d       	adc	r24, r1
    12fc:	91 1d       	adc	r25, r1
    12fe:	a1 1d       	adc	r26, r1
    1300:	20 d0       	rcall	.+64     	; 0x1342 <__ultoa_invert+0x84>
    1302:	09 f4       	brne	.+2      	; 0x1306 <__ultoa_invert+0x48>
    1304:	68 94       	set
    1306:	3f 91       	pop	r19
    1308:	2a e0       	ldi	r18, 0x0A	; 10
    130a:	26 9f       	mul	r18, r22
    130c:	11 24       	eor	r1, r1
    130e:	30 19       	sub	r19, r0
    1310:	30 5d       	subi	r19, 0xD0	; 208
    1312:	31 93       	st	Z+, r19
    1314:	de f6       	brtc	.-74     	; 0x12cc <__ultoa_invert+0xe>
    1316:	cf 01       	movw	r24, r30
    1318:	08 95       	ret
    131a:	46 2f       	mov	r20, r22
    131c:	47 70       	andi	r20, 0x07	; 7
    131e:	40 5d       	subi	r20, 0xD0	; 208
    1320:	41 93       	st	Z+, r20
    1322:	b3 e0       	ldi	r27, 0x03	; 3
    1324:	0f d0       	rcall	.+30     	; 0x1344 <__ultoa_invert+0x86>
    1326:	c9 f7       	brne	.-14     	; 0x131a <__ultoa_invert+0x5c>
    1328:	f6 cf       	rjmp	.-20     	; 0x1316 <__ultoa_invert+0x58>
    132a:	46 2f       	mov	r20, r22
    132c:	4f 70       	andi	r20, 0x0F	; 15
    132e:	40 5d       	subi	r20, 0xD0	; 208
    1330:	4a 33       	cpi	r20, 0x3A	; 58
    1332:	18 f0       	brcs	.+6      	; 0x133a <__ultoa_invert+0x7c>
    1334:	49 5d       	subi	r20, 0xD9	; 217
    1336:	31 fd       	sbrc	r19, 1
    1338:	40 52       	subi	r20, 0x20	; 32
    133a:	41 93       	st	Z+, r20
    133c:	02 d0       	rcall	.+4      	; 0x1342 <__ultoa_invert+0x84>
    133e:	a9 f7       	brne	.-22     	; 0x132a <__ultoa_invert+0x6c>
    1340:	ea cf       	rjmp	.-44     	; 0x1316 <__ultoa_invert+0x58>
    1342:	b4 e0       	ldi	r27, 0x04	; 4
    1344:	a6 95       	lsr	r26
    1346:	97 95       	ror	r25
    1348:	87 95       	ror	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	ba 95       	dec	r27
    1350:	c9 f7       	brne	.-14     	; 0x1344 <__ultoa_invert+0x86>
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	61 05       	cpc	r22, r1
    1356:	71 05       	cpc	r23, r1
    1358:	08 95       	ret
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	0a 2e       	mov	r0, r26
    1360:	06 94       	lsr	r0
    1362:	57 95       	ror	r21
    1364:	47 95       	ror	r20
    1366:	37 95       	ror	r19
    1368:	27 95       	ror	r18
    136a:	ba 95       	dec	r27
    136c:	c9 f7       	brne	.-14     	; 0x1360 <__ultoa_invert+0xa2>
    136e:	62 0f       	add	r22, r18
    1370:	73 1f       	adc	r23, r19
    1372:	84 1f       	adc	r24, r20
    1374:	95 1f       	adc	r25, r21
    1376:	a0 1d       	adc	r26, r0
    1378:	08 95       	ret

0000137a <_exit>:
    137a:	f8 94       	cli

0000137c <__stop_program>:
    137c:	ff cf       	rjmp	.-2      	; 0x137c <__stop_program>
