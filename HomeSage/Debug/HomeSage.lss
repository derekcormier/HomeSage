
HomeSage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000a0  00000000  00000000  000008b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000048f  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016e  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000378  00000000  00000000  00000f55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000107  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:
#include "lcd.h"
#include "adc.h"

int main(void)
{
	initPeakDet();
  ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <initPeakDet>
    while(1)
    {
       resetPeakDet();
  d2:	0e 94 6e 00 	call	0xdc	; 0xdc <resetPeakDet>
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <main+0x4>

000000d8 <initPeakDet>:
#include <util/delay.h>
#include "peakdet.h"

void initPeakDet(void)			// POST: Sets up the pin(s) for output
{
	DDRC |= 0b00000001;			// Set PORTC pin 0 to output
  d8:	38 9a       	sbi	0x07, 0	; 7
//	resetPeakDet();				// Initial reset of peak detector			
}
  da:	08 95       	ret

000000dc <resetPeakDet>:

void resetPeakDet(void)			// POST: Resets current sensor peak detector
{
	PORTC = 0b00000001;			// Drain stored voltage from peak detector
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	8f ed       	ldi	r24, 0xDF	; 223
  e2:	93 e9       	ldi	r25, 0x93	; 147
  e4:	a4 e0       	ldi	r26, 0x04	; 4
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	a0 40       	sbci	r26, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <resetPeakDet+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <resetPeakDet+0x14>
  f0:	00 00       	nop
	_delay_ms(1500);			// Wait long enough to discharge capacitor
	PORTC = 0b00000000;					// Close NMOS to begin storing voltage
  f2:	18 b8       	out	0x08, r1	; 8
  f4:	8f ed       	ldi	r24, 0xDF	; 223
  f6:	93 e9       	ldi	r25, 0x93	; 147
  f8:	a4 e0       	ldi	r26, 0x04	; 4
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <resetPeakDet+0x1e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <resetPeakDet+0x28>
 104:	00 00       	nop
	_delay_ms(1500);
 106:	08 95       	ret

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
